import [add-common-feature add-feature add-lookup] from "./table-util"
extern Set

define MarkClasses {
	'above' 'below' 'overlay' 'slash' 'topright' 'bottomright'
	'trailing' 'lf' 'tieAbove' 'tieBelow' 'aboveBrace' 'belowBrace' 'grekUpperTonos'
	'cvDecompose' 'enclosureInner' 'enclosureInnerFirstHalf' 'enclosureInnerSecondHalf'
	'fracBuildUp'
}

export : define [buildMarkMkmk sink glyphStore] : begin
	define mark : add-feature sink 'mark'
	define mkmk : add-feature sink 'mkmk'
	add-common-feature sink mark
	add-common-feature sink mkmk

	local markLookupNames {}
	local mkmkLookupNames {}

	foreach markCls [items-of MarkClasses] : begin
		local [object markLookup mkmkLookup] : createMTLookups glyphStore { markCls }
		if ([objectIsNotEmpty markLookup.marks] && [objectIsNotEmpty markLookup.bases]) : begin
			local lidMark : add-lookup sink markLookup
			mark.lookups.push    lidMark
			markLookupNames.push lidMark

		if ([objectIsNotEmpty mkmkLookup.marks] && [objectIsNotEmpty mkmkLookup.bases]) : begin
			local lidMkmk : add-lookup sink mkmkLookup
			mkmk.lookups.push    lidMkmk
			mkmkLookupNames.push lidMkmk

	foreach lidMark [items-of markLookupNames] : foreach lidMkmk [items-of mkmkLookupNames]
		sink.lookupDep.push { lidMark lidMkmk }

define [createMTLookups glyphStore markClasses] : begin
	local markLookup {.type 'gpos_mark_to_base' .marks {.} .bases {.}}
	local mkmkLookup {.type 'gpos_mark_to_mark' .marks {.} .bases {.}}
	local allowMarkClsSet : new Set markClasses
	foreach { gn glyph } [glyphStore.namedEntries] : begin
		createMarkInfo markLookup.marks gn glyph allowMarkClsSet
		createMarkInfo mkmkLookup.marks gn glyph allowMarkClsSet
		local isMark : objectIsNotEmpty glyph.markAnchors
		if isMark
			createBaseInfo mkmkLookup.bases gn glyph allowMarkClsSet
			createBaseInfo markLookup.bases gn glyph allowMarkClsSet
	return : object markLookup mkmkLookup

define [createBaseInfo sink gn glyph allowMarkClsSet] : begin
	local res {.}
	local pushed false
	foreach { markCls anchor } [pairs-of glyph.baseAnchors] : if [allowMarkClsSet.has markCls] : begin
		set pushed true
		set res.(markCls) {.x anchor.x .y anchor.y}
	if pushed : set sink.(gn) res
	return pushed

define [createMarkInfo sink gn glyph allowMarkClsSet] : begin
	local m null
	foreach { markCls anchor } [pairs-of glyph.markAnchors] : if [allowMarkClsSet.has markCls] : begin
		set m {.class markCls .x anchor.x .y anchor.y}
	if m : set sink.(gn) m
	return m

define [objectIsNotEmpty obj] : obj && [Object.keys obj].length