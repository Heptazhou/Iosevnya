### Punctuation symbols
$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'

glyph-module

glyph-block Symbol-Punctuation-Asterisk : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define asteriskCenterY : ParenTop - LongJut * 1.5
	define asteriskCenterYLow : asteriskCenterY + 2 * (SymbolMid - asteriskCenterY)

	define asteriskKinds : list
		#  sides  size  rot  pFine stroke              name             dual            triple         high            sMid             midXH    low
		list { 5  1.2   0    0.4   Stroke          } { 'asterisk'       'dualAsterisk'  'asterism' } { 'pentaHigh'     'pentaSMid'      'midXH'  'pentaLow'     }
		list { 6  1.2   0    0.4   Stroke          } { 'asterisk'       'dualAsterisk'  'asterism' } { 'hexHigh'       'hexSMid'        ''       'hexLow'       }
		list { 5  1.2   1    0.4   Stroke          } { 'asterisk'       'dualAsterisk'  'asterism' } { 'turnPentaHigh' 'turnPentaSMid'  ''       'turnPentaLow' }
		list { 6  1.2   0.5  0.4   Stroke          } { 'asterisk'       'dualAsterisk'  'asterism' } { 'turnHexHigh'   'turnHexSMid'    ''       'turnHexLow'   }
		list { 5  0.85  0    0.4   Stroke          } { 'smallAsterisk'  ''              ''         } { 'high'          'low'            ''       ''             }
		list { 5  1     0    0.4   GeometryStroke  } { 'opAsterisk'     ''              ''         } { 'high'          'low'            ''       ''             }
		list { 8  1.2   0.5  0.4  [AdviceStroke 3] } { 'flower'         ''              ''         } { 'high'          'sMid'           ''       ''             }

	foreach [{{ sides size rot pFine stroke } { name dual triple } { high sMid midXH low } } : items-of asteriskKinds] : begin
		create-glyph (name + '.' + high) : glyph-proc
			local radius : LongJut * size
			local fine : stroke * pFine
			local final : 0.5 * [Math.min stroke (radius * Math.PI / sides)]

			foreach j [range 0 sides] : begin
				local s : Math.sin ((2 * j / sides + rot) * Math.PI)
				local c : Math.cos ((2 * j / sides + rot) * Math.PI)
				include : dispiro
					flat Middle asteriskCenterY [widths fine fine]
					curl (Middle + radius * s) (asteriskCenterY + radius * c) [widths final final]

		if sMid : create-glyph (name + '.' + sMid) : composite-proc
			refer-glyph (name + '.' + high)
			ApparentTranslate 0 (SymbolMid - asteriskCenterY)

		if midXH : create-glyph (name + '.' + midXH) : composite-proc
			refer-glyph (name + '.' + high)
			ApparentTranslate 0 (XH / 2 - asteriskCenterY)

		if low : create-glyph (name + '.' + low) : composite-proc
			refer-glyph (name + '.' + high)
			ApparentTranslate 0 (2 * (SymbolMid - asteriskCenterY))

		if (dual && sMid && low) : create-glyph (dual + '.' + sMid) : composite-proc
			refer-glyph (name + '.' + high)
			refer-glyph (name + '.' + low)

		if (triple && sMid && low) : for-width-kinds WideWidth1
			local scale : Math.sqrt (MosaicWidthScalar / 2)
			create-glyph ([MangleName triple] + '.' + sMid) : glyph-proc
				set-width MosaicWidth
				include : WithTransform [ApparentTranslate (MosaicWidth * 0.5  - Width / 2) 0]
					composite-proc
						refer-glyph (name + '.' + high)
						ScaleAround Middle asteriskCenterY    scale scale
				include : WithTransform [ApparentTranslate (MosaicWidth * 0.75 - Width / 2) 0]
					composite-proc
						refer-glyph (name + '.' + low)
						ScaleAround Middle asteriskCenterYLow scale scale
				include : WithTransform [ApparentTranslate (MosaicWidth * 0.25 - Width / 2) 0]
					composite-proc
						refer-glyph (name + '.' + low)
						ScaleAround Middle asteriskCenterYLow scale scale

	select-variant 'asterisk' '*'
	select-variant 'asterisk/sMid' (shapeFrom -- 'asterisk')
	select-variant 'lowAsterisk' 0x204E (shapeFrom -- 'asterisk')
	select-variant 'dualAsterisk' 0x2051 (follow -- 'asterisk/sMid')
	select-variant 'flower' 0x2055 (follow -- 'asterisk/positionOnly')

	for-width-kinds WideWidth1
		select-variant [MangleName 'asterism'] [MangleUnicode 0x2042] (follow -- 'asterisk/sMid')
