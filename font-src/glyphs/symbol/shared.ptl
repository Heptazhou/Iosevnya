$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../support/utils'

glyph-module

glyph-block Shared-Symbol-Shapes : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	glyph-block-export CreateWaveShape
	define [CreateWaveShape dist sw _phaesShift] : begin
		define WaveResolution 64
		define WaveMagnitude : dist * (3 / 4) - sw / 2
		define WaveAdj : TanSlope * WaveMagnitude * (-0.75)
		define phaseShift : fallback _phaesShift 0
		define [WaveShapeImpl] : params [left right ts te xsJoin xfJoin diagJoinS diagJoinF] : glyph-proc
			local resolution : Math.ceil (WaveResolution * (te - ts))
			local knots {}
			foreach [pr : range 0 till resolution] : begin
				local theta : (phaseShift + [mix ts te (pr / resolution)]) * Math.PI * 2
				local waveRelY : [Math.sin theta] + 0.075 * [Math.sin (theta * 3)]
				knots.push : g2
					(WaveAdj * waveRelY) + [mix left right (pr / resolution)]
					SymbolMid + WaveMagnitude * waveRelY
			include : dispiro
				widths.center sw
				if (xsJoin === nothing) {} :  if diagJoinS
					list [g2                   xsJoin SymbolMid]
					list [straight.right.start xsJoin SymbolMid]
				begin knots
				if (xfJoin === nothing) {} :  if diagJoinF
					list [g2                   xfJoin SymbolMid]
					list [straight.right.end   xfJoin SymbolMid]

		define [WaveShape] : params [left right xsJoin xfJoin diagJoinS diagJoinF [waveCount 1] [unitWidth Width]] : WaveShapeImpl (unitWidth * -left) (unitWidth * (1 + right)) (-left * waveCount) ((1 + right) * waveCount) xsJoin xfJoin diagJoinS diagJoinF
		return WaveShape

	# Dot variant constructor
	glyph-block-export DotVariants
	define DotVariants : object
		round  { DotAt    1                                O }
		square { SquareAt DesignParameters.squareDotScalar 0 }

	glyph-block-export WithDotVariants
	define [WithDotVariants name unicode F] : begin
		foreach { suffix { DrawAt kDotRadius overshoot } } [Object.entries DotVariants] : do
			create-glyph "\(name).\(suffix)" : F DrawAt kDotRadius overshoot
		select-variant name unicode (follow -- 'punctuationDot')
