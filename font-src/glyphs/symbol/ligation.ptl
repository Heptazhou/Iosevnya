###### Other symbols
$$include '../../meta/macros.ptl'

import [mix clamp fallback] from '../../support/utils'
import [Joining] from '../../support/gr'
import [DesignParameters] from '../../meta/aesthetics'

glyph-module

glyph-block Symbol-Ligation : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Symbol-Math-Relation-Common : LessSlope

	local arrowheadsKern : (2 / 3) * [clamp 0 (Width * 0.4) (Width - OperatorStroke * 3)]

	define [SetJoiningKind lk rk] : glyph-proc
		local k 0
		if (lk !== 'f') : set k : k + Joining.Classes.Left
		if (rk !== 'f') : set k : k + Joining.Classes.Right
		Joining.set currentGlyph k

	define RodBarHGap : Math.max (Width / 8) [AdviceStroke 6]
	define RodBarHOffset : 0.5 * Width - HalfStroke * HVContrast - RodBarHGap

	define arrowheadSlope : 1 / LessSlope
	define [ArrowBarConfig extend kern join doubleBar] : begin
		define cleft O
		define cright (Width - O)
		define arrowr : if doubleBar
			Width + SB + OperatorStroke * HVContrast
			Width + extend
		define arrowl : if doubleBar
			-Width + RightSB - OperatorStroke * HVContrast
			0 - extend
		define zleft : cleft - Width + RightSB
		define zright : cright + SB
		define lk : object
			f    SB
			p    (arrowl + Width)
			l    arrowl
			l1 : arrowl - kern
			c    cleft
			m    (0 - RodBarHOffset)
			j    (-join)
			j1   (-join - kern)
			z    zleft
			lx : mix arrowl 0 0.5

		define rk : object
			f    RightSB
			p    (arrowr - Width)
			r    arrowr
			r1 : arrowr + kern
			c    cright
			m    (Width + RodBarHOffset)
			j    (Width + join)
			j1   (Width + join + kern)
			z    zright

		define result {}
		foreach [l : items-of : Object.keys lk] : foreach [r : items-of : Object.keys rk]
			result.push { l r lk.(l) rk.(r) }
		return result

	local arrowExtend [clamp 0 Width (RightSB - OperatorStroke / 2 * arrowheadSlope)]
	local arrowJ : clamp 0 Width (SB + OperatorStroke / 2 * arrowheadSlope)

	define [HyphenNotch x] : union
		VBar x (SymbolMid + OperatorStroke / 3) (SymbolMid + OperatorStroke) OperatorStroke
		VBar x (SymbolMid - OperatorStroke / 3) (SymbolMid - OperatorStroke) OperatorStroke
	foreach [{lS rS left right} : items-of [ArrowBarConfig arrowExtend arrowheadsKern arrowJ 0]] : begin
		create-glyph "hyphen.lig.\(lS)\(rS)" : glyph-proc
			include : SetJoiningKind lS rS
			include : HBar left right SymbolMid OperatorStroke
		create-glyph "hyphen.lig.\(lS)\(rS).notched" : glyph-proc
			include : SetJoiningKind lS rS
			include : difference
				HBar left right SymbolMid OperatorStroke
				if (left < SB)       [HyphenNotch 0]     [glyph-proc]
				if (right > RightSB) [HyphenNotch Width] [glyph-proc]

	# =>
	local dblArrowD  : (ParenTop - ParenBot) * DesignParameters.equal_wideness + OperatorStroke * 0.75
	local dblArrowSw : Math.min OperatorStroke (dblArrowD * 3 / 4)
	local dblExtend : clamp 0 Width (RightSB - (dblArrowD - dblArrowSw / 2) * arrowheadSlope)
	local dblArrowJ : clamp 0 Width (SB + (dblArrowD - dblArrowSw / 2) * arrowheadSlope)

	foreach {lS rS left right} [items-of : ArrowBarConfig dblExtend arrowheadsKern dblArrowJ 1]
		create-glyph "equal.lig.\(lS)\(rS)" : glyph-proc
			include : SetJoiningKind lS rS
			include : HBarTop left right (SymbolMid + dblArrowD) dblArrowSw
			include : HBarBottom left right (SymbolMid - dblArrowD) dblArrowSw

	do "bottom sign derivatives"
		glyph-block-import Symbol-Punctuation-Dashes : UnderScoreConfig

		foreach { suffix { yBar } } [Object.entries UnderScoreConfig] : do
			create-glyph "underscore.lig.zf.\(suffix)" : glyph-proc
				Joining.set currentGlyph Joining.Classes.Left
				include : HBarBottom (O - SB) RightSB yBar
			create-glyph "underscore.lig.fm.\(suffix)" : glyph-proc
				Joining.set currentGlyph Joining.Classes.Right
				include : HBarBottom SB (Width + RodBarHOffset) yBar
			create-glyph "underscore.lig.mf.\(suffix)" : glyph-proc
				Joining.set currentGlyph Joining.Classes.Left
				include : HBarBottom (0 - RodBarHOffset) RightSB yBar
			create-glyph "bar.lig.bottomMid.\(suffix)"
				VBar Middle yBar ParenTop

		select-variant "underscore.lig.zf" (follow -- 'underscore')
		select-variant "underscore.lig.fm" (follow -- 'underscore')
		select-variant "underscore.lig.mf" (follow -- 'underscore')
		select-variant "bar.lig.bottomMid" (follow -- 'underscore')

	do "Waves"
		glyph-block-import Shared-Symbol-Shapes : CreateWaveShape
		define WaveShape : CreateWaveShape dblArrowD dblArrowSw (-1 / 4)

		define LR  (2  / 32)
		define LR1 (9  / 32)
		define Z   (1  / 4)
		define F   (-1 / 4)
		define C   0
		define J   (-1 / 8)

		define lk : object
			l    { LR   (-arrowExtend)                           false }
			l1   { LR1  (-arrowExtend - arrowheadsKern)          false }
			f    { F    nothing                                  false }
			z    { Z    nothing                                  false }
			c    { C    nothing                                  false }
			m    { J    (0 - RodBarHOffset)                       true }
			j    { J    (-arrowJ)                                 true }
			j1   { J    (-arrowJ - arrowheadsKern)                true }

		define rk : object
			r    { LR   (Width + arrowExtend)                    false }
			r1   { LR1  (Width + arrowExtend + arrowheadsKern)   false }
			f    { F    nothing                                  false }
			z    { Z    nothing                                  false }
			c    { C    nothing                                  false }
			m    { J    (Width + RodBarHOffset)                   true }
			j    { J    (Width + arrowJ)                          true }
			j1   { J    (Width + arrowJ + arrowheadsKern)         true }

		foreach [lS : items-of : Object.keys lk] : foreach [rS : items-of : Object.keys rk] : create-glyph"wave.lig.\(lS)\(rS)" : glyph-proc
			include : SetJoiningKind lS rS
			local {tL jL djL} lk.(lS)
			local {tR jR djR} rk.(rS)
			include : WaveShape
				left  -- tL
				right -- tR
				xsJoin -- jL
				xfJoin -- jR
				diagJoinS -- djL
				diagJoinF -- djR


	do "Arrowheads"
		glyph-block-import Symbol-Math-Relation-Common : dH
		glyph-block-import Symbol-Math-Relation-Inequality : LigationLessShape LigationGreaterShape

		create-glyph 'less.lig.dblhead' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : LigationLessShape (SymbolMid + dH) (SymbolMid - dH) SB RightSB OperatorStroke dblArrowSw (dblArrowD * 2 - dblArrowSw * 2)
			create-aliased-glyph 'less.lig.dblhead.mid'
			create-forked-glyph 'less.lig.dblhead.shift1' : glyph-proc
				Joining.set currentGlyph Joining.Classes.Mid
				include : Translate (-arrowheadsKern) 0

		create-glyph 'greater.lig.dblhead' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : LigationGreaterShape (SymbolMid + dH) (SymbolMid - dH) SB RightSB OperatorStroke dblArrowSw (dblArrowD * 2 - dblArrowSw * 2)
			create-aliased-glyph 'greater.lig.dblhead.mid'
			create-forked-glyph 'greater.lig.dblhead.shift1' : glyph-proc
				Joining.set currentGlyph Joining.Classes.Mid
				include : Translate (+arrowheadsKern) 0

		derive-glyphs 'exclam.lig.htmlcommentstart' null 'exclam' : function [src gr] : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : refer-glyph src
			include : Translate (((RightSB - Width) + (Width - arrowExtend / 2)) / 2 - Middle) 0
			include : HBar (-arrowExtend) (RightSB - Width) SymbolMid OperatorStroke

		# Right-shifted >
		define [ArrowShiftTranslate k] : glyph-proc
			include : Translate (arrowheadsKern * k) 0
			if (k > 0) : Joining.set currentGlyph Joining.Classes.Right
			if (k < 0) : Joining.set currentGlyph Joining.Classes.Left
		create-glyph 'greater.lig.shift0' : glyph-proc
			include [refer-glyph 'greater'] AS_BASE ALSO_METRICS
			create-aliased-glyph 'greater.lig.shift0.mid'
			create-aliased-glyph 'greater.lig.shift0.anti'
			create-aliased-glyph 'greater.lig.shiftN0'
			create-aliased-glyph 'greater.lig.shiftN0.mid'
			create-forked-glyph 'greater.lig.shift0h'  : ArrowShiftTranslate   0.5
			create-forked-glyph 'greater.lig.shift1'   : ArrowShiftTranslate   1.0
			create-forked-glyph 'greater.lig.shift1h'  : ArrowShiftTranslate   1.5
			create-forked-glyph 'greater.lig.shift2'   : ArrowShiftTranslate   2.0
			create-forked-glyph 'greater.lig.shiftN0h' : ArrowShiftTranslate (-0.5)
			create-forked-glyph 'greater.lig.shiftN1'  : ArrowShiftTranslate (-1.0)
			create-forked-glyph 'greater.lig.shiftN1h' : ArrowShiftTranslate (-1.5)
			create-forked-glyph 'greater.lig.shiftN2'  : ArrowShiftTranslate (-2.0)

		create-glyph 'less.lig.shift0' : glyph-proc
			include [refer-glyph 'less'] AS_BASE ALSO_METRICS
			create-aliased-glyph 'less.lig.shift0.mid'
			create-aliased-glyph 'less.lig.shift0.anti'
			create-aliased-glyph 'less.lig.shiftN0'
			create-aliased-glyph 'less.lig.shiftN0.mid'
			create-forked-glyph 'less.lig.shift0h'  : ArrowShiftTranslate (-0.5)
			create-forked-glyph 'less.lig.shift1'   : ArrowShiftTranslate (-1.0)
			create-forked-glyph 'less.lig.shift1h'  : ArrowShiftTranslate (-1.5)
			create-forked-glyph 'less.lig.shift2'   : ArrowShiftTranslate (-2.0)
			create-forked-glyph 'less.lig.shiftN0h' : ArrowShiftTranslate   0.5
			create-forked-glyph 'less.lig.shiftN1'  : ArrowShiftTranslate   1.0
			create-forked-glyph 'less.lig.shiftN1h' : ArrowShiftTranslate   1.5
			create-forked-glyph 'less.lig.shiftN2'  : ArrowShiftTranslate   2.0

		define [ArrowHeadHole] : Rect (SymbolMid + dblArrowD - dblArrowSw) (SymbolMid - dblArrowD + dblArrowSw) (-Width) (2 * Width)

		create-glyph 'less.lig.hole' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				glyph-proc : include : refer-glyph "less"
				ArrowHeadHole

		create-glyph 'greater.lig.hole' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : difference
				glyph-proc : include : refer-glyph "greater"
				ArrowHeadHole

		create-glyph 'less.lig.hole.shiftN1' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : difference
				glyph-proc : include : refer-glyph "less.lig.shiftN1"
				ArrowHeadHole

		create-glyph 'greater.lig.hole.shiftN1' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : difference
				glyph-proc : include : refer-glyph "greater.lig.shiftN1"
				ArrowHeadHole

	do "Equal and Inequal"
		glyph-block-import Symbol-Math-Relation-Common : EqualHalfSpace
		glyph-block-import Symbol-Math-Relation-Equal : EqualShape EqualHole IdentShape IdentHole
		define joiningOverlap (-Width / 6)
		create-glyph 'equal.fc' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : difference
				EqualShape SB (Width - joiningOverlap)
				EqualHole Width

		create-glyph 'equal.cf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				EqualShape joiningOverlap RightSB
				EqualHole 0

		create-glyph 'equal.jf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				EqualShape (RightSB - Width + joiningOverlap) RightSB
				EqualHole 0

		create-glyph 'equal.cc' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : difference
				EqualShape joiningOverlap (Width - joiningOverlap)
				EqualHole 0
				EqualHole Width

		create-glyph 'equal.fc+cc' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : difference
				EqualShape (SB - Width) (Width - joiningOverlap)
				EqualHole 0
				EqualHole Width

		create-glyph 'equal.fc+cf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				EqualShape (SB - Width) RightSB
				EqualHole 0

		create-glyph 'equal.cc+cf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				EqualShape (joiningOverlap - Width) RightSB
				EqualHole (-Width)
				EqualHole 0

		create-glyph 'ident.fc' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : difference
				IdentShape SB (Width - joiningOverlap)
				IdentHole Width

		create-glyph 'ident.cf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				IdentShape joiningOverlap RightSB
				IdentHole 0

		create-glyph 'ident.jf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				IdentShape (RightSB - Width + joiningOverlap) RightSB
				IdentHole 0

		create-glyph 'ident.cc' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : difference
				IdentShape joiningOverlap (Width - joiningOverlap)
				IdentHole 0
				IdentHole Width

		create-glyph 'ident.fc+cc' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : difference
				IdentShape (SB - Width) (Width - joiningOverlap)
				IdentHole 0
				IdentHole Width

		create-glyph 'ident.fc+cf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				IdentShape (SB - Width) RightSB
				IdentHole 0

		create-glyph 'ident.cc+cf' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : difference
				IdentShape (joiningOverlap - Width) RightSB
				IdentHole (-Width)
				IdentHole 0

		glyph-block-import NotGlyphFn : notGlyph

		define [slash jk] : function [t b l r sw sh] : glyph-proc
			Joining.set currentGlyph jk
			include : dispiro
				widths.center OperatorStroke
				flat (sh + l) b
				curl (sh + r) t

		define [exSlash2 jk] : function [t b l r sw sh] : glyph-proc
			local dr : PeriodRadius / Stroke * OperatorStroke
			Joining.set currentGlyph jk
			include : union
				DotAt (sh + l + dr * (r - l) / (t - b)) (b + dr) dr
				intersection
					Rect (SymbolMid + t) [Math.min (b + dr * 3.5) (SymbolMid - EqualHalfSpace)] (-Width * 4) (Width * 4)
					dispiro
						widths.center OperatorStroke
						flat (sh + l) b
						curl (sh + r) t

		notGlyph.generic 'neq.1l' null 'sp1'
			shift -- (Width * 0.0)
			F -- [slash Joining.Classes.Right]
		notGlyph.generic 'neq.2l' null 'sp1'
			shift -- (Width * 0.5)
			F -- [slash Joining.Classes.Right]
		notGlyph.generic 'neq.3l' null 'sp1'
			shift -- (Width * 1.0)
			F -- [slash Joining.Classes.Right]
		notGlyph.generic 'neq.4l' null 'sp1'
			shift -- (Width * 1.5)
			F -- [slash Joining.Classes.Right]
		notGlyph.generic 'neq.1m' null 'sp1'
			shift -- (Width * 0.0)
			F -- [slash Joining.Classes.Mid]
		notGlyph.generic 'neq.2m' null 'sp1'
			shift -- (Width * 0.5)
			F -- [slash Joining.Classes.Mid]
		notGlyph.generic 'neq.3m' null 'sp1'
			shift -- (Width * 1.0)
			F -- [slash Joining.Classes.Mid]
		notGlyph.generic 'neq.4m' null 'sp1'
			shift -- (Width * 1.5)
			F -- [slash Joining.Classes.Mid]

		notGlyph.generic 'neq.1l-dotted' null 'sp1'
			shift -- (Width * 0.0)
			F -- [exSlash2 Joining.Classes.Right]
		notGlyph.generic 'neq.2l-dotted' null 'sp1'
			shift -- (Width * 0.5)
			F -- [exSlash2 Joining.Classes.Right]
		notGlyph.generic 'neq.3l-dotted' null 'sp1'
			shift -- (Width * 1.0)
			F -- [exSlash2 Joining.Classes.Right]
		notGlyph.generic 'neq.4l-dotted' null 'sp1'
			shift -- (Width * 1.5)
			F -- [exSlash2 Joining.Classes.Right]
		notGlyph.generic 'neq.1m-dotted' null 'sp1'
			shift -- (Width * 0.0)
			F -- [exSlash2 Joining.Classes.Mid]
		notGlyph.generic 'neq.2m-dotted' null 'sp1'
			shift -- (Width * 0.5)
			F -- [exSlash2 Joining.Classes.Mid]
		notGlyph.generic 'neq.3m-dotted' null 'sp1'
			shift -- (Width * 1.0)
			F -- [exSlash2 Joining.Classes.Mid]
		notGlyph.generic 'neq.4m-dotted' null 'sp1'
			shift -- (Width * 1.5)
			F -- [exSlash2 Joining.Classes.Mid]

	do "<| , |> and <>"
		glyph-block-import Symbol-Math-Relation-Inequality : LessShape GreaterShape

		local trigLeft : mix SB RightSB (1/6)
		local trigRight : Width * 1.5 - OperatorStroke * 1.5 * HVContrast
		local dHTriangle : LessSlope * (trigRight - trigLeft)

		define [TrigLeftShape shift] : LessShape (SymbolMid + dHTriangle) (SymbolMid - dHTriangle) (trigLeft + shift) (trigRight + shift)
		define [TrigRightShape shift] : GreaterShape (SymbolMid + dHTriangle) (SymbolMid - dHTriangle) (Width - trigRight + shift) (Width - trigLeft + shift)

		create-glyph 'less.lig.trig' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : TrigLeftShape 0

		create-glyph 'bar.lig.trig' : glyph-proc
			include : VBar Middle (SymbolMid + dHTriangle + OperatorStroke) (SymbolMid - dHTriangle - OperatorStroke) OperatorStroke

		create-glyph 'greater.lig.trig' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : TrigRightShape 0

		create-glyph 'less.lig.diamond' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : intersection
				TrigLeftShape 0
				union
					Rect ParenTop ParenBot 0 Width
					TrigRightShape Width

		create-glyph 'greater.lig.diamond' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : intersection
				TrigRightShape 0
				union
					Rect ParenTop ParenBot 0 Width
					TrigLeftShape (-Width)

	do "Chaining Plus"
		glyph-block-import Symbol-Math-Arith : PlusShape

		create-glyph 'plus.lig.fc'   : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : PlusShape SB (Width - O)
		create-glyph 'plus.lig.fc.s' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Right
			include : PlusShape SB (Width - O) SB
		create-glyph 'plus.lig.cc'   : glyph-proc
			Joining.set currentGlyph Joining.Classes.Mid
			include : PlusShape O (Width - O)
		create-glyph 'plus.lig.cf'   : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : PlusShape O RightSB
		create-glyph 'plus.lig.cf.s' : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : PlusShape O RightSB (-SB)
		create-glyph 'plus.lig.zf'   : glyph-proc
			Joining.set currentGlyph Joining.Classes.Left
			include : PlusShape (-SB + O) RightSB

	do 'Less / Greater as arrow'
		create-glyph 'greaterArrow' : composite-proc
			refer-glyph 'hyphen.lig.jp'
			refer-glyph 'greater'
