$$include '../../meta/macros.ptl'

import [Arcs Quadify ShapeConv] from "typo-geom"
import [mix linreg clamp fallback] from"../../support/utils.mjs"
import [DesignParameters] from"../../meta/aesthetics.mjs"
import [TieMark AnyDerivingCv ScheduleLeaningMark LeaningMark LeaningMarkSpacer] from"../../support/gr.mjs"
import [Box] from"../../support/geometry/box.mjs"

extern Set

glyph-module

glyph-block Mark-Doppelganger : if [not recursive] : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define [DeriveMarkChange gr gn akFrom akTo] : begin
		DeriveMeshT {gn} AnyDerivingCv : function [gns] : begin
			local srcGn gns.0
			local src : query-glyph srcGn
			local toGN : gr.amendName srcGn
			if [not : query-glyph toGN] : begin
				create-glyph toGN : glyph-proc
					include [refer-glyph srcGn] AS_BASE ALSO_METRICS
					set currentGlyph.markAnchors.(akTo) currentGlyph.markAnchors.(akFrom)
					currentGlyph.deleteMarkAnchor akFrom
					set currentGlyph.baseAnchors.(akTo) currentGlyph.baseAnchors.(akFrom)
					currentGlyph.deleteBaseAnchor akFrom
			gr.set src toGN
			return toGN


	local spacerGlyphSet : new Set
	define TieAnchorMap : list
		list 'above' 'tieAbove'
		list 'below' 'tieBelow'

	do : foreach { u gn g } [glyphStore.encodedEntries] : DeriveTieMarks gn g
	: where : [DeriveTieMarks gn g] : begin
		local selection null
		foreach { akFrom akTo } [items-of TieAnchorMap] : begin
			if (!selection && g.markAnchors.(akFrom)) : begin
				set selection { akFrom akTo }

		if selection : begin
			local { akFrom akTo } selection
			DeriveMarkChange TieMark gn akFrom akTo


	define LeaningAnchorMap : list
		list 'above' 'leaningAbove'
		list 'below' 'leaningBelow'

	do : foreach { u gn g } [glyphStore.encodedEntries] : DeriveLeaningMark gn g
	: where : [DeriveLeaningMark gn g] : begin
		local selection null
		foreach { akFrom akTo } [items-of LeaningAnchorMap] : begin
			if (!selection && g.markAnchors.(akFrom) && [ScheduleLeaningMark.get g]) : begin
				set selection { akFrom akTo }

		if selection : begin
			local { akFrom akTo } selection

			# Build the doppelganger
			DeriveMarkChange LeaningMark gn akFrom akTo

			# build spacer glyph
			local deltaX : Math.round : g.baseAnchors.(akFrom).x - g.markAnchors.(akFrom).x
			local deltaY : Math.round : g.baseAnchors.(akFrom).y - g.markAnchors.(akFrom).y
			local spacerGn "spacerGlyph{\(akTo)}{\(deltaX)}{\(deltaY)}"

			LeaningMarkSpacer.set g spacerGn

			if [not : spacerGlyphSet.has spacerGn] : begin
				spacerGlyphSet.add spacerGn
				create-glyph spacerGn : glyph-proc
					include g AS_BASE ALSO_METRICS
					currentGlyph.clearGeometry
