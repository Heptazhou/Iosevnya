$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"

glyph-module

glyph-block Letter-Cyrillic-De : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : ExtendBelowBaseAnchors
	glyph-block-import Letter-Greek-Lower-Epsilon : CyrZe EpsilonConfig

	local BottomExtension : 0.25 * Stroke - LongJut

	glyph-block-export CyrDeShape CyrDeItalicShapeT
	define [CyrDeShape top left right _sw _desc] : glyph-proc
		local descenderOverflow : if SLAB SideJut ((right - left) * 0.075)
		local xCutLeft left
		local xCutRight right
		local xTopLeft : mix xCutLeft xCutRight : StrokeWidthBlend 0.15 0.1
		local xTopRight : mix xCutLeft xCutRight : StrokeWidthBlend 0.95 0.96
		local swOuter : fallback _sw Stroke
		local swInner : swOuter * [AdviceStroke 2.75] / Stroke
		local desc : fallback _desc BottomExtension

		include : HBar.b xTopLeft xTopRight 0 swOuter
		include : VBar.r xTopRight 0 top swInner
		include : dispiro
			widths.lhs swInner
			flat xTopLeft top
			curl xTopLeft [mix 0 top 0.625]
			g4   xCutLeft  swOuter
		include : tagged 'footL' : union
			HBar.b (xCutLeft - descenderOverflow) xTopLeft 0 swOuter
			VBar.l (xCutLeft  - descenderOverflow) desc 0.1 swOuter
		include : tagged 'footR' : union
			HBar.b xTopRight (xCutRight + descenderOverflow) 0 swOuter
			VBar.r (xCutRight + descenderOverflow) desc 0.1 swOuter

		include : if SLAB
			then : dispiro
				widths.rhs swOuter
				flat (xTopLeft  - descenderOverflow) top
				curl (xTopRight + descenderOverflow) top
			else : HBar.t xTopLeft xTopRight top swOuter

		return : object desc xTopLeft xTopRight

	define [CyrSoftDeShape top left right _sw] : glyph-proc
		local descenderOverflow : if SLAB SideJut ((right - left) * 0.075)
		local sw : fallback _sw Stroke
		local xm : if SLAB
			[mix left right 0.625] + [HSwToV : 0.25 * sw]
			mix left right 0.75
		local xTopRight : mix left xm : StrokeWidthBlend 0.95 0.96

		include : CyrDeShape top left xm _sw
		if SLAB
		: then : begin
				include : HBar.t (xTopRight + descenderOverflow) right top sw
				include : VSerif.dr right top VJut (sw * VJutStroke / Stroke)
		: else : include : HBar.t xTopRight right top sw

	create-glyph 'cyrl/De' 0x414 : glyph-proc
		include : MarkSet.capital
		include : ExtendBelowBaseAnchors BottomExtension
		include : CyrDeShape CAP SB RightSB

	create-glyph 'cyrl/de.upright' : glyph-proc
		include : MarkSet.e
		include : ExtendBelowBaseAnchors BottomExtension
		include : CyrDeShape XH SB RightSB

	create-glyph 'cyrl/deLongLeg' 0x1C81 : glyph-proc
		include : MarkSet.p
		include : CyrDeShape XH SB RightSB Stroke Descender

	create-glyph 'cyrl/DeSoft' 0xA662 : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.capital
		include : ExtendBelowBaseAnchors BottomExtension
		include : CyrSoftDeShape CAP df.leftSB df.rightSB df.mvs

	create-glyph 'cyrl/deSoft' 0xA663 : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.e
		include : ExtendBelowBaseAnchors BottomExtension
		include : CyrSoftDeShape XH df.leftSB df.rightSB df.mvs


	foreach { suffix { st sb }} [Object.entries EpsilonConfig] : do
		define [DzzeDescendershape de] : begin
			local sr : [mix RightSB Width 0.5] - O * 2
			local sl : mix sr de.xTopRight 2
			local sw : AdviceStroke 2.5 ((sr - sl + 2 * SB) / Width)
			local shapeBot : de.desc - 0.5 * sw
			local hook : Hook * (0 - shapeBot) / CAP
			local ze : CyrZe 3 sb sw shapeBot sl sr 0.65 hook sw (0.5 * O) 0.5
			return : union [ze.Shape] [ze.AutoEndSerifL]

		create-glyph "cyrl/Dzze.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : ExtendBelowBaseAnchors BottomExtension
			local de : include : CyrDeShape CAP SB RightSB
			eject-contour 'footR'
			include : DzzeDescendershape de

		create-glyph "cyrl/dzze.upright.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : ExtendBelowBaseAnchors BottomExtension
			local de : include : CyrDeShape XH SB RightSB
			eject-contour 'footR'
			include : DzzeDescendershape de

	## Italic
	define [CyrDeItalicShapeT sink df _sw] : begin
		local left  df.leftSB
		local right df.rightSB
		local middle : mix left right 0.5
		local sw : fallback _sw df.mvs

		local ada : df.archDepthA SmallArchDepth
		local adb : df.archDepthB SmallArchDepth

		return : sink
			widths.lhs (sw * CThinB)
			flat (right - OX - [HSwToV sw] * (1 - CThinB)) ada
			curl (right - OX - [HSwToV sw] * (1 - CThinB)) (XH - adb)
			arcvh
			g4 (middle - CorrectionOMidX * df.mvs) (Ascender * 0.7 - O) [widths.lhs sw]
			archv
			flat (left + OX) (XH - ada)
			curl (left + OX) adb
			arcvh
			g4 (middle + CorrectionOMidX * sw) O
			archv
			flat (right - OX) ada
			curl (right - OX) (XH - adb)
			quadControls 0 0.8
			g4 (left + sw * 1.1) Ascender

	create-glyph 'cyrl/de.italic' : glyph-proc
		include : MarkSet.b
		include : CyrDeItalicShapeT dispiro [DivFrame 1]

	foreach { suffix { st sb }} [Object.entries EpsilonConfig] : do
		create-glyph "cyrl/dzze.italic.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.bp

			local dfLeft : df.slice 3 2 OX
			include : CyrDeItalicShapeT dispiro dfLeft

			local xZeLeft : dfLeft.leftSB + df.width - dfLeft.width + OX
			local xZeRight : dfLeft.rightSB + df.width - dfLeft.width - OX
			local ze : CyrZe 1 sb XH Descender xZeLeft xZeRight 0.65 Hook df.mvs
			include : union [ze.Shape] [ze.AutoEndSerifL]

	select-variant 'cyrl/Dzze' 0xA688 (follow -- 'cyrl/ze/topAttached')
	select-variant 'cyrl/dzze.upright' (follow -- 'cyrl/ze/topAttached')
	select-variant 'cyrl/dzze.italic' (follow -- 'cyrl/ze/topAttached')
