$$include '../../../meta/macros.ptl'

import [mix barmixL linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import '../../../support/point' as Point

glyph-module

glyph-block Letter-Cyrillic-Yeri : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Metrics : BowlXDepth
	glyph-block-import Letter-Shared-Shapes : ShoulderMidKnotLhsRev RightwardTailedBar

	glyph-block-export CyrlYeriUprightShape
	define [CyrlYeriUprightShape] : params [top [left SB] [right RightSB] [stroke Stroke] [jut Jut] [pBar 0.55]] : glyph-proc
		local bowl : top * pBar + HalfStroke
		local turnRadius : BowlXDepth bowl 0 left right stroke
		local sma : SmoothAOf Smooth (right - left + SB * 2)
		local smb : SmoothBOf Smooth (right - left + SB * 2)
		local fine : stroke * CThinB

		local yTurnBottomL : YSmoothMidL bowl 0 sma smb
		local yTurnBottomR : YSmoothMidR bowl 0 sma smb

		include : union
			dispiro
				widths.lhs stroke
				flat (left + Stroke * 0.2) 0 [heading Rightward]
				curl ([Math.max (left + stroke * TanSlope) (right - turnRadius)] + CorrectionOMidX * stroke) 0
				archv 8
				g4   (right - OX) yTurnBottomR
				arcvh 8
				flat ([Math.max (left + stroke * TanSlope) (right - turnRadius)] - CorrectionOMidX * stroke) bowl
				curl (left + Stroke * 0.2) bowl [heading Leftward]
			VBarLeft left 0 top stroke

		if SLAB : begin
			include : tagged 'serifYeriLB' : LeftwardBottomSerif left 0 (jut - stroke / 2 * HVContrast)
			include : tagged 'serifYeriLT' : CenterTopSerif (left + stroke / 2 * HVContrast) top jut

	glyph-block-export CyrlYeriRoundShape
	define [CyrlYeriRoundShape] : params [top [left SB] [right RightSB] [stroke Stroke] [jut Jut] [pBar 0.55]] : glyph-proc
		local bowl : top * pBar + HalfStroke
		local turnRadius : BowlXDepth bowl 0 left right stroke
		local sma : SmoothAOf Smooth (right - left + SB * 2)
		local smb : SmoothBOf Smooth (right - left + SB * 2)
		local fine : stroke * CThinB

		local yTurnBottomL : YSmoothMidL bowl 0 sma smb
		local yTurnBottomR : YSmoothMidR bowl 0 sma smb

		include : dispiro
			flat left top [widths.lhs.heading stroke Downward]
			curl left yTurnBottomL
			arcvh
			g4 ([mix left right 0.5] + CorrectionOMidX * stroke) O
			archv
			g4 (right - OX) yTurnBottomR
			arcvh
			flat ([mix left right 0.5] - CorrectionOMidX * stroke) bowl
			curl (left + Stroke * 0.2) bowl [heading Leftward]

		if SLAB : begin
			include : tagged 'serifYeriLT' : LeftwardTopSerif left top (jut - stroke / 2 * HVContrast)

	glyph-block-export CyrlYeriCursiveShape
	define [CyrlYeriCursiveShape] : params [top [left SB] [right RightSB] [stroke Stroke] [jut Jut] [pBar 0.55]] : glyph-proc
		local bowl : top * pBar + HalfStroke
		local turnRadius : BowlXDepth bowl 0 left right stroke
		local sma : SmoothAOf Smooth (right - left + SB * 2)
		local smb : SmoothBOf Smooth (right - left + SB * 2)
		local fine : stroke * CThinB

		local yTurnBottomL : YSmoothMidL bowl 0 sma smb
		local yTurnBottomR : YSmoothMidR bowl 0 sma smb

		include : dispiro
			flat left top [widths.lhs.heading stroke Downward]
			curl left yTurnBottomL
			arcvh
			g4 ([mix left right 0.5] + CorrectionOMidX * stroke) O
			archv
			g4 (right - OX) yTurnBottomR
			arcvh
			ShoulderMidKnotLhsRev [mix left right 0.5] bowl fine stroke (-1) (-1)
			archv
			g4.down.end (left + (stroke - fine) * HVContrast) yTurnBottomL [widths.lhs.heading fine Downward]

		if SLAB : begin
			include : tagged 'serifYeriLT' : LeftwardTopSerif left top (jut - stroke / 2 * HVContrast)

	define [RevCyrYeriShape] : params [top [left SB] [right RightSB] [stroke Stroke] [jut Jut] [pBar 0.55]] : glyph-proc
		local bowl : top * pBar + HalfStroke
		local turnRadius : bowl * 0.45
		local turnbottom : mix 0 bowl (SmoothB / (SmoothA + SmoothB))
		local trShrink [Math.pow ((right - left) / (RightSB - SB)) 0.5]
		include : dispiro
			widths.rhs stroke
			flat (right - Stroke * 0.2) 0 [heading Leftward]
			curl (left + turnRadius * trShrink + CorrectionOMidX * stroke) 0
			archv
			g4   (left + O) turnbottom
			arcvh
			flat (left + turnRadius * trShrink - CorrectionOMidX * stroke) bowl
			curl (right - Stroke * 0.2) bowl [heading Rightward]
		include : VBarRight right 0 top stroke
		if SLAB : begin
			include : tagged 'serifYeriRB'
				RightwardBottomSerif right 0 (jut - stroke / 2 * HVContrast)
			include : tagged 'serifYeriRT'
				CenterTopSerif (right - stroke / 2 * HVContrast) top jut


	define [CyrYerShape Yeri top] : glyph-proc
		local left : if SLAB ([mix SB RightSB 0.35] - MVertStroke / 2 * HVContrast) [mix SB RightSB 0.2]
		local barleft : mix 0 SB [if SLAB 0.25 0.375]
		include : Yeri top (left -- left) (right -- RightSB - O * 2) (stroke -- [AdviceStroke 2.5])
		include : HBarTop barleft (Stroke * 0.1 + left) top
		if SLAB : begin
			include : DownwardLeftSerif barleft top VJut (MVertStroke / HVContrast)

	define [CyrYeryShape Yeri df top fTail] : glyph-proc
		local jut : Math.min Jut : [Math.pow (df.mvs / Stroke) 0.5] * Jut
		include : Yeri
			top -- top
			left -- df.leftSB
			right -- [mix (df.rightSB - df.mvs * HVContrast) (Middle + df.mvs / 2 * HVContrast) (0.75 / df.div)]
			stroke -- df.mvs
			jut -- jut
		include : if fTail
			RightwardTailedBar df.rightSB 0 top df.mvs
			VBarRight df.rightSB 0 top df.mvs
		if SLAB : begin
			include : tagged 'serifRT' : if (Yeri !== CyrlYeriUprightShape)
				then : glyph-proc
				else : CenterTopSerif (df.rightSB - df.mvs / 2 * HVContrast) top jut
			if (!fTail) : include : tagged 'serifRB' : if (Yeri !== CyrlYeriUprightShape)
				then : RightwardBottomSerif df.rightSB 0 (jut - 0.5 * df.mvs * HVContrast)
				else : CenterBottomSerif (df.rightSB - df.mvs / 2 * HVContrast) 0 jut

	define [ZhuangToneSixShape Yeri top] : glyph-proc
		include : Yeri top
		eject-contour 'serifYeriLT'
		local s : Math.max Stroke (XH * 0.1)
		include : spiro-outline
			corner  SB top
			corner (SB - O) top
			corner (SB - O) (top - s * 2)
			corner  SB (top - s * 2)
			corner (SB - s) (top - s)

	define YerConfig : object
		corner        { CyrlYeriUprightShape false }
		round         { CyrlYeriRoundShape   false }
		cursive       { CyrlYeriCursiveShape false }
		cornerTailed  { CyrlYeriUprightShape true  }
		roundTailed   { CyrlYeriRoundShape   true  }
		cursiveTailed { CyrlYeriCursiveShape true  }

	define [YeriOverlayBar top] : begin
		local stroke : AdviceStroke2 2 3 top
		return : HOverlayBar
			mix SB 0 0.7
			mix SB RightSB 0.5
			mix (top * 0.52 + stroke / 2) top 0.5
			Math.min ((top - Stroke * 3) / 3) OverlayStroke

	foreach { suffix { Yeri fTail } } [Object.entries YerConfig] : do
		create-glyph "cyrl/Yeri.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : Yeri CAP
		create-glyph "cyrl/yeri.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Yeri XH
		create-glyph "cyrl/YeriBar.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : Yeri CAP
			include : YeriOverlayBar CAP
		create-glyph "cyrl/yeriBar.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Yeri XH
			include : YeriOverlayBar XH
		create-glyph "cyrl/Yer.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : CyrYerShape Yeri CAP
		create-glyph "cyrl/yer.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : CyrYerShape Yeri XH
		create-glyph "cyrl/Yery.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital
			include : CyrYeryShape Yeri df CAP fTail
		create-glyph "cyrl/yery.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e
			include : CyrYeryShape Yeri df XH fTail

		create-glyph "ZhuangToneSix.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : ZhuangToneSixShape Yeri CAP
		create-glyph "zhuangToneSix.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : ZhuangToneSixShape Yeri XH


	select-variant 'cyrl/Yer'  0x42A
	select-variant 'cyrl/yer'  0x44A
	select-variant 'cyrl/Yery' 0x42B
	select-variant 'cyrl/yery' 0x44B
	select-variant 'cyrl/Yeri' 0x42C
	select-variant 'cyrl/yeri' 0x44C
	select-variant 'cyrl/YeriBar' 0x48C
	select-variant 'cyrl/yeriBar' 0x48D

	select-variant 'ZhuangToneSix' 0x184 (follow -- 'cyrl/Yer')
	select-variant 'zhuangToneSix' 0x185 (follow -- 'cyrl/yer')

	create-glyph 'cyrl/Be' 0x411 : glyph-proc
		include : MarkSet.capital
		include : CyrlYeriUprightShape CAP
		include : HBar SB [mix SB RightSB 0.9] (CAP - HalfStroke)
		if SLAB : begin
			include : DownwardRightSerif [mix SB RightSB 0.9] CAP VJut

	alias 'latinBe' 0x182 'cyrl/Be'

	create-glyph 'latinDe' 0x18B : glyph-proc
		include : MarkSet.capital
		include : RevCyrYeriShape CAP
		include : HBarTop [mix RightSB SB 0.9] (RightSB + O) CAP
		if SLAB : begin
			include : DownwardLeftSerif [mix RightSB SB 0.9] CAP VJut
