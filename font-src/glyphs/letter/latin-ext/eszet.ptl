$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Eszet : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : FlatHookDepth

	define NO-TAIL    0
	define DESCENDING 1
	define TAILED     2

	local ymiddle : [mix 0 CAP 0.5] - HalfStroke
	local ymiddleCap : [mix 0 CAP 0.54] - HalfStroke
	local xmiddle : Math.max (SB + Stroke * HVContrast * 1.2) (RightSB - ymiddle / 2 - Stroke * 0.75)
	local xmiddleBot : Math.max (SB + Stroke * HVContrast * 1.2) (RightSB - ymiddle / 2 - Stroke * 0.75)
	local xfinal : Math.min
		xmiddle - 1 - Stroke * TanSlope
		Math.max (SB + Stroke * 2) [mix SB RightSB (1 / 4)]

	define [TraditionalBody fFlathook slab tail] : glyph-proc
		include : MarkSet.b
		local l : SB * 1
		local xHook : [mix SB RightSB 0.75] + HalfStroke * HVContrast
		local hd : FlatHookDepth [DivFrame 1]
		if fFlathook
		: then : include : dispiro
			flat xHook CAP [widths.lhs]
			curl (l + hd.x) CAP
			archv
			flat l (CAP - hd.y)
			curl l 0 [heading Downward]
		: else : include : dispiro
			widths.lhs
			g4 xHook (CAP - Hook)
			hookstart (CAP - O)
			flat l XH
			curl l 0 [heading Downward]
		local t : mix 0 CAP 0.7
		local tm : [mix Descender t 0.625] + HalfStroke
		local tl : [mix l RightSB 0.35] + HalfStroke * HVContrast
		include : HBarTop (l + 1) (RightSB - HalfStroke * 1.2 - OX) t
		include : dispiro
			widths.rhs
			flat tl tm [heading Rightward]
			curl (tl + 1) tm [heading Rightward]
			g2 (RightSB - OX * 1.5) [mix Descender tm 0.70]
			g2 (RightSB - OX * 1.5) [mix Descender tm 0.67]
			alsoThru 0.5 0.75
			g4 [mix SB RightSB 0.35] Descender
		include : dispiro
			widths.center (Stroke * 1.1)
			corner tl (tm - Stroke) [heading Upward]
			corner (RightSB - HalfStroke * 1.2 - OX) t [heading Upward]

		if slab : include : LeftwardBottomSerif SB 0 SideJut
		include : match tail
			[Just DESCENDING] : VBarLeft l Descender 0
			[Just TAILED] : VerticalHook (l + HalfStroke * HVContrast) 0 (-Hook * 1.2) Hook
			__ : glyph-proc


	define [SulzbacherBody slab tail] : glyph-proc
		include : MarkSet.b
		include : dispiro
			widths.rhs
			flat SB 0 [heading Upward]
			curl SB XH
			arcvh
			g4 (Middle + O) (CAP - O)
			archv
			g4 (RightSB + O * 2) [mix CAP ymiddle 0.47]
			g4.left.end xmiddle ymiddle [heading Leftward]
		include : dispiro
			widths.rhs
			g4.right.start xmiddle (ymiddle + Stroke) [heading Rightward]
			archv
			g4   (RightSB - O) [mix 0 (ymiddle + Stroke) 0.5]
			arcvh
			flat xmiddleBot 0
			curl xfinal 0 [heading Leftward]

		if slab : include : LeftwardBottomSerif SB 0 SideJut
		include : match tail
			[Just DESCENDING] : VBarLeft SB Descender 0
			[Just TAILED] : VerticalHook (SB + HalfStroke * HVContrast) 0 (-Hook * 1.2) Hook
			__ : glyph-proc


	define [LongSSLigBody slab tail] : glyph-proc
		include : MarkSet.b

		define swOuter : AdviceStroke2 2 3 CAP
		define strokeCoeff : StrokeWidthBlend 0 1 swInner
		define sEndX : Math.max
			SB + swOuter * HVContrast + (RightSB - SB - Stroke) * 0.1
			mix SB RightSB 0.3
		define swInner : AdviceStroke2 2.5 3 CAP
		define ess: swInner * Ess / Stroke
		define sTurnX : Math.max sEndX [mix SB RightSB 0.3]
		define sBotX : Math.max (sEndX + 1) [mix sEndX RightSB 0.30]
		define sTopX : sTurnX + (RightSB - sBotX)

		define sTopHookX : sTopX + 0.5 * swInner * HVContrast
		define smoothATop : SmoothAOf (Smooth * (sTopHookX - SB - swInner * 0.5) / (RightSB - SB)) (Width - (RightSB - sTopHookX))
		define smoothBTop : SmoothBOf (Smooth * (sTopHookX - SB - swInner * 0.5) / (RightSB - SB)) (Width - (RightSB - sTopHookX))
		define innerSmoothB : 1 * smoothBTop # SmoothBOf (0.5 * swInner + (widthInner / Width) * [adviceSSmooth XH (-1) swInner]) widthInner


		include : dispiro
			widths.rhs swOuter
			flat SB 0 [heading Upward]
			curl SB (CAP - smoothATop)
			arcvh
			g4 ([mix SB sTopHookX 0.52] - CorrectionOMidX * swOuter) (CAP - O) [widths.rhs : mix swOuter swInner 0.5]
			archv
			g4.down.mid sTopHookX (CAP - smoothBTop + TanSlope * swInner) [widths.rhs.heading swInner Downward]
			alsoThru.g2 0.5 0.50 [widths.center swInner]
			g4 sTurnX [mix innerSmoothB (CAP - smoothBTop) 0.5] [widths.lhs.heading swInner Downward]
			alsoThru.g2 0.5 0.50 [widths.center swInner]
			g4 (RightSB - OX) (innerSmoothB - 2 * TanSlope * swInner) [widths.rhs.heading swInner Downward]
			arcvh
			flat ([Math.max (sEndX + 1) : Math.min (RightSB - innerSmoothB) [mix sEndX RightSB 0.375]] + CorrectionOMidX * swInner / 2 + TanSlope * swInner ) 0
			curl sEndX 0 [heading Leftward]

		if slab : include : LeftwardBottomSerif SB 0 SideJut
		include : match tail
			[Just DESCENDING] : VBarLeft SB Descender 0
			[Just TAILED] : VerticalHook (SB + 0.5 * swOuter * HVContrast) 0 (-Hook * 1.2) Hook
			__ : glyph-proc


	create-glyph 'eszet.traditional'                   : TraditionalBody  false SLAB  NO-TAIL
	create-glyph 'eszet.traditionalDescending'         : TraditionalBody  false false DESCENDING
	create-glyph 'eszet.traditionalTailed'             : TraditionalBody  false false TAILED
	create-glyph 'eszet.traditionalFlatHook'           : TraditionalBody  true  SLAB  NO-TAIL
	create-glyph 'eszet.traditionalFlatHookDescending' : TraditionalBody  true  false DESCENDING
	create-glyph 'eszet.traditionalFlatHookTailed'     : TraditionalBody  true  false TAILED
	create-glyph 'eszet.sulzbacher'                    : SulzbacherBody         SLAB  NO-TAIL
	create-glyph 'eszet.sulzbacherDescending'          : SulzbacherBody         false DESCENDING
	create-glyph 'eszet.sulzbacherTailed'              : SulzbacherBody         false TAILED
	create-glyph 'eszet.longSSLig'                     : LongSSLigBody          SLAB  NO-TAIL
	create-glyph 'eszet.longSSLigDescending'           : LongSSLigBody          false DESCENDING
	create-glyph 'eszet.longSSLigTailed'               : LongSSLigBody          false TAILED

	select-variant 'eszet' 0xDF

	create-glyph 'Eszet' 0x1E9E : glyph-proc
		include : MarkSet.capital
		local rightTopX : RightSB + O * 4
		include : dispiro
			widths.lhs
			flat rightTopX CAP
			curl Middle CAP
			archv
			flat SB XH
			curl SB 0 [heading Downward]
		include : dispiro
			widths.rhs
			g4   xmiddle (ymiddleCap + Stroke) [heading Rightward]
			archv
			g4   (RightSB - O * 2) [mix 0 (ymiddleCap + Stroke) 0.5]
			arcvh
			flat xmiddleBot 0
			curl xfinal 0 [heading Leftward]
		include : dispiro
			widths.rhs
			g4 rightTopX (CAP - Stroke)
			g4 xmiddle (ymiddleCap + Stroke) [widths Stroke 0]
		if SLAB : include : LeftwardBottomSerif SB 0 SideJut

