$$include '../../../meta/macros.ptl'

import [mix barmixL linreg clamp fallback] from '../../../support/utils'
import [MathSansSerif] from '../../../support/gr'
import [DesignParameters] from '../../../meta/aesthetics'

glyph-module

glyph-block Letter-Greek-Upper-Gamma: begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : nShoulder CyrDescender CyrHookDescender
	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	glyph-block-import Letter-Latin-Upper-F : xMidBarShrink

	define SLAB-NONE 0
	define SLAB-TR   1
	define SLAB-ALL  2

	define GammaBarLeft (SB * 1.5)
	define [GammaShape top slabType] : glyph-proc
		include : VBarLeft GammaBarLeft 0 top
		include : HBarTop (GammaBarLeft - O) (RightSB - OX) top
		match slabType
			[Just SLAB-ALL] : begin
				include : LeftwardTopSerif GammaBarLeft top SideJut
				include : LeftwardBottomSerif (GammaBarLeft + HVContrast * HalfStroke) 0 Jut
				include : RightwardBottomSerif (GammaBarLeft + HVContrast * HalfStroke) 0 MidJutSide
				include : tagged 'serifRT' : DownwardRightSerif (RightSB - OX) top VJut
			[Just SLAB-TR] : begin
				include : tagged 'serifRT' : DownwardRightSerif (RightSB - OX) top VJut

	define GammaConfig : object
		serifless       { SLAB-NONE  false }
		topRightSerifed { SLAB-TR    false }
		serifed         { SLAB-ALL   true  }

	define CyrlGeMarks : object
		capital : MarkSet.OfZone { .top (CAP + AccentStackOffset / 2) .bot 0 }
		e       : MarkSet.OfZone { .top (XH + AccentStackOffset / 2) .bot 0 }

	foreach { suffix { slabType doSB } } [Object.entries GammaConfig] : do
		create-glyph "grek/Gamma.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : GammaShape CAP slabType

		create-glyph "grek/Digamma.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : GammaShape CAP slabType

			local yBar : CAP * DesignParameters.upperEBarPos
			include : HBar GammaBarLeft (RightSB - [xMidBarShrink slabType]) yBar
			if slabType : include : tagged 'serifRM'
				DownwardRightSerif (RightSB - [xMidBarShrink slabType]) (yBar + HalfStroke) [mix Stroke VJut 0.5]

		create-glyph "cyrl/GheDescender.\(suffix)" : glyph-proc
			include [refer-glyph "grek/Gamma.\(suffix)"] AS_BASE ALSO_METRICS
			include : CyrDescender (GammaBarLeft + Stroke * HVContrast) (overflow -- [if doSB (MidJutCenter - HalfStroke * HVContrast)])

		create-glyph "cyrl/GheDHook.\(suffix)" : glyph-proc
			include [refer-glyph "grek/Gamma.\(suffix)"] AS_BASE ALSO_METRICS
			include : CyrHookDescender (GammaBarLeft + Stroke * HVContrast) (overflow -- (MidJutCenter - HalfStroke * HVContrast))

		create-glyph "cyrl/ghe.upright.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : GammaShape XH slabType

		create-glyph "cyrl/gheDescender.upright.\(suffix)" : glyph-proc
			include [refer-glyph "cyrl/ghe.upright.\(suffix)"] AS_BASE ALSO_METRICS
			include : CyrDescender (GammaBarLeft + Stroke * HVContrast) (overflow -- [if doSB (MidJutCenter - HalfStroke * HVContrast)])

		create-glyph "cyrl/gheDHook.upright.\(suffix)" : glyph-proc
			include [refer-glyph "cyrl/ghe.upright.\(suffix)"] AS_BASE ALSO_METRICS
			include : CyrHookDescender (GammaBarLeft + Stroke * HVContrast) (overflow -- (MidJutCenter - HalfStroke * HVContrast))

		create-glyph "cyrl/Ge.\(suffix)" : glyph-proc
			include : CyrlGeMarks.capital
			include : GammaShape CAP slabType
			eject-contour 'serifRT'
			include : VBarRight (RightSB - OX) CAP (CAP + AccentStackOffset)

		create-glyph "cyrl/ge.upright.\(suffix)" : glyph-proc
			include : CyrlGeMarks.e
			include : GammaShape XH slabType
			eject-contour 'serifRT'
			include : VBarRight (RightSB - OX) XH (XH + AccentStackOffset)

	select-variant 'grek/Gamma' 0x393
	link-reduced-variant 'grek/Gamma/sansSerif' 'grek/Gamma' MathSansSerif
	select-variant 'cyrl/Ghe' 0x413 (shapeFrom -- 'grek/Gamma')
	select-variant 'cyrl/GheDescender' 0x4F6 (follow -- 'cyrl/Ghe')
	select-variant 'cyrl/GheDHook' (follow -- 'cyrl/Ghe')
	select-variant 'cyrl/Ge' 0x490

	select-variant 'cyrl/ghe.upright'
	select-variant 'cyrl/gheDescender.upright' (follow -- 'cyrl/ghe.upright')
	select-variant 'cyrl/gheDHook.upright' (follow -- 'cyrl/ghe.upright')
	alias 'grek/smcpGamma' 0x1D26 'cyrl/ghe.upright'
	select-variant 'cyrl/ge.upright'

	select-variant 'grek/Digamma' 0x3DC (follow -- 'grek/Gamma')

	derive-glyphs 'cyrl/GheHook' 0x494 'cyrl/Ghe' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : nShoulder
			left   -- (GammaBarLeft + Stroke * HVContrast)
			right  -- RightSB
			top    -- CAP * HBarPos + Stroke / 4
			bottom -- 0
			ada    -- ArchDepthA
			adb    -- ArchDepthB
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	derive-glyphs 'cyrl/gheHook' 0x495 'cyrl/ghe.upright' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : nShoulder
			left   -- (GammaBarLeft + Stroke * HVContrast)
			right  -- RightSB
			top    -- XH * HBarPos + Stroke / 4
			bottom -- 0
			ada    -- ArchDepthA * [Math.pow HBarPos 0.3]
			adb    -- ArchDepthB * [Math.pow HBarPos 0.3]
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	define [GhaynOverlayBar top] : HOverlayBar
		GammaBarLeft - GammaBarLeft * 0.75
		GammaBarLeft + Stroke * HVContrast + SB * 0.625 + 0.125 * (RightSB - SB)
		top * (1 - OverlayPos)

	derive-composites 'cyrl/Ghayn' 0x492 'cyrl/Ghe' [GhaynOverlayBar CAP]
	derive-composites 'cyrl/ghayn.upright' null 'cyrl/ghe.upright' [GhaynOverlayBar XH]

	derive-composites 'cyrl/GheStrokeHook' 0x4FA 'cyrl/GheDHook' [GhaynOverlayBar CAP]
	derive-composites 'cyrl/gheStrokeHook.upright' null 'cyrl/gheDHook.upright' [GhaynOverlayBar XH]

	create-glyph 'mathbb/grek/Gamma' 0x213E : glyph-proc
		include : MarkSet.capital
		include : BBBarLeft GammaBarLeft 0 CAP
		include : HBarTop GammaBarLeft RightSB CAP BBS

	create-glyph 'digamma' 0x3DD : glyph-proc
		include : MarkSet.p
		include : GammaShape (XH - Descender) SLAB-NONE
		include : ApparentTranslate 0 Descender
		local yBar : mix Descender XH DesignParameters.upperEBarPos
		include : HBar GammaBarLeft (RightSB - [xMidBarShrink SLAB]) yBar
