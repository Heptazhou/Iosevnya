$$include '../../../meta/macros.ptl'

extern isFinite

import [mix linreg clamp fallback SuffixCfg] from"../../../support/utils.mjs"

glyph-module

glyph-block Letter-Greek-Lower-Epsilon : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : ExtendBelowBaseAnchors
	glyph-block-import Letter-Shared : CreateAccentedComposition
	glyph-block-import Letter-Shared-Shapes : SerifedArcStart SerifedArcEnd SerifFrame
	glyph-block-import Letter-Shared-Shapes : InwardSlabArcStart InwardSlabArcEnd
	glyph-block-import Letter-Shared-Shapes : ArcStartSerif ArcEndSerif
	glyph-block-import Letter-Shared-Shapes : OBarLeft OBarRight
	glyph-block-import Letter-Shared-Shapes : DToothlessRise RetroflexHook CyrDescender UpwardHookShape

	define SLAB-NONE       0
	define SLAB-CLASSICAL  1
	define SLAB-INWARD     2
	define FLAT-CONNECTION 3
	define OPEN-HALF       4
	define OPEN-VERTICAL   5
	define CLOSED-CIRCLE   6
	define CLOSED-ROUND    7
	define CLOSED-STEM     8

	define StdBlend 0.65
	define VolBlend 0.52

	define [SmallEpsilon] : with-params [
			slabTop slabBot top bot blend hook
			[ada2 SmallArchDepthA] [adb2 SmallArchDepthB]
		] : namespace
		export : define [Dim] : begin
			local stroke : AdviceStroke2 2 3 (top - bot)
			local midx : mix SB RightSB blend
			local midy : mix bot top OverlayPos
			local topHeight : top - bot
			local midyHeight : midy - bot
			local ada : topHeight - [mix (midyHeight + stroke / 2) (topHeight - O - stroke) (ArchDepthB / (ArchDepthA + ArchDepthB))] - [HSwToV TanSlope] * stroke
			local adb : [mix (stroke + O) (midyHeight - stroke / 2) (ArchDepthB / (ArchDepthA + ArchDepthB))] + [HSwToV TanSlope] * stroke
			local fine : stroke * CThin
			local stemFine : stroke * (ShoulderFine / Stroke)
			return : object stroke midx midy ada adb fine stemFine

		export : define [UpperShape] : begin
			define [object stroke midx midy ada adb fine stemFine] : Dim
			return : dispiro
				match slabTop
					[Just SLAB-CLASSICAL] : SerifedArcStart.RtlLhs RightSB Middle top stroke hook
					[Just SLAB-INWARD] : InwardSlabArcStart.RtlLhs RightSB Middle top stroke hook
					[Just OPEN-VERTICAL] : straight.down.start SB top [widths.lhs.heading stroke Downward]
					([Just CLOSED-CIRCLE] || [Just CLOSED-ROUND]) : list
						flat (RightSB - [if (slabTop === CLOSED-CIRCLE) OX 0]) midy [widths.lhs stroke]
						curl (RightSB - [if (slabTop === CLOSED-CIRCLE) OX 0]) (top - adb2)
						arcvh
						g4 (Middle - CorrectionOMidX * stroke) (top - O)
						archv
					[Just CLOSED-STEM] : OBarRight.arcStart top SB RightSB stroke stemFine ada2 adb2 midy
					__ : list [g4 (RightSB + O) (top - hook) [widths.lhs]] [hookstart (top - O)]
				g4 SB [YSmoothMidL top (midy - stroke / 2)]
				arcvh
				flat Middle (midy - (fine - stroke / 2)) [widths.heading fine 0 Rightward]
				curl midx (midy - (fine - stroke / 2)) [heading Rightward]

		export : define [LowerShape] : begin
			define [object stroke midx midy ada adb fine stemFine] : Dim
			return : dispiro
				flat midx (midy + (fine - stroke / 2)) [widths.heading fine 0 Leftward]
				curl Middle (midy + (fine - stroke / 2)) [heading Leftward]
				archv
				g4 (SB + OX * 2) [YSmoothMidL (midy + stroke / 2) bot] [widths.lhs stroke]
				match slabBot
					[Just SLAB-CLASSICAL] : SerifedArcEnd.LtrLhs RightSB Middle bot stroke hook
					[Just SLAB-INWARD] : InwardSlabArcEnd.LtrLhs RightSB Middle bot stroke hook
					[Just OPEN-VERTICAL] : straight.down.end (SB + OX * 2) bot [heading Downward]
					([Just CLOSED-CIRCLE] || [Just CLOSED-ROUND]) : list
						arcvh
						g4 (Middle + CorrectionOMidX * stroke) (bot + O)
						archv
						flat (RightSB - [if (slabBot === CLOSED-CIRCLE) OX 0]) (bot + adb2)
						curl (RightSB - [if (slabBot === CLOSED-CIRCLE) OX 0]) midy
					[Just CLOSED-STEM] : OBarRight.arcEnd bot SB RightSB stroke stemFine ada2 adb2 midy
					__ : list [hookend (bot + O)] [g4 (RightSB - O) (bot + hook)]

		export : define [Shape] : union [UpperShape] [LowerShape]

		export : define [AutoStartSerifR] : begin
			define [object stroke] : Dim
			return : match slabTop
				[Just SLAB-CLASSICAL] : ArcStartSerif.R       RightSB top stroke hook
				[Just SLAB-INWARD]    : ArcStartSerif.InwardR RightSB top stroke hook
				__ : glyph-proc

		export : define [AutoEndSerifR] : begin
			define [object stroke] : Dim
			return : match slabBot
				[Just SLAB-CLASSICAL] : ArcEndSerif.R         RightSB bot stroke hook
				[Just SLAB-INWARD]    : ArcEndSerif.InwardR   RightSB bot stroke hook
				__ : glyph-proc

	glyph-block-export CyrZe
	define [CyrZe] : with-params [
		slabTop slabBot top bot left right blend hook _stroke
		[xo OX] [op OverlayPos] [ada2 SmallArchDepthA] [adb2 SmallArchDepthB]
		] : namespace
		export : define [Dim] : begin
			local stroke : fallback _stroke : AdviceStroke2 2 3 (top - bot)
			local midx : mix right left blend
			local midy : mix bot top op
			local topHeight : top - bot
			local midyHeight : midy - bot
			local adb : topHeight - [mix (midyHeight + stroke / 2) (topHeight - O - stroke) (ArchDepthA / (ArchDepthA + ArchDepthB))] + [HSwToV TanSlope] * stroke
			local ada : [mix (stroke + O) (midyHeight - stroke / 2) (ArchDepthA / (ArchDepthA + ArchDepthB))] - [HSwToV TanSlope] * stroke
			local fine : stroke * CThin
			local stemFine : stroke * (ShoulderFine / Stroke)
			return : object stroke midx midy ada adb fine stemFine

		define [UpperShapeT sink] : begin
			define [object stroke midx midy ada adb fine stemFine] : Dim
			local middle : (left + right) / 2
			return : sink
				match slabTop
					[Just SLAB-CLASSICAL] : SerifedArcStart.LtrRhs left middle top stroke hook
					[Just SLAB-INWARD] : InwardSlabArcStart.LtrRhs left middle top stroke hook
					[Just FLAT-CONNECTION] : list
						flat (left - xo) top [widths.rhs.heading stroke Rightward]
						curl (middle - CorrectionOMidX * stroke) top [heading Rightward]
					[Just OPEN-VERTICAL] : straight.down.start right top [widths.rhs.heading stroke Downward]
					([Just CLOSED-CIRCLE] || [Just CLOSED-ROUND]) : list
						flat (left + [if (slabTop === CLOSED-CIRCLE) xo 0]) midy [widths.rhs stroke]
						curl (left + [if (slabTop === CLOSED-CIRCLE) xo 0]) (top - ada2)
						arcvh
						g4 (middle - CorrectionOMidX * stroke) (top - O)
						archv
					[Just CLOSED-STEM] : OBarLeft.arcStart top left right stroke stemFine ada2 adb2 midy
					__ : list [g4 (left - xo) (top - hook) : widths.rhs stroke] [hookstart (top - O)]
				g4 right [YSmoothMidR top (midy - stroke / 2)]
				arcvh
				flat middle (midy - (fine - stroke / 2)) [widths.heading 0 fine Leftward]
				curl midx (midy - (fine - stroke / 2)) [heading Leftward]

		define [LowerShapeT sink] : begin
			define [object stroke midx midy ada adb fine stemFine] : Dim
			local middle : (left + right) / 2
			return : sink
				flat midx (midy + (fine - stroke / 2)) [widths.heading 0 fine Rightward]
				curl middle (midy + (fine - stroke / 2)) [heading Rightward]
				archv
				if (slabBot === OPEN-HALF)
					g4.down.end (right - xo * 2) [YSmoothMidR (midy + stroke / 2) bot] [widths.rhs.heading stroke Downward]
					g4 (right - xo * 2) [YSmoothMidR (midy + stroke / 2) bot] [widths.rhs stroke]
				match slabBot
					[Just SLAB-CLASSICAL] : SerifedArcEnd.RtlRhs left middle bot stroke hook
					[Just SLAB-INWARD] : InwardSlabArcEnd.RtlRhs left middle bot stroke hook
					[Just OPEN-HALF] : list
					[Just OPEN-VERTICAL] : straight.down.end (right - xo * 2) bot [heading Downward]
					([Just CLOSED-CIRCLE] || [Just CLOSED-ROUND]) : list
						arcvh
						g4 (middle + CorrectionOMidX * stroke) (bot + O)
						archv
						flat (left + [if (slabBot === CLOSED-CIRCLE) xo 0]) (bot + adb2)
						curl (left + [if (slabBot === CLOSED-CIRCLE) xo 0]) midy
					[Just CLOSED-STEM] : OBarLeft.arcEnd bot left right stroke stemFine ada2 adb2 midy
					__ : list [hookend (bot + O) (sw -- stroke)] [g4 (left + xo) (bot + hook)]

		export : define [UpperShape] : UpperShapeT dispiro

		export : define [LowerShape] : LowerShapeT dispiro

		define [LowerShapeTailed] : begin
			define [object stroke midx midy ada adb fine] : Dim
			local middle : (left + right) / 2
			return : dispiro
				flat (TanSlope * Stroke + [Math.max (left + (Stroke - [mix Descender Stroke 0.5]) * 1.1 + 1) middle]) Descender [widths.rhs]
				curl (TanSlope * Stroke + left + (Stroke - [mix Descender Stroke 0.5]) * 1.1) Descender
				archv
				g4.up.mid (left + [HSwToV HalfStroke]) [mix Descender Stroke 0.5] [widths.center.heading Stroke Upward]
				arcvh
				g4 (middle + CorrectionOMidS) 0 [widths.lhs]
				archv
				g4 (right - OX * 2) (bot + ada)
				arcvh
				flat middle (midy + (fine - stroke / 2)) [widths.heading fine 0 Leftward]
				curl midx (midy + (fine - stroke / 2)) [heading Leftward]

		export : define [Shape] : union
			UpperShapeT dispiro
			LowerShapeT dispiro

		export : define [ShapeMask] : union
			UpperShapeT spiro-outline
			LowerShapeT spiro-outline

		export : define [KsiBaseShape] : union
			UpperShapeT dispiro
			LowerShapeTailed

		export : define [AutoStartSerifL] : begin
			define [object stroke] : Dim
			return : match slabTop
				[Just SLAB-CLASSICAL] : ArcStartSerif.L       left top stroke hook
				[Just SLAB-INWARD]    : ArcStartSerif.InwardL left top stroke hook
				__ : glyph-proc

		export : define [AutoEndSerifL] : begin
			define [object stroke] : Dim
			return : match slabBot
				[Just SLAB-CLASSICAL] : ArcEndSerif.L         left bot stroke hook
				[Just SLAB-INWARD]    : ArcEndSerif.InwardL   left bot stroke hook
				__ : glyph-proc

	glyph-block-export EpsilonConfig
	define EpsilonConfig : object
		serifless               { SLAB-NONE      SLAB-NONE      }
		unilateralSerifed       { SLAB-CLASSICAL SLAB-NONE      }
		bilateralSerifed        { SLAB-CLASSICAL SLAB-CLASSICAL }
		unilateralInwardSerifed { SLAB-INWARD    SLAB-NONE      }
		bilateralInwardSerifed  { SLAB-INWARD    SLAB-INWARD    }

		seriflessDesc               { SLAB-NONE      SLAB-CLASSICAL }
		unilateralInwardSerifedDesc { SLAB-INWARD    SLAB-CLASSICAL }

	foreach { suffix { slabTop slabBot } } [Object.entries EpsilonConfig] : do
		create-glyph "latn/Epsilon.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : let [eps : SmallEpsilon slabTop slabBot CAP 0 StdBlend Hook]
				union [eps.Shape] [eps.AutoStartSerifR] [eps.AutoEndSerifR]

		create-glyph "latn/epsilon.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : let [eps : SmallEpsilon slabTop slabBot XH 0 StdBlend SHook]
				union [eps.Shape] [eps.AutoStartSerifR] [eps.AutoEndSerifR]

		create-glyph "cyrl/Ze.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : let [ze : CyrZe slabTop slabBot CAP 0 SB RightSB StdBlend Hook]
				union [ze.Shape] [ze.AutoStartSerifL] [ze.AutoEndSerifL]

		create-glyph "cyrl/ze.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : let [ze : CyrZe slabTop slabBot XH 0 SB RightSB StdBlend SHook]
				union [ze.Shape] [ze.AutoStartSerifL] [ze.AutoEndSerifL]

		create-glyph "cyrl/ze.BGR.\(suffix)" : glyph-proc
			include : MarkSet.p
			include : let [ze : CyrZe slabTop slabBot XH Descender SB RightSB StdBlend SHook]
				union [ze.Shape] [ze.AutoStartSerifL] [ze.AutoEndSerifL]

		create-glyph "cyrl/DzjeKomi.\(suffix)" : glyph-proc
			include : MarkSet.capital
			local ze : CyrZe slabTop OPEN-VERTICAL CAP 0 SB RightSB StdBlend Hook
			include : ze.Shape
			include : ze.AutoStartSerifL
			include : CyrDescender.rSideJut (RightSB - OX * 2) 0

		create-glyph "cyrl/dzjeKomi.\(suffix)" : glyph-proc
			include : MarkSet.e
			local ze : CyrZe slabTop OPEN-VERTICAL XH 0 SB RightSB StdBlend SHook
			include : ze.Shape
			include : ze.AutoStartSerifL
			include : CyrDescender.rSideJut (RightSB - OX * 2) 0

		create-glyph "cyrl/ZjeKomi.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital

			local xm : df.middle + [HSwToV : 0.5 * df.mvs]
			local ze : CyrZe slabTop OPEN-HALF CAP 0 df.leftSB xm StdBlend Hook df.mvs
			define [object stroke midy] : ze.Dim
			include : ze.Shape
			include : UpwardHookShape
				left -- xm - OX * 2 - [HSwToV stroke]
				right -- df.rightSB
				ybegin -- [YSmoothMidR (midy + stroke / 2) 0]
				yend -- (CAP / 2)
				ada -- (ArchDepthA * 0.6 * df.div)
				adb -- (ArchDepthB * 0.6 * df.div)
				sw -- stroke
			include : ze.AutoStartSerifL
			local sf2 : [SerifFrame.fromDf df (CAP / 2) 0].slice 1 2
			if SLAB : include sf2.rt.full

		create-glyph "cyrl/zjeKomi.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e

			local xm : df.middle + [HSwToV : 0.5 * df.mvs]
			local ze : CyrZe slabTop OPEN-HALF XH 0 df.leftSB xm StdBlend SHook df.mvs
			define [object stroke midy] : ze.Dim
			include : ze.Shape
			include : UpwardHookShape
				left -- xm - OX * 2 - [HSwToV stroke]
				right -- df.rightSB
				ybegin -- [YSmoothMidR (midy + stroke / 2) 0]
				yend -- (XH / 2)
				ada -- (SmallArchDepthA * 0.6 * df.div)
				adb -- (SmallArchDepthB * 0.6 * df.div)
				sw -- stroke
			include : ze.AutoStartSerifL
			local sf2 : [SerifFrame.fromDf df (XH / 2) 0].slice 1 2
			if SLAB : include sf2.rt.full

		create-glyph "cyrl/KsiBase.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			include : let [ze : CyrZe slabTop SLAB-NONE CAP 0 SB RightSB StdBlend Hook]
				union [ze.KsiBaseShape] [ze.AutoStartSerifL]

		create-glyph "cyrl/ksiBase.\(suffix)" : glyph-proc
			include : MarkSet.p
			include : let [ze : CyrZe slabTop SLAB-NONE XH 0 SB RightSB StdBlend SHook]
				union [ze.KsiBaseShape] [ze.AutoStartSerifL]

	do "Closed Epsilon Shapes"
		create-glyph 'epsilonClosed' 0x29A : glyph-proc
			include : MarkSet.e
			local eps : SmallEpsilon CLOSED-CIRCLE CLOSED-CIRCLE XH 0 StdBlend SHook
				ada2 -- SmallArchDepthA
				adb2 -- SmallArchDepthB
			include : eps.Shape

		create-glyph 'epsilonRevClosed' 0x25E : glyph-proc
			include : MarkSet.e
			local ze : CyrZe CLOSED-CIRCLE CLOSED-CIRCLE XH 0 SB RightSB StdBlend SHook
				ada2 -- SmallArchDepthA
				adb2 -- SmallArchDepthB
			include : ze.Shape

		create-glyph 'OeVolapuk' 0xA79C : glyph-proc
			include : MarkSet.capital
			local eps : SmallEpsilon CLOSED-CIRCLE CLOSED-CIRCLE CAP 0 VolBlend Hook
				ada2 -- ArchDepthA
				adb2 -- ArchDepthB
			include : eps.Shape

		create-glyph 'oeVolapuk' 0xA79D : glyph-proc
			include : MarkSet.e
			local eps : SmallEpsilon CLOSED-CIRCLE CLOSED-CIRCLE XH 0 VolBlend SHook
				ada2 -- SmallArchDepthA
				adb2 -- SmallArchDepthB
			include : eps.Shape

	do "Volapuk AE"
		glyph-block-import Letter-Latin-Lower-A : SingleStorey

		define [FullBarBody df height bar hook ada2 adb2] : glyph-proc
			local eps : SmallEpsilon CLOSED-STEM CLOSED-STEM height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : bar df height no-shape stroke

		define [EarlessCornerBody df height bar hook ada2 adb2] : glyph-proc
			local eps : SmallEpsilon SLAB-INWARD CLOSED-STEM height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : bar df (height - DToothlessRise) no-shape stroke

		define [EarlessRoundedBody df height bar hook ada2 adb2] : glyph-proc
			local eps : SmallEpsilon CLOSED-ROUND CLOSED-STEM height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : bar df (height - adb2) no-shape stroke

		define SingleStoreyConfig : SuffixCfg.weave
			object # body
				singleStorey                 FullBarBody
				singleStoreyEarlessCorner    EarlessCornerBody
				singleStoreyEarlessRounded   EarlessRoundedBody

			object # bar
				serifless  SingleStorey.SeriflessBar
				serifed    SingleStorey.SerifedBar
				tailed     SingleStorey.TailedBar

		foreach { suffix { body bar } } [Object.entries SingleStoreyConfig] : do
			create-glyph "AeVolapuk.\(suffix)" : glyph-proc
				include : MarkSet.capital
				include : body [DivFrame 1] CAP bar Hook ArchDepthA ArchDepthB
			create-glyph "aeVolapuk.\(suffix)" : glyph-proc
				include : MarkSet.e
				include : body [DivFrame 1] XH bar SHook SmallArchDepthA SmallArchDepthB

	do "Volapuk UE"
		glyph-block-import Letter-Latin-U : USerifs
		glyph-block-import Letter-Shared-Shapes : RightwardTailedBar

		define [UToothed df height slab hook ada2 adb2] : glyph-proc
			set-base-anchor 'trailing' df.rightSB 0
			local eps : SmallEpsilon OPEN-VERTICAL CLOSED-STEM height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : VBar.r df.rightSB 0 height stroke
			include : slab df height

		define [UTailed df height slab hook ada2 adb2] : glyph-proc
			set-base-anchor 'trailing' (df.rightSB + SideJut) 0
			local eps : SmallEpsilon OPEN-VERTICAL CLOSED-STEM height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : RightwardTailedBar df.rightSB 0 height stroke
			include : slab df height

		define [UToothlessRounded df height slab hook ada2 adb2] : glyph-proc
			local eps : SmallEpsilon OPEN-VERTICAL CLOSED-ROUND height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : VBar.r df.rightSB ada2 height stroke
			include : slab df height

		define [UToothlessCorner df height slab hook ada2 adb2] : glyph-proc
			local eps : SmallEpsilon OPEN-VERTICAL SLAB-INWARD height 0 VolBlend hook
				ada2 -- ada2
				adb2 -- adb2
			define [object stroke] : eps.Dim
			include : eps.Shape
			include : VBar.r df.rightSB DToothlessRise height stroke
			include : slab df height stroke

		define SmallUConfig : SuffixCfg.weave
			object # body
				toothed           UToothed
				tailed            UTailed
				toothlessCorner   UToothlessCorner
				toothlessRounded  UToothlessRounded
			function [body] : object # serifs
				serifless              no-shape
				bottomRightSerifed     USerifs.BottomRight
				motionSerifed : match body
					[Just 'toothed']   USerifs.MotionToothed
					__                 USerifs.MotionToothless
				serifed : match body
					[Just 'toothed']   USerifs.Toothed
					[Just 'tailed']    USerifs.Tailed
					__                 USerifs.SmallToothless

		foreach { suffix { Base Slabs } } [Object.entries SmallUConfig] : do
			create-glyph "UeVolapuk.\(suffix)" : glyph-proc
				local df : DivFrame 1
				include : MarkSet.capital
				include : Base df CAP Slabs Hook ArchDepthA ArchDepthB
			create-glyph "ueVolapuk.\(suffix)" : glyph-proc
				local df : DivFrame 1
				include : MarkSet.e
				include : Base df XH Slabs SHook SmallArchDepthA SmallArchDepthB


	select-variant 'AeVolapuk' 0xA79A (follow -- 'a/single')
	select-variant 'aeVolapuk' 0xA79B (follow -- 'a/single')
	select-variant 'UeVolapuk' 0xA79E (follow -- 'u')
	select-variant 'ueVolapuk' 0xA79F (follow -- 'u')

	alias 'grek/epsilon' 0x3B5 'latn/epsilon.serifless'
	select-variant 'latn/Epsilon' 0x190
	select-variant 'latn/epsilon' 0x25B
	turned 'turnepsilon' 0x1D08 'latn/epsilon' Middle (XH / 2)
	alias 'cyrl/ZeRev' 0x510 'latn/Epsilon'
	alias 'cyrl/zeRev' 0x511 'latn/epsilon'

	select-variant 'cyrl/Ze' 0x417
	select-variant 'cyrl/ze' 0x437
	select-variant 'cyrl/KsiBase' (follow -- 'cyrl/Ksi')
	select-variant 'cyrl/ksiBase' (follow -- 'cyrl/ksi')
	select-variant 'cyrl/ze.BGR' (follow -- 'cyrl/ze')
	alias 'latn/EpsilonRev' 0xA7AB 'cyrl/Ze'
	alias 'latn/epsilonRev' 0x25C  'cyrl/ze'

	select-variant 'cyrl/ZjeKomi' 0x504 (follow -- 'cyrl/Ksi')
	select-variant 'cyrl/zjeKomi' 0x505 (follow -- 'cyrl/ksi')
	select-variant 'cyrl/DzjeKomi' 0x506 (follow -- 'cyrl/Ksi')
	select-variant 'cyrl/dzjeKomi' 0x507 (follow -- 'cyrl/ksi')

	derive-composites 'cyrl/ZeCedilla' 0x498 'cyrl/Ze' 'cedillaExtShapeBelowOArc'
	derive-composites 'cyrl/zeCedilla' 0x499 'cyrl/ze' 'cedillaExtShapeBelowSOArc'

	select-variant 'latn/epsilon/descBase' (shapeFrom -- 'latn/epsilon')
	select-variant 'latn/epsilonRev/descBase' (shapeFrom -- 'cyrl/ze') (follow -- 'latn/epsilon/descBase')

	derive-composites 'latn/epsilonRetroflexHook' 0x1D93 'latn/epsilon/descBase'
		RetroflexHook.r RightSB 0 (refSw -- [AdviceStroke2 2 3 XH])
	derive-composites 'latn/epsilonRevRetroflexHook' 0x1D94 'latn/epsilonRev/descBase'
		RetroflexHook.l SB      0 (refSw -- [AdviceStroke2 2 3 XH])
		ExtendBelowBaseAnchors Descender

	CreateAccentedComposition 'cyrl/Ksi' 0x46E 'cyrl/KsiBase' 'caronAbove'
	CreateAccentedComposition 'cyrl/ksi' 0x46F 'cyrl/ksiBase' 'caronAbove'

	create-glyph 'voicedLaryngealSpirant' 0x1D24 : glyph-proc
		include : MarkSet.b
		local blend 0.505
		local midGap : Math.max [AdviceStroke2 3 12 CAP] (CAP / 8 - [AdviceStroke2 3 6 XH])
		local strokeV : AdviceStroke 4
		local ze : CyrZe SLAB-NONE SLAB-NONE CAP midGap SB RightSB blend Hook
		local dimUpper : ze.Dim

		local epsilon : SmallEpsilon SLAB-NONE SLAB-NONE (CAP - midGap) 0 blend Hook
		local dimLower : epsilon.Dim
		include : union [epsilon.LowerShape] [ze.UpperShape]
			Rect (dimUpper.midy + dimUpper.stroke / 2) (dimLower.midy - dimLower.stroke / 2) (Middle - strokeV / 2 * HVContrast) (Middle + strokeV / 2 * HVContrast)
