$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Lower-M : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : RightwardTailedBar DToothlessRise DMBlend
	glyph-block-import Letter-Shared-Shapes : nShoulder nShoulderMask CyrDescender

	define [SmallMSmooth df] : df.div * (0.5 * SmallSmooth + 0.375 * Stroke)
	define [SmallMShoulderSpiro] : params [left right top bottom width fine df coBottom] : glyph-proc
		local fix : TanSlope * Stroke * HVContrast * width / Stroke
		local sm : [SmallMSmooth df] + fix / 2
		include : spiro-outline
			corner (right - width * HVContrast) [Math.min (top - sm - 0.1) bottom]
			curl   (right - width * HVContrast) (top - sm + fix)
			arcvh 8
			g2     [mix left (right - width * HVContrast) 0.5] (top - O - width)
			archv 8
			flat   left (top - sm - fix)
			corner left (top - sm - fix - 1)
			if (coBottom != nothing)
				list [corner left coBottom] [corner (left - fine) coBottom]
				list
			corner (left - fine) (top - sm - 1)
			curl   (left - fine) (top - sm)
			arcvh 8
			g2     [mix (left - fine * HVContrast) right 0.5] (top - O)
			archv 8
			flat   right (top - sm)
			corner right [Math.min (top - sm - 0.1) bottom]
			close

	define [RevSmallMShoulderSpiro] : params [left right top bottom width fine df coBottom] : glyph-proc
		local fix : TanSlope * Stroke * HVContrast * width / Stroke
		local sm : [SmallMSmooth df] - fix / 2
		include : spiro-outline
			corner (left + width * HVContrast) [Math.min (top - sm - 0.1) bottom]
			curl   (left + width * HVContrast) (top - sm - fix)
			arcvh 8
			g2     [mix right (left + width * HVContrast) 0.5] (top - O - width)
			archv 8
			flat   right (top - sm - fix)
			corner right (top - sm - fix - 1)
			if (coBottom != nothing)
				list [corner right coBottom] [corner (right + fine) coBottom]
				list
			corner (right + fine) (top - sm - 1)
			curl   (right + fine) (top - sm)
			arcvh 8
			g2     [mix (right + fine * HVContrast) left 0.5] (top - O)
			archv 8
			flat   left (top - sm)
			corner left [Math.min (top - sm - 0.1) bottom]
			close

	define [SmallMTopLeftSerif df top lbot] : glyph-proc
		if (df.width > para.refJut * 7) : begin
			include : tagged 'serifLT' : intersection
				CenterTopSerif (df.leftSB + 0.5 * df.mvs * HVContrast) top Jut df.mvs
				Rect top lbot 0 (df.leftSB - O)
		: else : begin
			include : tagged 'serifLT' : LeftwardTopSerif df.leftSB top SideJut df.mvs

	define [SmallMBottomLeftSerif df top lbot] : glyph-proc
		if (df.width > para.refJut * 7) : begin
			include : tagged 'serifLB' : begin
				CenterBottomSerif (df.leftSB + 0.5 * df.mvs * HVContrast) lbot Jut df.mvs
		: else : begin
			include : tagged 'serifLB' : begin
				LeftwardBottomSerif  df.leftSB lbot SideJut df.mvs

	define [SmallMBottomMiddleSerif df top mbot] : glyph-proc
		if (df.width > para.refJut * 7) : begin
			include : tagged 'serifMB' : begin
				CenterBottomSerif df.middle mbot Jut df.mvs

	define [SmallMBottomRightSerif df top rbot] : glyph-proc
		if (df.width > para.refJut * 7) : begin
			if para.isItalic : begin
				include : tagged 'serifRB' : intersection
					CenterBottomSerif (df.rightSB - 0.5 * df.mvs * HVContrast) rbot Jut df.mvs
					Rect top rbot (df.rightSB + O) df.width
			: else : begin
				include : tagged 'serifRB' : begin
					CenterBottomSerif (df.rightSB - 0.5 * df.mvs * HVContrast) rbot Jut df.mvs
		: else : begin
			include : tagged 'serifRB' : RightwardBottomSerif df.rightSB rbot SideJut df.mvs

	define [SmallMBottomMotionRightSerif df top rbot] : glyph-proc
		include : tagged 'serifRB' : RightwardBottomSerif df.rightSB rbot SideJut df.mvs

	define [AutoSerifs df top lbot mbot rbot tailed earless] : glyph-proc
		if SLAB : begin
			if [not earless] : include : SmallMTopLeftSerif df top lbot
			if [not para.isItalic] : include : SmallMBottomLeftSerif df top lbot
			if [not para.isItalic] : include : SmallMBottomMiddleSerif df top mbot
			if [not tailed] : include : SmallMBottomRightSerif df top rbot

	define [LtSerifs df top lbot mbot rbot tailed earless] : glyph-proc
		include : SmallMTopLeftSerif df top lbot

	define [LtRbSerifs df top lbot mbot rbot tailed earless] : glyph-proc
		include : SmallMTopLeftSerif df top lbot
		include : SmallMBottomMotionRightSerif df top rbot

	define [dfM] : DivFrame para.diversityM 3
	define [SmallMArches top lbot mbot rbot df] : glyph-proc
		include : SmallMShoulderSpiro
			df        -- df
			left      -- (df.leftSB + df.mvs * HVContrast)
			right     -- (df.middle + df.mvs / 2 * HVContrast)
			top       -- top
			bottom    -- mbot
			width     -- df.mvs
			fine      -- (df.mvs * ShoulderFine / Stroke)
		include : SmallMShoulderSpiro
			df        -- df
			left      -- (df.middle + df.mvs * 0.5 * HVContrast)
			right     -- df.rightSB
			top       -- top
			bottom    -- rbot
			width     -- df.mvs
			fine      -- (df.mvs * ShoulderFine / Stroke)
		include : tagged 'barL' : VBarLeft df.leftSB lbot top df.mvs

	glyph-block-export SmallMSmoothHeight
	define [SmallMShortLegHeight df] : (XH - df.mvs) * 0.45
	define [SmallMSmoothHeight df] : XH - [SmallMSmooth df] - TanSlope * Stroke

	define [EarlessCornerDoubleArchSmallMShape top lbot mbot rbot df] : glyph-proc
		include : dispiro
			widths.rhs df.mvs
			g4 df.leftSB (top - DToothlessRise)
			g4.right.mid [mix df.leftSB (df.middle + df.mvs / 2 * HVContrast) 0.5] (top - O) [heading Rightward]
			g4 (df.middle + df.mvs / 2 * HVContrast) (top - DToothlessRise)
		include : dispiro
			widths.rhs df.mvs
			g4 (df.middle - df.mvs / 2 * HVContrast) (top - DToothlessRise)
			g4.right.mid [mix df.rightSB (df.middle - df.mvs / 2 * HVContrast) 0.5] (top - O) [heading Rightward]
			archv
			flat df.rightSB (top - [SmallMSmooth df]) [heading Downward]
			curl df.rightSB rbot [heading Downward]

		include : tagged 'barL' : VBarLeft df.leftSB lbot (top - DToothlessRise) df.mvs
		include : tagged 'barM' : VBar     df.middle mbot (top - DToothlessRise) df.mvs

	define [EarlessRoundedDoubleArchSmallMShape top lbot mbot rbot df] : glyph-proc
		include : union
			RevSmallMShoulderSpiro
				df        -- df
				left      -- df.leftSB
				right     -- (df.middle - df.mvs / 2 * HVContrast)
				top       -- top
				bottom    -- lbot
				coBottom  -- mbot
				width     -- df.mvs
				fine      -- (df.mvs * CThin)
			SmallMShoulderSpiro
				df        -- df
				left      -- (df.middle + df.mvs * 0.5 * HVContrast)
				right     -- df.rightSB
				top       -- top
				bottom    -- rbot
				coBottom  -- mbot
				width     -- df.mvs
				fine      -- (df.mvs * CThin)

	define [EarlessSingleArchSmallMShape top lbot mbot rbot df] : glyph-proc
		include : tagged 'barL' : VBarLeft df.leftSB lbot (top - DToothlessRise) df.mvs
		include : tagged 'barM' : VBar df.middle mbot top df.mvs
		include : dispiro
			widths.rhs df.mvs
			g4 df.leftSB (top - DToothlessRise)
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat df.rightSB [Math.max (top - [SmallMSmooth df]) (rbot + 0.1)]
			curl df.rightSB rbot [heading Downward]

	define SmallMConfig : object
		normal                                 { SmallMArches                        AutoSerifs 0 0 0 }
		tailed                                 { SmallMArches                        AutoSerifs 1 0 0 }
		shortLeg                               { SmallMArches                        AutoSerifs 0 1 0 }
		shortLegTailed                         { SmallMArches                        AutoSerifs 1 1 0 }
		topLeftSerifed                         { SmallMArches                        LtSerifs   0 0 0 }
		tailedTopLeftSerifed                   { SmallMArches                        LtSerifs   1 0 0 }
		shortLegTopLeftSerifed                 { SmallMArches                        LtSerifs   0 1 0 }
		shortLegTopLeftSerifedTailed           { SmallMArches                        LtSerifs   1 1 0 }
		topLeftAndBottomRightSerifed           { SmallMArches                        LtRbSerifs 0 0 0 }
		shortLegTopLeftAndBottomRightSerifed   { SmallMArches                        LtRbSerifs 0 1 0 }
		normal                                 { SmallMArches                        AutoSerifs 0 0 0 }
		tailed                                 { SmallMArches                        AutoSerifs 1 0 0 }
		shortLeg                               { SmallMArches                        AutoSerifs 0 1 0 }
		shortLegTailed                         { SmallMArches                        AutoSerifs 1 1 0 }
		earlessCornerDoubleArch                { EarlessCornerDoubleArchSmallMShape  AutoSerifs 0 0 1 }
		earlessCornerDoubleArchTailed          { EarlessCornerDoubleArchSmallMShape  AutoSerifs 1 0 1 }
		earlessCornerDoubleArchShortleg        { EarlessCornerDoubleArchSmallMShape  AutoSerifs 0 1 1 }
		earlessCornerDoubleArchShortlegTailed  { EarlessCornerDoubleArchSmallMShape  AutoSerifs 1 1 1 }
		earlessRoundedDoubleArch               { EarlessRoundedDoubleArchSmallMShape AutoSerifs 0 0 1 }
		earlessRoundedDoubleArchTailed         { EarlessRoundedDoubleArchSmallMShape AutoSerifs 1 0 1 }
		earlessRoundedDoubleArchShortleg       { EarlessRoundedDoubleArchSmallMShape AutoSerifs 0 1 1 }
		earlessRoundedDoubleArchShortlegTailed { EarlessRoundedDoubleArchSmallMShape AutoSerifs 1 1 1 }
		earlessSingleArch                      { EarlessSingleArchSmallMShape        AutoSerifs 0 0 1 }
		earlessSingleArchTailed                { EarlessSingleArchSmallMShape        AutoSerifs 1 0 1 }
		earlessSingleArchShortleg              { EarlessSingleArchSmallMShape        AutoSerifs 0 1 1 }
		earlessSingleArchShortlegTailed        { EarlessSingleArchSmallMShape        AutoSerifs 1 1 1 }

	foreach { suffix { Body Serifs tailed shortLeg earless } } [Object.entries SmallMConfig] : do
		create-glyph "m.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.e
			include : Body XH 0 [if shortLeg [SmallMShortLegHeight df] 0] [if tailed ([SmallMSmoothHeight df] + O) 0] df
			if tailed : include : RightwardTailedBar df.rightSB 0 [SmallMSmoothHeight df] (sw -- df.mvs)
			include : Serifs df XH 0 [if shortLeg [SmallMShortLegHeight df] 0] 0 tailed earless

		create-glyph "capitalSmallM.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.capital
			include : Body CAP 0 [if shortLeg [SmallMShortLegHeight df] 0] [if tailed ([SmallMSmoothHeight df] + O) 0] df
			if tailed : include : RightwardTailedBar df.rightSB 0 [SmallMSmoothHeight df] (sw -- df.mvs)
			include : Serifs df CAP 0 [if shortLeg [SmallMShortLegHeight df] 0] 0 tailed earless

		create-glyph "mLTail.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.p
			include [refer-glyph "m.\(suffix)"]
			eject-contour 'serifRB'
			include : VerticalHook (df.rightSB - df.mvs / 2 * HVContrast) 0 (-HookX) Hook df.mvs

		create-glyph "turnmLeg.\(suffix)" : glyph-proc
			local df : dfM
			set-width df.width
			include : df.markSet.p
			include [refer-glyph "m.\(suffix)"]
			eject-contour 'serifLT'
			include : FlipAround df.middle (XH / 2)
			include : VBarRight df.rightSB Descender XH df.mvs
			if (SLAB && Serifs === AutoSerifs) : begin
				include : union
					LeftwardBottomSerif (df.rightSB - HalfStroke * HVContrast) Descender MidJutSide
					RightwardBottomSerif (df.rightSB - HalfStroke * HVContrast) Descender Jut
			if (Serifs === LtRbSerifs || Serifs === LtSerifs) : begin
				include : RightwardBottomSerif df.rightSB Descender SideJut

	select-variant 'm' 'm'
	select-variant 'capitalSmallM' (follow -- 'm')
	link-reduced-variant 'm/sansSerif' 'm' MathSansSerif

	select-variant 'cyrl/te.italic' (shapeFrom -- 'm')
	alias 'cyrl/te.BGR' null 'cyrl/te.italic'
	derive-composites 'cyrl/teDescender.italic' null 'cyrl/te.italic'
		CyrDescender [DivFrame para.diversityM 3].rightSB

	select-variant 'mLTail' 0x271
	select-variant 'turnmLeg' 0x270 (follow -- 'm')

	turned 'turnm' 0x26F 'm' [dfM].middle (XH / 2)
	turned 'capitalTurnm' 0x19C 'capitalSmallM' [dfM].middle (CAP / 2)

	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	create-glyph 'mathbb/m' 0x1D55E : glyph-proc
		local df : DivFrame 1 3
		local bbs : AdviceStroke 8
		local bbd : BBD * [Math.min (3 / 4) (bbs / BBS)]
		define xMid : mix (df.leftSB + bbd + bbs * HVContrast) df.rightSB 0.5

		set-width df.width
		include : df.markSet.e

		include : BBBarLeft df.leftSB 0 XH (bbd -- bbd) (bbs -- bbs)
		include : union
			HBarBottom (xMid - bbd) xMid 0 bbs
			nShoulder
				stroke -- bbs
				left -- (df.leftSB + bbd + bbs * HVContrast)
				right -- xMid
				fine -- ShoulderFine
			intersection
				VBarRight (xMid - bbd) 0 XH bbs
				nShoulderMask
					stroke -- bbs
					left -- (df.leftSB + bbd + bbs * HVContrast + 1)
					right -- (xMid - 1)
					top -- (XH - 1)
					fine -- ShoulderFine
		include : union
			HBarBottom (df.rightSB - bbd) df.rightSB 0 bbs
			nShoulder
				leftY0 -- 0
				stroke -- bbs
				left -- xMid
				right -- df.rightSB
				fine -- ShoulderFine
			intersection
				VBarRight (df.rightSB - bbd) 0 XH bbs
				nShoulderMask
					stroke -- bbs
					left -- (xMid + 1)
					right -- (df.rightSB - 1)
					top -- (XH - 1)
					fine -- ShoulderFine
