$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-U : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Shared-Metrics : markHalfStroke
	glyph-block-import Letter-Shared : CreateAccentedComposition SetGrekUpperTonos
	glyph-block-import Letter-Shared-Shapes : nShoulder RightwardTailedBar DToothlessRise SerifFrame
	glyph-block-import Letter-Shared-Shapes : CyrTailDescender

	glyph-block-export UShape

	define [UArcT] : params [sink df top bottom [stroke Stroke] [ada ArchDepthA] [adb ArchDepthB] [offset 0]] : sink
		widths.lhs stroke
		[if (sink == spiro-outline) corner flat] (df.leftSB + offset) top [heading Downward]
		curl (df.leftSB + offset) (bottom + adb + offset)
		arcvh
		g4   (df.middle + CorrectionOMidX * stroke) (bottom + O + offset)
		archv
		flat (df.rightSB - offset) (bottom + ada + offset)
		[if (sink == spiro-outline) corner curl] (df.rightSB - offset) top [heading Upward]

	define [UShape] : params [df top bottom [stroke Stroke] [ada ArchDepthA] [adb ArchDepthB] [offset 0]] : glyph-proc
		include : UArcT dispiro
			df -- df
			top -- top
			bottom -- bottom
			stroke -- stroke
			ada -- ada
			adb -- adb
			offset -- offset

	define [UToothed df top] : glyph-proc
		set-base-anchor 'trailing' (df.rightSB - markHalfStroke) 0
		include : nShoulder
			top -- top
			left -- (df.leftSB + Stroke * HVContrast)
			right -- df.rightSB
			fine -- ShoulderFine
		include : FlipAround df.middle (top / 2)
		include : VBarRight df.rightSB 0 top

	define [UTailed df top] : glyph-proc
		set-base-anchor 'trailing' (df.rightSB - markHalfStroke) 0
		include : nShoulder
			top -- top
			left -- (df.leftSB + Stroke * HVContrast)
			right -- df.rightSB
			fine -- ShoulderFine
		include : FlipAround df.middle (top / 2)
		include : RightwardTailedBar df.rightSB 0 top

	define [UToothlessRounded df top] : glyph-proc
		set-base-anchor 'trailing' df.middle 0
		include : UShape df top 0

	define [UToothlessRoundedSmall df top] : glyph-proc
		set-base-anchor 'trailing' df.middle 0
		include : UShape df top 0 (ada -- SmallArchDepthA) (adb -- SmallArchDepthB)

	define [UToothlessCorner df top] : glyph-proc
		set-base-anchor 'trailing' df.middle 0
		include : VBarLeft df.leftSB 0 (top - DToothlessRise)
		include : dispiro
			widths.rhs
			g4 df.leftSB (top - DToothlessRise)
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat df.rightSB (top - ArchDepthB)
			curl df.rightSB 0 [heading Downward]
		include : FlipAround df.middle (top / 2)

	define [UToothlessCornerSmall df top] : glyph-proc
		set-base-anchor 'trailing' df.middle 0
		include : VBarLeft df.leftSB 0 (top - DToothlessRise)
		include : dispiro
			widths.rhs
			g4 df.leftSB (top - DToothlessRise)
			g4 (df.middle - CorrectionOMidS) (top - O)
			archv
			flat df.rightSB (top - SmallArchDepthB)
			curl df.rightSB 0 [heading Downward]
		include : FlipAround df.middle (top / 2)

	define [UTopLeftSerif df yTop]  : tagged 'serifLT'
		LeftwardTopSerif df.leftSB yTop SideJut

	define [UTopRightSerif df yTop] : tagged 'serifRT'
		LeftwardTopSerif (df.rightSB - Stroke * HVContrast) yTop SideJut

	define [UBottomRightSerif df yTop] : tagged 'serifRB'
		RightwardBottomSerif df.rightSB 0 SideJut

	define [SmallUSlabs df top] : glyph-proc : if SLAB : begin
		include : UTopLeftSerif df top
		if [not para.isItalic] : include : UTopRightSerif df top
		include : UBottomRightSerif df top

	define [UrtBaseSlabs df top] : glyph-proc : if SLAB : begin
		include : UTopLeftSerif df top
		if [not para.isItalic] : include : UTopRightSerif df top

	define [SmallUTailedSlabs df top] : glyph-proc : if SLAB : begin
		include : UTopLeftSerif df top
		if [not para.isItalic] : include : UTopRightSerif df top

	define [CapitalUMotionToothlessSlabs df top] : glyph-proc
		include : LeftwardTopSerif df.leftSB top SideJut
		include : RightwardTopSerif df.rightSB top SideJut

	define [SmallUToothlessSlabs df top] : glyph-proc : if SLAB : begin
		include : UTopLeftSerif df top
		include : UTopRightSerif df top

	define [SmallUMotionSlabs df top] : glyph-proc
		include : UTopLeftSerif df top
		include : UBottomRightSerif df top

	define [SmallUBottomRightSlabs df top] : glyph-proc
		include : UBottomRightSerif df top

	define [SmallUMotionTailedSlabs df top] : glyph-proc
		include : UTopLeftSerif df top

	define [ToothlessSlabs df top] : NeedSlab SLAB : let [sf : SerifFrame top 0 df.leftSB df.rightSB]
		composite-proc sf.lt.full sf.rt.full

	define CapitalUConfig : object
		toothed                                 { UToothed          SmallUSlabs                  SLAB }
		tailed                                  { UTailed           SmallUTailedSlabs            SLAB }
		motionSerifed                           { UToothed          SmallUMotionSlabs            true }
		tailedMotionSerifed                     { UTailed           SmallUMotionTailedSlabs      true }
		toothlessCorner                         { UToothlessCorner  ToothlessSlabs               SLAB }
		toothlessRounded                        { UToothlessRounded ToothlessSlabs               SLAB }
		toothlessCornerBilateralMotionSerifed   { UToothlessCorner  CapitalUMotionToothlessSlabs true }
		toothlessRoundedBilateralMotionSerifed  { UToothlessRounded CapitalUMotionToothlessSlabs true }
		toothlessCornerUnilateralMotionSerifed  { UToothlessCorner  SmallUMotionTailedSlabs      true }
		toothlessRoundedUnilateralMotionSerifed { UToothlessRounded SmallUMotionTailedSlabs      true }

	foreach { suffix { Base Slabs fLTSlab } } [Object.entries CapitalUConfig] : do
		create-glyph "U.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include : MarkSet.capital
			include : Base df CAP
			include : Slabs df CAP

		create-glyph "U/withTonos.\(suffix)" : glyph-proc
			include [refer-glyph "U.\(suffix)"] AS_BASE ALSO_METRICS
			include : SetGrekUpperTonos [if fLTSlab (-SideJut) 0]

		create-glyph "smcpU.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include : MarkSet.e
			include : Base df XH
			include : Slabs df XH

	define SmallUConfig : object
		seriflessTailed               { UTailed                [function : glyph-proc] }
		toothed                       { UToothed               SmallUSlabs             }
		tailed                        { UTailed                SmallUTailedSlabs       }
		motionSerifed                 { UToothed               SmallUMotionSlabs       }
		tailedMotionSerifed           { UTailed                SmallUMotionTailedSlabs }
		toothlessCorner               { UToothlessCornerSmall  SmallUToothlessSlabs    }
		toothlessRounded              { UToothlessRoundedSmall SmallUToothlessSlabs    }
		toothlessCornerMotionSerifed  { UToothlessCornerSmall  SmallUMotionTailedSlabs }
		toothlessRoundedMotionSerifed { UToothlessRoundedSmall SmallUMotionTailedSlabs }
		bottomRightSerifed            { UToothed               SmallUBottomRightSlabs  }
		urtBase                       { UToothed               UrtBaseSlabs            }
		urtBaseMotionSerifed          { UToothed               SmallUMotionTailedSlabs }
		urtBaseSerifless              { UToothed               [function : glyph-proc] }

	foreach { suffix { Base Slabs } } [Object.entries SmallUConfig] : do
		create-glyph "u.\(suffix)" : glyph-proc
			local df : DivFrame 1
			include : MarkSet.e
			include : Base df XH
			include : Slabs df XH

		create-glyph "uSideways.\(suffix)" : glyph-proc
			local df : DivFrame (XH / Width) 2 (XH * 0.1 / SB)
			include : PointingTo Width XH Width 0 : function [] : glyph-proc
				include : Base  df (Width - SB)
				include : Slabs df (Width - SB)
				include : Translate 0 (SB / 2)

		create-glyph "uDieresisSidewaysBase.\(suffix)" : glyph-proc
			local ww : Width * para.diversityM
			set-width ww
			include : PointingTo ww XH ww 0 : function [] : glyph-proc
				local df : DivFrame (XH / Width) 2 (XH * 0.1 / SB)
				include : Base  df (ww - SB - 0.75 * para.diversityM * AccentHeight)
				include : Slabs df (ww - SB - 0.75 * para.diversityM * AccentHeight)
				include : Translate 0 (SB / 2)

	select-variant 'U' 'U'
	select-variant 'U/withTonos' (follow -- 'U')
	link-reduced-variant 'U/sansSerif' 'U' MathSansSerif
	select-variant 'smcpU' 0x1D1C (follow -- 'U')
	select-variant 'u' 'u'
	link-reduced-variant 'u/sansSerif' 'u' MathSansSerif
	select-variant 'u/uRTailBase' (shapeFrom -- 'u')
	select-variant 'cyrl/i.italic' (shapeFrom -- 'u')
	select-variant 'cyrl/i.italic.reduced' (shapeFrom -- 'u')
	alias 'cyrl/i.BGR' null 'cyrl/i.italic'
	select-variant 'uSideways' 0x1D1D (follow -- 'u')
	select-variant 'uDieresisSidewaysBase' null (follow -- 'u')

	derive-glyphs 'cyrl/ibreve.BGR' null 'cyrl/i.BGR' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include [refer-glyph 'breveAbove']

	derive-glyphs 'cyrl/igrave.BGR' null 'cyrl/i.BGR' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include [refer-glyph 'graveAbove']

	derive-composites 'cyrl/iShortTail.italic' null  'cyrl/i.italic.reduced' [refer-glyph 'breveAbove'] [CyrTailDescender RightSB]

	derive-composites 'uRTailBR' 0x1D99 'u/uRTailBase' 'rRetroflexTailBR'

	define [LatinUpsilon2Shape df top ada adb] : glyph-proc
		include : dispiro
			widths.lhs
			flat df.leftSB top [heading Downward]
			curl df.leftSB adb
			arcvh
			g4 (Middle + CorrectionOMidS) O
			archv
			flat df.rightSB ada
			curl df.rightSB (top - Hook - HalfStroke) [heading Upward]
		include : VerticalHook (df.rightSB - HalfStroke * HVContrast) (top - Hook - HalfStroke) (-(RightSB - HalfStroke * HVContrast - Middle)) (-Hook)
		if SLAB : include : UTopLeftSerif df top

	create-glyph 'latinUpsilon2' 0x1B2 : glyph-proc
		include : MarkSet.e
		include : LatinUpsilon2Shape [DivFrame 1] CAP ArchDepthA ArchDepthB

	create-glyph 'latinupsilon2' 0x28B : glyph-proc
		include : MarkSet.e
		include : LatinUpsilon2Shape [DivFrame 1] XH SmallArchDepthA SmallArchDepthB

	derive-glyphs 'uWithLightCentralizationStroke' null 'u' : function [src gr] : glyph-proc
		include : MarkSet.p
		include : refer-glyph src
		local fine      : AdviceStroke 4
		local outStand  : SB * 0.75 + fine * 0.25
		local outStandY : SmallArchDepthB / 2 - Descender * 0.6
		local yTurn     : SmallArchDepthB / 2
		include : difference
			dispiro
				widths.lhs fine
				corner (SB + outStand) (yTurn + outStandY)
				corner (SB - outStand) (yTurn - outStandY)
			spiro-outline
				corner (SB - O) XH
				curl (SB - O) SmallArchDepthB
				arcvh
				g4   (Middle + CorrectionOMidS) (-O)
				archv
				flat (RightSB + O) SmallArchDepthA
				corner (RightSB + O) XH
		if SLAB : begin
			include : LeftwardTopSerif SB XH SideJut

	glyph-block-import Letter-Blackboard : BBS BBD BBBarRight
	create-glyph 'mathbb/U' 0x1D54C : glyph-proc
		include : MarkSet.capital
		include : HBarTop SB (SB + BBD) CAP BBS
		include : UShape [DivFrame 1] CAP 0
			stroke -- BBS
		include : intersection
			VBarLeft (SB + BBD) 0 CAP BBS
			UArcT spiro-outline [DivFrame 1] CAP 0
				stroke -- BBS
				oper -- true
				offset -- 1

	create-glyph 'mathbb/u' 0x1D566 : glyph-proc
		local df : DivFrame 1 2
		include : df.markSet.e
		include [refer-glyph 'mathbb/n']
		include : FlipAround Middle (XH / 2)

	CreateAccentedComposition 'uDieresis' 0xFC 'u' 'dieresisAbove'
	CreateAccentedComposition 'uLongBarOver' 0x289 'u' 'longBarOver'
	CreateAccentedComposition 'smcpUStroke' 0x1D7E 'smcpU' 'longBarOver'

	# Sideways dieresis for U+1D1E
	derive-glyphs "uDieresisSidewaysMark" null "dieresisAboveAlwaysUpright" : function [gns] : glyph-proc
		local ww : Width * para.diversityM
		set-width 0
		include : PointingTo ww XH ww 0 : function [] : glyph-proc
			include : refer-glyph gns
			include : Translate (XH / 2 + Width / 2) (ww - SB - XH - AccentHeight)
			include : Translate 0 (SB / 2)

	CreateAccentedComposition 'uDieresisSideways' 0x1D1E 'uDieresisSidewaysBase' 'uDieresisSidewaysMark'
