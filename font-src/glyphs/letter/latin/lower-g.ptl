$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Lower-G : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : DToothlessRise DMBlend FlatHookDepth

	create-glyph 'g.doubleStorey' : glyph-proc
		include : MarkSet.p
		local obot : XH * DesignParameters.gBarPos - O - Stroke * 0.4
		include : OShape XH obot SB (RightSB - 0.3 * SB)

		local gleftx  ([mix 0 SB 0.85] + OX)
		local grightx ([mix Width RightSB 0.825] - OX)
		local groundy : Math.round : [mix Descender (XH * DesignParameters.gBarPos) 0.64] + HalfStroke
		local gtipy : [mix groundy (obot + Stroke + O) 1.005] - Stroke * CThin
		include : dispiro
			g4.left.start [mix SB RightSB 0.4] gtipy [widths 0 (Stroke * CThin)]
			g4 ([mix SB RightSB 0.0575] + Stroke * 0.85) [mix groundy gtipy 0.5] [widths.rhs (Stroke * [mix CThin 1 0.5])]
			flat [mix SB RightSB 0.435] groundy [widths 0 Stroke]
			curl [mix RightSB SB 0.435] groundy
			archv 4
			g4 grightx [mix (Descender + O) groundy (1.06 * SmallArchDepthA / (SmallArchDepthA + SmallArchDepthB))]
			arcvh
			g4 (Middle + CorrectionOMidS) (Descender + O)
			archv
			g4 gleftx [mix (Descender + O) groundy (1.06 * SmallArchDepthB / (SmallArchDepthA + SmallArchDepthB))]
			arcvh
			g4 [mix SB RightSB 0.435] groundy [heading Rightward]
		local gm : mix SB (RightSB - 0.3 * SB) 0.5
		include : spiro-outline
			corner (RightSB + 0.25 * SB - OX) XH
			corner (RightSB + 0.25 * SB - OX) (XH - Stroke)
			corner gm  (XH - Stroke - O)
			corner gm  XH

		set-base-anchor 'overlay' Middle [mix (Descender + O) groundy 0.5]

	create-glyph 'g.openDoubleStorey' : glyph-proc
		include : MarkSet.p
		local obot : XH * DesignParameters.gBarPos - O - Stroke * 0.4
		include : OShape XH obot SB (RightSB - 0.3 * SB)

		local gleftx  ([mix 0 SB 0.85] + OX)
		local grightx ([mix Width RightSB 0.825] - OX)
		local groundy : Math.round : [mix Descender (XH * DesignParameters.gBarPos) 0.64] + HalfStroke
		local gtipy : [mix groundy (obot + Stroke + O) 1.005] - Stroke * CThin
		include : dispiro
			g4.left.start [mix SB RightSB 0.4] gtipy [widths 0 (Stroke * CThin)]
			g4 ([mix SB RightSB 0.0575] + Stroke * 0.85) [mix groundy gtipy 0.5] [widths.rhs (Stroke * [mix CThin 1 0.5])]
			flat [mix SB RightSB 0.435] groundy [widths 0 Stroke]
			curl [mix RightSB SB 0.435] groundy
			archv 4
			g4 grightx [mix (Descender + O) groundy (1.06 * SmallArchDepthA / (SmallArchDepthA + SmallArchDepthB))]
			hookend (Descender + O)
			g4 gleftx [mix (Descender + O) groundy (1.06 * SmallArchDepthB / (SmallArchDepthA + SmallArchDepthB))]
		local gm : mix SB (RightSB - 0.3 * SB) 0.5
		include : spiro-outline
			corner (RightSB + 0.25 * SB - OX) XH
			corner (RightSB + 0.25 * SB - OX) (XH - Stroke)
			corner gm  (XH - Stroke - O)
			corner gm  XH

		set-base-anchor 'overlay' Middle [mix (Descender + O) groundy 0.5]

	define SingleStorey : namespace
		export : define [RoundHookT sink df yTop offset sw] : sink
			widths.rhs sw
			[if (sink == spiro-outline) corner flat] (df.rightSB - offset) yTop [heading Downward]
			curl (df.rightSB - offset) (Descender + SmallArchDepthA)
			hookend (Descender + O + offset)
			g4 (df.leftSB + offset) (Descender + SHook)
			if (sink == spiro-outline) {[corner df.leftSB XH]} {}

		export : define [RoundHook df y0] : RoundHookT dispiro df y0 0 Stroke
		export : define [FlatHook df y0] : begin
			local hd : FlatHookDepth df (9 / 8)
			local xTerminal : Math.min (df.rightSB - hd.x - 0.1) : mix df.leftSB df.rightSB (1 / 5)
			return : dispiro
				widths.rhs
				flat df.rightSB y0 [heading Downward]
				curl df.rightSB (Descender + hd.y)
				arcvh.superness DesignParameters.tightHookSuperness
				flat (df.rightSB - hd.x) Descender
				curl xTerminal Descender [heading Leftward]

		export : define [SeriflessBody df top] : glyph-proc
			include : OBarRightShape (top -- top) (left -- df.leftSB) (right -- df.rightSB)

		export : define [SerifedBody df top] : glyph-proc
			include : OBarRightShape (top -- top) (left -- df.leftSB) (right -- df.rightSB)
			include : tagged 'serifRT' : RightwardTopSerif df.rightSB top SideJut

		export : define [EarlessCornerBody df top] : glyph-proc
			include : OBarLeftToothlessShape
				top -- top
				left -- df.leftSB
				right -- df.rightSB
				rise -- DToothlessRise
				mBlend -- DMBlend
			include : FlipAround df.middle (top / 2)

		export : define [EarlessRoundedBody df top] : glyph-proc
			include : OBarLeftRoundedShape
				top -- top
				left -- df.leftSB
				right -- df.rightSB
				yTerminal -- (SmallArchDepthB - O)
			include : FlipAround df.middle (top / 2)

	define SingleStoreyConfig : object
		singleStoreySerifless                 { SingleStorey.SeriflessBody      SingleStorey.RoundHook 0               }
		singleStoreySerifed                   { SingleStorey.SerifedBody        SingleStorey.RoundHook 0               }
		singleStoreyEarlessCorner             { SingleStorey.EarlessCornerBody  SingleStorey.RoundHook DToothlessRise  }
		singleStoreyEarlessCornerHTB          { SingleStorey.EarlessCornerBody  SingleStorey.RoundHook 0               }
		singleStoreyEarlessRounded            { SingleStorey.EarlessRoundedBody SingleStorey.RoundHook SmallArchDepthB }
		singleStoreyEarlessRoundedHTB         { SingleStorey.EarlessRoundedBody SingleStorey.RoundHook 0               }
		singleStoreyFlatHookSerifless         { SingleStorey.SeriflessBody      SingleStorey.FlatHook  0               }
		singleStoreyFlatHookSerifed           { SingleStorey.SerifedBody        SingleStorey.FlatHook  0               }
		singleStoreyEarlessCornerFlatHook     { SingleStorey.EarlessCornerBody  SingleStorey.FlatHook  DToothlessRise  }
		singleStoreyEarlessCornerFlatHookHTB  { SingleStorey.EarlessCornerBody  SingleStorey.FlatHook  0               }
		singleStoreyEarlessRoundedFlatHook    { SingleStorey.EarlessRoundedBody SingleStorey.FlatHook  SmallArchDepthB }
		singleStoreyEarlessRoundedFlatHookHTB { SingleStorey.EarlessRoundedBody SingleStorey.FlatHook  0               }

	foreach { suffix { bodyShape hookShape hookStart } } [Object.entries SingleStoreyConfig] : do
		create-glyph "g.\(suffix)" : glyph-proc
			define df : DivFrame 1
			include : df.markSet.p
			set-base-anchor 'overlay' Middle (XH / 2)
			include : bodyShape df XH
			include : hookShape df (XH - hookStart)
		create-glyph "GScript.\(suffix)" : glyph-proc
			define df : DivFrame 1
			include : df.markSet.capDesc
			set-base-anchor 'overlay' Middle (CAP / 2)
			include : bodyShape df CAP
			include : hookShape df (CAP - hookStart)

	select-variant 'g' 'g'
	link-reduced-variant 'g/sansSerif' 'g' MathSansSerif
	turned 'turng' 0x1D77 'g' Middle [mix Descender XH 0.5]

	select-variant 'gScript/hookTopBase' null (shapeFrom -- 'g')
	select-variant 'gScript' 0x261 (shapeFrom -- 'g')
		follow -- [if SLAB 'gScript/slabSerif' 'gScript/sansSerif']
	select-variant 'GScript' 0xA7AC
		follow -- [if SLAB 'gScript/slabSerif' 'gScript/sansSerif']

	alias 'cyrl/de.SRB' null 'gScript'
	alias 'cyrl/de.BGR' null 'gScript'

	derive-composites 'gScriptHookTop' 0x260 'gScript/hookTopBase'
		VerticalHook (RightSB - HalfStroke * HVContrast) XH HookX (-Hook) nothing (yExtension -- O)

	glyph-block-import Letter-Blackboard : BBS BBD BBBarRight
	create-glyph 'mathbb/g' 0x1D558 : glyph-proc
		include : MarkSet.p
		include : intersection
			OShapeOutline.NoOvershoot XH 0 SB (RightSB - BBD - BBS * HVContrast)
			VBarLeft (SB + BBD + OX) 0 XH BBS
		include : OBarRightShape
			right -- RightSB - BBD
			top  -- XH
			stroke -- BBS
		include : SingleStorey.RoundHookT dispiro [DivFrame 1] XH 0 BBS
		include : HBarTop (RightSB - BBD) RightSB XH BBS
		include : intersection
			VBarRight (RightSB - BBD) Descender XH BBS
			SingleStorey.RoundHookT spiro-outline [DivFrame 1] XH 1 BBS

	do
		define l : mix 0 SB 0.3
		define r : mix Width RightSB 0.3
		define bwDoubleStorey : Math.min [AdviceStroke 5] (0.5 / 3 * (CAP - Stroke * 4))
		define bwSingleStorey : AdviceStroke2 2 4 XH
		define [derive suffix bw] : create-glyph "gbar.\(suffix)" : glyph-proc
			include [refer-glyph "g.\(suffix)"] AS_BASE
			include : HBar l r [query-glyph "g.\(suffix)"].baseAnchors.overlay.y bw

		derive 'doubleStorey'                       bwDoubleStorey
		derive 'openDoubleStorey'                   bwDoubleStorey
		derive 'singleStoreySerifless'              bwSingleStorey
		derive 'singleStoreySerifed'                bwSingleStorey
		derive 'singleStoreyEarlessCorner'          bwSingleStorey
		derive 'singleStoreyEarlessRounded'         bwSingleStorey
		derive 'singleStoreyFlatHookSerifless'      bwSingleStorey
		derive 'singleStoreyFlatHookSerifed'        bwSingleStorey
		derive 'singleStoreyEarlessCornerFlatHook'  bwSingleStorey
		derive 'singleStoreyEarlessRoundedFlatHook' bwSingleStorey

		select-variant "gbar" 0x1E5 (follow -- 'g')