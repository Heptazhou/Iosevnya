$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Upper-F : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	glyph-block-export xMidBarShrink
	define [xMidBarShrink] : [Math.max HalfStroke ((RightSB - SB) * 0.15)] + [if SLAB (Stroke * 0.25) 0]
	glyph-block-export yMidBar
	define [yMidBar top y] : top * [fallback y : DesignParameters.upperEBarPos SLAB]

	glyph-block-export EFVJutLength
	define [EFVJutLength top pyBar stroke] : begin
		local jutTop : Math.min VJut
			top - [mix (top - stroke) ([yMidBar top pyBar] + stroke / 2) 0.5]
		local jutBot : Math.min VJut
			mix stroke ([yMidBar top pyBar] - stroke / 2) 0.5
		return { jutTop jutBot }

	define xFBarLeft : SB * 1.5
	define xFBarRight : Width - SB * 1.5

	define [FShape] : params [top pyBar serifLT serifLB serifV [stroke : AdviceStroke2 2 3 top]] : glyph-proc
		include : VBarLeft (xFBarLeft) 0 top stroke
		include : HBarTop (xFBarLeft - O) RightSB top stroke
		include : HBar (xFBarLeft - O) (RightSB - [xMidBarShrink]) [yMidBar top pyBar] stroke
		if serifLT : include : LeftwardTopSerif xFBarLeft top SideJut
		if serifLB : begin
			include : tagged 'serifBottom' : LeftwardBottomSerif xFBarLeft 0 SideJut
			include : tagged 'serifBottom' : RightwardBottomSerif (xFBarLeft + HalfStroke * HVContrast) 0 MidJutSide
		if serifV : begin
			local { jutTop jutBot } : EFVJutLength top pyBar stroke
			include : DownwardRightSerif RightSB top jutTop

	define [RevFShape] : params [top pyBar serifRT serifRB serifV [stroke : AdviceStroke2 2 3 top]] : glyph-proc
		include : VBarRight (xFBarRight) 0 top stroke
		include : HBarTop SB (xFBarRight + O) top stroke
		include : HBar (SB + [xMidBarShrink]) (xFBarRight + O) [yMidBar top pyBar] stroke
		if serifRT : include : RightwardTopSerif xFBarRight top SideJut
		if serifRB : begin
			include : tagged 'serifBottom' : RightwardBottomSerif xFBarRight 0 SideJut
			include : tagged 'serifBottom' : LeftwardBottomSerif (xFBarRight - HalfStroke * HVContrast) 0 MidJutSide
		if serifV : begin
			local { jutTop jutBot } : EFVJutLength top pyBar stroke
			include : DownwardLeftSerif SB top jutTop


	define FConfig : object
		serifless      { false false false }
		topLeftSerifed { true false false  }
		serifed        { true true true    }

	foreach { suffix { lt lb v } } [Object.entries FConfig] : do
		create-glyph "F.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : FShape CAP (serifLT -- lt) (serifLB -- lb) (serifV -- v)

		create-glyph "smcpF.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : FShape XH (serifLT -- lt) (serifLB -- lb) (serifV -- v)

	select-variant 'F' 'F'
	link-reduced-variant 'F/sansSerif' 'F' MathSansSerif
	select-variant 'smcpF' 0xA730 (follow -- 'F')

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/F' 0x1D53D : glyph-proc
		include : MarkSet.capital
		include : union
			VBarLeft (xFBarLeft + BBD) 0 CAP BBS
			HBarBottom xFBarLeft (xFBarLeft + BBD) 0 BBS
			difference
				FShape CAP (stroke -- BBS)
				Rect (CAP - BBS) BBS (xFBarLeft + BBS * HVContrast) (xFBarLeft + BBD)

	turned 'turnF'     0x2132 'F'     Middle (CAP / 2)
	turned 'turnSmcpF' 0x214E 'smcpF' Middle (XH / 2)

	create-glyph 'currency/frenchFrancSign' 0x20A3 : glyph-proc
		include : refer-glyph "F"
		include : HOverlayBar (SB * 0.5) (SB * 3 + Stroke * HVContrast) [mix 0 XH 0.4]

	derive-glyphs 'Fltail' 0x191 'F' : lambda [src sel] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : MarkSet.if
		eject-contour 'serifBottom'
		include : VerticalHook (SB * 1.5 + HalfStroke * HVContrast) 0 (-HookX) Hook
