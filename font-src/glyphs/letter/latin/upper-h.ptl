$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Upper-H : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Blackboard : BBS BBD
	glyph-block-import Letter-Shared : SetGrekUpperTonos
	glyph-block-import Letter-Shared-Shapes : SerifFrame RightwardTailedBar
	glyph-block-import Letter-Shared-Shapes : CyrDescender CyrTailDescender

	define SLAB-NONE                   0
	define SLAB-TOP-LEFT               1
	define SLAB-TOP-LEFT-BOTTOM-RIGHT  2
	define SLAB-TAILED-CYRILLIC        3
	define SLAB-ALL                    4
	define SLAB-ALL-BGR                5
	define SLAB-TAILED-CYRILLIC-BGR    6

	define [HSerifs slabType t b l r sw] : begin
		local sf : SerifFrame t b l r (sw -- [fallback sw Stroke])
		return : match slabType
			[Just SLAB-NONE]   : glyph-proc
			[Just SLAB-TOP-LEFT] : begin sf.lt.outer
			[Just SLAB-TOP-LEFT-BOTTOM-RIGHT] : composite-proc sf.lt.outer sf.rb.outer
			[Just SLAB-TAILED-CYRILLIC] : composite-proc sf.lt.full sf.rt.full sf.lb.full
			[Just SLAB-ALL] : composite-proc sf.lt.full sf.rt.full sf.lb.full sf.rb.full
			[Just SLAB-ALL-BGR] : composite-proc sf.lt.outer sf.rt.inner sf.lb.full sf.rb.full
			[Just SLAB-TAILED-CYRILLIC-BGR] : composite-proc sf.lt.outer sf.rt.inner sf.lb.full

	define [HShape l r top sw] : glyph-proc
		include : tagged 'strokeL' : VBarLeft l 0 top [fallback sw Stroke]
		include : tagged 'strokeR' : VBarRight r 0 top [fallback sw Stroke]
		include : HBar (l - O) (r + O) (top * HBarPos) [fallback sw Stroke]

	define [TailedHShape l r top sw] : glyph-proc
		include : tagged 'strokeL' : VBarLeft l 0 top [fallback sw Stroke]
		include : tagged 'strokeR' : RightwardTailedBar r 0 top (sw -- [fallback sw Stroke])
		include : HBar (l - O) (r + O) (top * HBarPos) [fallback sw Stroke]

	define [EnGheShape Body df top slabType vSlab] : glyph-proc
		local sw : AdviceStroke 2.75
		local xRightBar : Math.min (Width - df.leftSB) : if SLAB
			[mix df.rightSB df.leftSB 0.35] + df.mvs / 2 * HVContrast
			mix df.rightSB df.leftSB 0.2
		local xTopRight : mix df.width df.rightSB [if SLAB 0.25 0.375]

		include : Body df.leftSB xRightBar top sw
		include : HBarTop (xRightBar + O) xTopRight top

		include : HSerifs slabType top 0 df.leftSB xRightBar sw
		if vSlab : include : DownwardRightSerif xTopRight top VJut (df.mvs / HVContrast)

	define [HwairShape df top slabType] : glyph-proc
		include : VBarLeft df.leftSB 0 CAP df.mvs
		include : HBar SB df.middle (CAP / 2)
		include : dispiro
			widths.lhs df.mvs
			flat (df.middle - df.mvs * 0.5 * HVContrast) CAP [heading Downward]
			curl (df.middle - df.mvs * 0.5 * HVContrast) (SmallArchDepthB * 0.6 * df.div)
			arcvh
			g4 [mix (df.middle - df.mvs * 0.5 * HVContrast) df.rightSB 0.5] O [heading Rightward]
			archv
			flat df.rightSB (SmallArchDepthA * 0.6 * df.div)
			curl df.rightSB XH [heading Upward]
		include : HSerifs slabType top 0 df.leftSB (df.middle + 0.5 * df.mvs * HVContrast) df.mvs

		local sf2 : SerifFrame XH 0 (df.middle - df.mvs * 0.5 * HVContrast) df.rightSB df.mvs
		if (slabType === SLAB-ALL || slabType === SLAB-TAILED-CYRILLIC) : include sf2.rt.full

	define HConfig : object
		serifless                        { HShape       SLAB-NONE                  false }
		tailed                           { TailedHShape SLAB-NONE                  false }
		topLeftSerifed                   { HShape       SLAB-TOP-LEFT              false }
		tailedTopLeftSerifed             { TailedHShape SLAB-TOP-LEFT              false }
		topLeftBottomRightSerifed        { HShape       SLAB-TOP-LEFT-BOTTOM-RIGHT true  }
		serifed                          { HShape       SLAB-ALL                   true  }
		tailedSerifed                    { TailedHShape SLAB-TAILED-CYRILLIC       true  }
		serifedExceptBottomRight         { HShape       SLAB-TAILED-CYRILLIC       true  }
		serifedBGR                       { HShape       SLAB-ALL-BGR               true  }
		tailedSerifedBGR                 { TailedHShape SLAB-TAILED-CYRILLIC-BGR   true  }

	foreach { suffix { Body slabType enGheVSlab } } [Object.entries HConfig] : do
		create-glyph "H.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : Body SB RightSB CAP
			include : HSerifs slabType CAP 0 SB RightSB

		create-glyph "grek/Eta.\(suffix)" : glyph-proc
			include [refer-glyph "H.\(suffix)"] AS_BASE ALSO_METRICS
			include : SetGrekUpperTonos [if (slabType === SLAB-NONE) 0 (-SideJut)]

		create-glyph "smcpH.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Body SB RightSB  XH
			include : HSerifs slabType XH 0 SB RightSB

		create-glyph "halfH.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : Body SB RightSB CAP
			eject-contour 'strokeR'
			include : HSerifs slabType CAP 0 SB RightSB
			eject-contour 'serifRT'
			eject-contour 'serifRB'

		create-glyph "halfSmcpH.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Body SB RightSB XH
			eject-contour 'strokeR'
			include : HSerifs slabType XH 0 SB RightSB
			eject-contour 'serifRT'
			eject-contour 'serifRB'

		create-glyph "cyrl/EnGhe.\(suffix)" : glyph-proc
			define df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital
			include : EnGheShape Body df CAP slabType enGheVSlab

		create-glyph "cyrl/enghe.\(suffix)" : glyph-proc
			define df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e
			include : EnGheShape Body df XH slabType enGheVSlab

		create-glyph "Hwair.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital
			include : HwairShape df CAP slabType

	select-variant 'H' 'H'
	link-reduced-variant 'H/sansSerif' 'H' MathSansSerif
	select-variant 'grek/Eta' 0x397 (follow -- 'H')
	link-reduced-variant 'grek/Eta/sansSerif' 'grek/Eta' MathSansSerif (follow -- 'H/sansSerif')
	alias 'cyrl/En' 0x41D 'H'
	select-variant 'halfH' 0x2C75
	alias 'grek/Heta' 0x370 'halfH'

	select-variant 'smcpH' 0x29C (follow -- 'H')
	select-variant 'halfSmcpH' 0x2C76 (follow -- 'halfH')
	select-variant 'cyrl/en' 0x43D (shapeFrom -- 'smcpH')
	select-variant 'cyrl/en/descenderBase' (shapeFrom -- 'smcpH')
	select-variant 'cyrl/en.BGR' (shapeFrom -- 'smcpH')
	alias 'grek/heta' 0x371 'halfSmcpH.serifless'

	derive-composites 'cyrl/EnDescender' 0x4A2 'cyrl/En' [CyrDescender RightSB]
	derive-composites 'cyrl/enDescender' 0x4A3 'cyrl/en/descenderBase' [CyrDescender RightSB]

	derive-composites 'cyrl/EnTail' 0x4C9 'cyrl/En' [CyrTailDescender RightSB]
	derive-composites 'cyrl/enTail' 0x4CA 'cyrl/en/descenderBase' [CyrTailDescender RightSB]

	select-variant 'cyrl/EnGhe' 0x4A4 (follow -- 'H')
	select-variant 'cyrl/enghe' 0x4A5 (follow -- 'cyrl/en')

	select-variant 'Hwair' 0x1F6

	create-glyph 'mathbb/H' 0x210D : glyph-proc
		include : MarkSet.capital
		include : VBarLeft  SB 0 CAP BBS
		include : VBarRight RightSB 0 CAP BBS
		include : VBarLeft  (SB + BBD) 0 CAP BBS
		include : VBarRight (RightSB - BBD) 0 CAP BBS
		include : HBar (SB + BBD) (RightSB - BBD)  (CAP * HBarPos) BBS
		include : HBarTop SB (SB + BBD) CAP BBS
		include : HBarTop (RightSB - BBD) RightSB CAP BBS
		include : HBarBottom SB (SB + BBD) 0 BBS
		include : HBarBottom (RightSB - BBD) RightSB 0 BBS

	derive-composites 'Hbar' 0x126 'H'
		HOverlayBar [mix SB 0 0.7] [mix RightSB Width 0.7] (CAP * 0.725)

	derive-composites 'smcpHbar' null 'smcpH'
		HOverlayBar [mix SB 0 0.7] [mix RightSB Width 0.7] (XH * 0.725)

	derive-glyphs 'HCedilla' 0x1E28 'H' : lambda [src gr] : glyph-proc
		include [refer-glyph 'cedillaBelow']
		include : Translate (Width + SB - Middle + HalfStroke * HVContrast) 0
		include [refer-glyph src]
		include : MarkSet.if

	define [DProcCapitalHeng src sel] : glyph-proc
		include : MarkSet.if
		include : refer-glyph src
		eject-contour 'serifRB'
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	define [DProcSmallHeng src sel] : glyph-proc
		include : MarkSet.p
		include : refer-glyph src
		eject-contour 'serifRB'
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	derive-glyphs 'Heng' 0xA726 'H' DProcCapitalHeng
	derive-glyphs 'HengSmcp' null 'smcpH' DProcSmallHeng
	derive-glyphs 'cyrl/EnHook' 0x4C7 'cyrl/En' DProcCapitalHeng
	derive-glyphs 'cyrl/enHook' 0x4C8 'cyrl/en/descenderBase' DProcSmallHeng
