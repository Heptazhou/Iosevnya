$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-C : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared : CreateAccentedComposition
	glyph-block-import Letter-Shared-Shapes : SerifFrame CurlyTail DToothlessRise ArcStartHookTop
	glyph-block-import Letter-Shared-Shapes : SerifedArcStart_RtlLhs SerifedArcStart_LtrRhs
	glyph-block-import Letter-Shared-Shapes : SerifedArcEnd_LtrLhs SerifedArcEnd_RtlRhs
	glyph-block-import Letter-Shared-Shapes : ArcStartSerifL ArcStartSerifR
	glyph-block-import Letter-Shared-Shapes : ArcEndSerifL ArcEndSerifR
	glyph-block-import Letter-Shared-Shapes : ArcStartInwardSerifL ArcStartInwardSerifR
	glyph-block-import Letter-Shared-Shapes : ArcEndInwardSerifL ArcEndInwardSerifR
	glyph-block-import Letter-Shared-Shapes : InwardSlabArcStart_RtlLhs
	glyph-block-import Letter-Blackboard : BBS BBD

	define SLAB-NONE       0
	define SLAB-CLASSICAL  1
	define SLAB-INWARD     2

	define [CShapeT sink offset df top bot ada adb hook sw] : sink
		widths.lhs sw
		g4 df.rightSB (top - [fallback hook Hook])
		hookstart (top - O - offset)
		flat (df.leftSB + OX + offset) (top - ada)
		curl (df.leftSB + OX + offset) (bot + adb)
		hookend (bot + O + offset)
		g4 df.rightSB (bot + [fallback hook Hook])

	define [SlabCShapeT sink offset df top bot ada adb hook sw origBar] : sink
		SerifedArcStart_RtlLhs (df.rightSB - offset) df.middle top sw [fallback hook Hook] origBar
		flat (df.leftSB + OX + offset) (top - ada)
		curl (df.leftSB + OX + offset) (bot + adb)
		hookend (bot + O + offset)
		g4 df.rightSB (bot + [fallback hook Hook])

	define [BiSlabCShapeT sink offset df top bot ada adb hook sw origBar] : sink
		SerifedArcStart_RtlLhs (df.rightSB - offset) df.middle top sw [fallback hook Hook] origBar
		flat (df.leftSB + OX + offset) (top - ada)
		curl (df.leftSB + OX + offset) (bot + adb)
		SerifedArcEnd_LtrLhs (df.rightSB - offset) df.middle bot sw [fallback hook Hook] origBar

	define [UniInwardSlabCShapeT sink offset df top bot ada adb hook sw origBar] : sink
		widths.lhs sw
		g4 df.rightSB (top - DToothlessRise)
		g4 (df.middle - CorrectionOMidX * sw) (top - O - offset)
		archv
		flat (df.leftSB + OX + offset) (top - ada)
		curl (df.leftSB + OX + offset) (bot + adb)
		hookend (bot + O + offset)
		g4 df.rightSB (bot + [fallback hook Hook])

	define [BiInwardSlabCShapeT sink offset df top bot ada adb hook sw origBar] : sink
		widths.lhs sw
		g4 df.rightSB (top - DToothlessRise)
		g4 (df.middle - CorrectionOMidX * sw) (top - O - offset)
		archv
		flat (df.leftSB + OX + offset) (top - ada)
		curl (df.leftSB + OX + offset) (bot + adb)
		arcvh
		g4 (df.middle + CorrectionOMidX * sw) (bot + O + offset)
		g4 df.rightSB (bot + DToothlessRise)

	define [RevCShape df top bot ada adb hook sw] : dispiro
		widths.rhs sw
		g4 df.leftSB (top - [fallback hook Hook])
		hookstart (top - O)
		flat (df.rightSB - OX) (top - ada)
		curl (df.rightSB - OX) (bot + adb)
		hookend (bot + O)
		g4 df.leftSB (bot + [fallback hook Hook])

	define [SlabRevCShape df top bot ada adb hook sw] : dispiro
		widths.rhs sw
		SerifedArcStart_LtrRhs df.leftSB df.middle top sw [fallback hook Hook]
		flat (df.rightSB - OX) (top - ArchDepthA)
		curl (df.rightSB - OX) (bot + ArchDepthB)
		hookend (bot + O)
		g4 df.leftSB (bot + [fallback hook Hook])

	define [BiSlabRevCShape df top bot ada adb hook sw] : dispiro
		widths.rhs sw
		SerifedArcStart_LtrRhs df.leftSB df.middle top sw [fallback hook Hook]
		flat (df.rightSB - OX) (top - ArchDepthA)
		curl (df.rightSB - OX) (bot + ArchDepthB)
		SerifedArcEnd_RtlRhs df.leftSB df.middle bot sw [fallback hook Hook]

	define [UniInwardSlabRevCShape df top bot ada adb hook sw] : dispiro
		widths.rhs sw
		g4 df.leftSB (top - DToothlessRise)
		g4 (df.middle - CorrectionOMidX * sw) (top - O)
		archv
		flat (df.rightSB - OX) (top - ArchDepthA)
		curl (df.rightSB - OX) (bot + ArchDepthB)
		hookend (bot + O)
		g4 df.leftSB (bot + [fallback hook Hook])

	define [BiInwardSlabRevCShape df top bot ada adb hook sw] : dispiro
		widths.rhs sw
		g4 df.leftSB (top - DToothlessRise)
		g4 (df.middle - CorrectionOMidX * sw) (top - O)
		archv
		flat (df.rightSB - OX) (top - ArchDepthA)
		curl (df.rightSB - OX) (bot + ArchDepthB)
		arcvh
		g4 (df.middle + CorrectionOMidX * sw) (bot + O)
		g4 df.leftSB (bot + DToothlessRise)

	glyph-block-export SansCShape
	define [SansCShape df top bot ada adb hook sw] : CShapeT dispiro 0 df top bot ada adb hook sw
	define [CShapeOutline df top bot ada adb hook sw] : CShapeT spiro-outline 1 df top bot ada adb hook sw
	define [SlabCShape df top bot ada adb hook sw] : SlabCShapeT dispiro 0 df top bot ada adb hook sw
	define [BiSlabCShape df top bot ada adb hook sw] : BiSlabCShapeT dispiro 0 df top bot ada adb hook sw
	define [UniInwardSlabCShape df top bot ada adb hook sw] : UniInwardSlabCShapeT dispiro 0 df top bot ada adb hook sw
	define [BiInwardSlabCShape df top bot ada adb hook sw] : BiInwardSlabCShapeT dispiro 0 df top bot ada adb hook sw

	define [AutoStartSerifR df sty top hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcStartSerifR df.rightSB top [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcStartInwardSerifR df.rightSB top [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [AutoStartSerifL df sty top hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcStartSerifL df.leftSB top [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcStartInwardSerifL df.leftSB top [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [AutoStartSerifRB df sty bot hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcEndSerifR df.rightSB bot [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcEndInwardSerifR df.rightSB bot [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [AutoStartSerifLB df sty bot hook sw] : match sty
		[Just SLAB-CLASSICAL] : ArcEndSerifL df.leftSB bot [fallback sw Stroke] [fallback hook Hook]
		[Just SLAB-INWARD]    : ArcEndInwardSerifL df.leftSB bot [fallback sw Stroke] [fallback hook Hook]
		__ : glyph-proc

	define [CCurlyTailShape slabType] : glyph-proc
		local sw : AdviceStroke2 2 3 XH
		local fine : AdviceStroke2 3 3 XH
		local rinner : ((XH * 0.45) - fine * 1.5) / 2
		local m1 : SB + O + sw * HVContrast
		local x2 : SB + sw * 0.3
		local y2 : -XH * 0.05

		include : dispiro
			match slabType
				[Just SLAB-CLASSICAL] : SerifedArcStart_RtlLhs RightSB Middle XH sw Hook
				[Just SLAB-INWARD] : InwardSlabArcStart_RtlLhs RightSB Middle XH sw Hook
				__ : list [g4 RightSB (XH - Hook) [widths.lhs sw]] [hookstart XH]
			flat (SB + OX) (XH - SmallArchDepthA)
			curl (SB + OX) SmallArchDepthB
			arcvh
			CurlyTail fine rinner m1 0 RightSB x2 y2

	local CConfig : object
		serifless               { SLAB-NONE      SLAB-NONE      SansCShape          RevCShape              }
		unilateralSerifed       { SLAB-CLASSICAL SLAB-NONE      SlabCShape          SlabRevCShape          }
		bilateralSerifed        { SLAB-CLASSICAL SLAB-CLASSICAL BiSlabCShape        BiSlabRevCShape        }
		unilateralInwardSerifed { SLAB-INWARD    SLAB-NONE      UniInwardSlabCShape UniInwardSlabRevCShape }
		bilateralInwardSerifed  { SLAB-INWARD    SLAB-INWARD    BiInwardSlabCShape  BiInwardSlabRevCShape  }

	foreach { suffix { sty styBot cShape revCShape } } [Object.entries CConfig] : do
		create-glyph "C.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : cShape [DivFrame 1] CAP 0 ArchDepthA ArchDepthB Hook Stroke
			include : AutoStartSerifR [DivFrame 1] sty CAP
			include : AutoStartSerifRB [DivFrame 1] styBot 0

		create-glyph "smcpC.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : cShape [DivFrame 1] XH 0 ArchDepthA ArchDepthB Hook Stroke
			include : AutoStartSerifR [DivFrame 1] sty XH
			include : AutoStartSerifRB [DivFrame 1] styBot 0

		create-glyph "revC.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : revCShape [DivFrame 1] CAP 0 ArchDepthA ArchDepthB Hook Stroke
			include : AutoStartSerifL [DivFrame 1] sty CAP
			include : AutoStartSerifLB [DivFrame 1] styBot 0

		create-glyph "CHookTop.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : cShape [DivFrame 1] CAP 0 ArchDepthA ArchDepthB Hook Stroke
			include : ArcStartHookTop RightSB CAP Stroke HookX Hook
			include : AutoStartSerifRB [DivFrame 1] styBot 0

		create-glyph "c.\(suffix)" : glyph-proc
			include : MarkSet.e
			set-base-anchor 'cvDecompose' 0 0
			include : cShape [DivFrame 1] XH 0 SmallArchDepthA SmallArchDepthB Hook Stroke
			include : AutoStartSerifR [DivFrame 1] sty XH
			include : AutoStartSerifRB [DivFrame 1] styBot 0

		create-glyph "revSmallC.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : revCShape [DivFrame 1] XH 0 SmallArchDepthA SmallArchDepthB Hook Stroke
			include : AutoStartSerifL [DivFrame 1] sty XH
			include : AutoStartSerifLB [DivFrame 1] styBot 0

		create-glyph "revSmallCSideways.\(suffix)" : glyph-proc
			local df : DivFrame (XH / Width) 2 (XH * 0.1 / SB)
			local top : Width - SB
			local p : mix 1 (Width / UPM) 0.5
			include : PointingTo Width XH Width 0 : function [] : glyph-proc
				include : cShape df top 0 ArchDepthA ArchDepthB (Hook * p) Stroke
				include : AutoStartSerifR df sty top (Hook * p)
				include : AutoStartSerifRB df styBot 0 (Hook * p)
				include : FlipAround df.middle (top / 2)
				include : Translate 0 (SB / 2)

		create-glyph "cHookTop.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : cShape [DivFrame 1] XH 0 SmallArchDepthA SmallArchDepthB Hook Stroke
			include : ArcStartHookTop RightSB XH Stroke HookX Hook
			include : AutoStartSerifRB [DivFrame 1] styBot 0

		create-glyph "cCurlyTail.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : CCurlyTailShape sty
			include : AutoStartSerifR [DivFrame 1] sty XH

		create-glyph "stretchedC.\(suffix)" : glyph-proc
			include : MarkSet.p
			include : cShape [DivFrame 1] XH Descender ArchDepthA ArchDepthB Hook Stroke
			include : AutoStartSerifR [DivFrame 1] sty XH
			include : AutoStartSerifRB [DivFrame 1] styBot Descender

		create-glyph "romanSixLateForm.\(suffix)" : glyph-proc
			include : MarkSet.if
			include : revCShape [DivFrame 1] CAP 0 ArchDepthA ArchDepthB Hook Stroke
			include : AutoStartSerifLB [DivFrame 1] styBot 0
			include : FlipAround Middle (CAP / 2)
			include : VBarRight RightSB Descender (Hook - O * 2)

		define [IotifiedEsShape fCapital df top ada adb] : glyph-proc
			local gap : (df.width - 2 * df.leftSB - 2.5 * df.mvs) * 0.375
			define divSub : (df.width - gap - df.mvs) / Width
			define dfSub : DivFrame divSub 2
			include : cShape dfSub top 0 ada adb Hook df.mvs
			include : AutoStartSerifR dfSub sty top Hook df.mvs
			include : AutoStartSerifRB dfSub styBot 0 Hook df.mvs

			include : Translate (Width * (df.div - divSub)) 0
			include : VBarLeft df.leftSB 0 top df.mvs
			include : HBar (df.leftSB - O) [mix df.leftSB df.rightSB (3 / 4)] (top / 2) df.mvs
			if SLAB : begin
				local sf : SerifFrame top 0 df.leftSB df.rightSB df.mvs
				if (df.width > para.refJut * 7) : begin
					include : tagged 'serifLT' sf.lt.full
					if (fCapital || [not para.isItalic]) : begin
						include : tagged 'serifLB' sf.lb.full
				: else : begin
					include : tagged 'serifLT' sf.lt.outer
					if (fCapital || [not para.isItalic]) : begin
						include : tagged 'serifLB' sf.lb.outer

		create-glyph "cyrl/iotified{E}.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital
			include : IotifiedEsShape true df CAP ArchDepthA ArchDepthB

		create-glyph "cyrl/iotified{e}.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e
			include : IotifiedEsShape false df XH SmallArchDepthA SmallArchDepthB

	select-variant 'C' 'C'
	link-reduced-variant 'C/sansSerif' 'C' MathSansSerif
	select-variant 'revC' 0x2183 (follow -- 'C')
	alias 'cyrl/Es' 0x421 'C'
	alias 'grek/lunateSigma' 0x3F9 'C'

	select-variant 'CTopSerifOnly' (shapeFrom -- 'C')

	select-variant 'CHookTop' 0x187
	select-variant 'romanSixLateForm' 0x2185
	select-variant 'smcpC' 0x1D04 (follow -- 'C')

	select-variant 'c' 'c'
	link-reduced-variant 'c/sansSerif' 'c' MathSansSerif
	select-variant 'revSmallC' 0x2184 (follow -- 'c')
	alias 'cyrl/es' 0x441 'c'
	alias 'grek/lunateSmallSigma' 0x3F2 'c.serifless'
	select-variant 'revSmallCSideways' 0x1D12 (follow -- 'c')

	select-variant 'cTopSerifOnly' (shapeFrom -- 'c')

	select-variant 'cCurlyTail' 0x255
	select-variant 'cHookTop' 0x188
	select-variant 'stretchedC' 0x297 (follow -- 'C')

	select-variant "cyrl/iotified{E}" 0x464 (follow -- 'C')
	select-variant "cyrl/iotified{e}" 0x465 (follow -- 'c')

	create-glyph 'mathbb/C' 0x2102 : glyph-proc
		include : MarkSet.capital
		include : SansCShape [DivFrame 1] CAP 0 ArchDepthA ArchDepthB Hook BBS
		include : intersection
			CShapeOutline [DivFrame 1] CAP 0 ArchDepthA ArchDepthB Hook BBS
			VBarLeft (SB + BBD) 0 CAP BBS

	create-glyph 'mathbb/c' 0x1D554 : glyph-proc
		include : MarkSet.capital
		include : SansCShape [DivFrame 1] XH 0 SmallArchDepthA SmallArchDepthB Hook BBS
		include : intersection
			CShapeOutline [DivFrame 1] XH 0 SmallArchDepthA SmallArchDepthB Hook BBS
			VBarLeft (SB + BBD + OX) 0 CAP BBS

	derive-glyphs 'currency/euroSign' 0x20AC 'C' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HOverlayBar [mix SB 0 0.7] [mix SB RightSB 0.7] (CAP * 0.4)
		include : HOverlayBar [mix SB 0 0.7] [mix SB RightSB 0.7] (CAP * 0.6)

	create-glyph 'currency/centSignBar.open' : glyph-proc
		set-width 0
		set-mark-anchor 'cvDecompose' 0 0
		include : dispiro
			widths.center [AdviceStroke 3]
			flat Middle (XH - HalfStroke)
			curl Middle (XH - Descender / 2) [heading Upward]
		include : dispiro
			widths.center [AdviceStroke 3]
			flat Middle (Descender / 2) [heading Upward]
			curl Middle HalfStroke

	create-glyph 'currency/centSignBar.through' : glyph-proc
		include [refer-glyph 'currency/centSignBar.open'] AS_BASE ALSO_METRICS

		define fine : AdviceStroke [StrokeWidthBlend 3 5]
		include : VBar Middle (XH - HalfStroke) (0 + HalfStroke) fine

	create-glyph 'currency/centSignBar.barInterrupted' : glyph-proc
		include [refer-glyph 'currency/centSignBar.open'] AS_BASE ALSO_METRICS

		define cofine : AdviceStroke 4
		define fine : AdviceStroke [StrokeWidthBlend 3 5]
		define gap : Math.max (XH / 8) [AdviceStroke2 6 6 XH]
		include : dispiro
			flat Middle (XH - HalfStroke)  [widths.center.heading cofine Downward]
			curl Middle (XH / 2 + gap / 2) [widths.center.heading fine Downward]
		include : dispiro
			flat Middle (HalfStroke)       [widths.center.heading cofine Upward]
			curl Middle (XH / 2 - gap / 2) [widths.center.heading fine Upward]

	select-variant 'currency/centSignBar' (follow -- 'cent')

	create-glyph 'currency/centSign' 0xA2 : glyph-proc
		include [refer-glyph 'c'] AS_BASE ALSO_METRICS
		include [refer-glyph 'currency/centSignBar']
		CvDecompose.set currentGlyph { 'c' 'currency/centSignBar' }

	turned 'turnC' 0x186 'C' Middle (CAP / 2)
	turned 'turnc' 0x254 'c' Middle (XH / 2)
	turned 'turnSmcpC' 0x1D10 'smcpC' Middle (XH / 2)
	alias 'grek/revLunateSigma' 0x3FD 'revC'
	alias 'grek/revLunateSmallSigma' 0x37B 'revSmallC.serifless'

	define [LunateSigmaShape k fRound kdr] : begin
		local halfDotWidth  : kdr * [Math.min DotRadius ((RightSB - SB - HVContrast * Stroke * 2) / 4)]
		local halfDotHeight : kdr * [Math.min DotRadius (halfDotWidth * k)]
		if fRound
		: then : return :OShapeOutline.NoOvershoot
			CAP / 2 + halfDotHeight
			CAP / 2 - halfDotHeight
			0 + halfDotWidth
			0 - halfDotWidth
			Stroke * halfDotWidth * 2 / Width
			ArchDepthAOf halfDotWidth (halfDotWidth * 2)
			ArchDepthBOf halfDotWidth (halfDotWidth * 2)
		: else : return : Rect
			CAP / 2 + halfDotHeight
			CAP / 2 - halfDotHeight
			0 + halfDotWidth
			0 - halfDotWidth
	foreach { suffix { DrawAt kdr } } [Object.entries DotVariants] : do
		create-glyph "grek/lunateSigmaDot.\(suffix)" : glyph-proc
			set-width 0
			set-mark-anchor 'slash' 0 (CAP / 2) 0 (CAP / 2)
			include : LunateSigmaShape 2 (DrawAt === DotAt) kdr
		create-glyph "grek/lunateSigmaDotSmall.\(suffix)" : glyph-proc
			set-width 0
			set-mark-anchor 'slash' 0 (CAP / 2) 0 (CAP / 2)
			include : LunateSigmaShape 1.5 (DrawAt === DotAt) kdr

	select-variant "grek/lunateSigmaDot"      (follow -- 'diacriticDot')
	select-variant "grek/lunateSigmaDotSmall" (follow -- 'diacriticDot')

	derive-composites 'grek/dotLunateSigma' 0x3FE 'grek/lunateSigma' 'grek/lunateSigmaDot'
	derive-composites 'grek/dotRevLunateSigma' 0x3FF 'grek/revLunateSigma' 'grek/lunateSigmaDot'
	derive-composites 'grek/dotLunateSmallSigma' 0x37C 'grek/lunateSmallSigma' 'grek/lunateSigmaDotSmall'
	derive-composites 'grek/dotRevLunateSmallSigma' 0x37D 'grek/revLunateSmallSigma' 'grek/lunateSigmaDotSmall'

	derive-glyphs 'Cbar' 0xA792 'C' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HOverlayBar (SB * 0.3) [mix (SB + Stroke) (RightSB - Stroke) 0.55] (CAP * OverlayPos)

	derive-glyphs 'cbar' 0xA793 'c' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HOverlayBar (SB * 0.3) [mix (SB + Stroke) (RightSB - Stroke) 0.55] (XH * OverlayPos)

	derive-glyphs 'cyrl/E' 0x42D 'revC' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HBar [mix SB RightSB 0.35] RightSB (CAP / 2)

	derive-glyphs 'cyrl/e' 0x44D 'revSmallC' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HBar [mix SB RightSB 0.35] RightSB (XH / 2)

	derive-glyphs 'cyrl/Ye' 0x404 'C' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HBar SB [mix RightSB SB 0.35] (CAP / 2) [AdviceStroke2 2 4 CAP]

	derive-glyphs 'cyrl/ye' 0x454 'c' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : HBar SB [mix RightSB SB 0.35] (XH / 2) [AdviceStroke2 2 4 XH]

	derive-glyphs 'cyrl/Koppa' 0x480 'CTopSerifOnly' : lambda [src gr] : glyph-proc
		include : MarkSet.if
		include : union [VBarRight (Middle + Stroke * HVContrast) Descender (Stroke / 2)] : difference
			refer-glyph src
			Rect (CAP / 2) Descender (Middle + Stroke * HVContrast) (Width * 4)
			Rect (XH / 2) [mix Stroke Hook 0.5] Middle (Width * 4)

	derive-glyphs 'cyrl/koppa' 0x481 'cTopSerifOnly' : lambda [src gr] : glyph-proc
		include : MarkSet.p
		include : union [VBarRight (Middle + Stroke * HVContrast) Descender (Stroke / 2)] : difference
			refer-glyph src
			Rect (XH / 2) Descender (Middle + Stroke * HVContrast) (Width * 4)
			Rect (XH / 2) [mix Stroke Hook 0.5] Middle (Width * 4)

	CreateAccentedComposition 'CCedilla' 0xC7 'C' 'cedillaBelow'
	CreateAccentedComposition 'cCedilla' 0xE7 'c' 'cedillaBelow'
