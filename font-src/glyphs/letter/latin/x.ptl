$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-X : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : ShoulderMidKnotRhs SerifFrame WithSerifOverflowMask
	glyph-block-import Letter-Shared-Shapes : DiagonalTailInnerRadius DiagonalTailF
	glyph-block-import Letter-Shared-Shapes : CyrDescender PalatalHook

	glyph-block-export HalfXStrand
	define [HalfXStrand stb fSlab _leftx lefty rightx righty turn pStraight tension _fine] : glyph-proc
		local sbCor : if stb ([StrokeWidthBlend 1 6] * OX * ([Math.abs (lefty - righty)] / CAP)) 0
		local leftx : _leftx + ([HSwToV HalfStroke] + [Math.max (-SideJut) sbCor]) * [if (rightx > _leftx) 1 (-1)]
		local fine  : (_fine || Stroke) * 0.5

		if stb : begin
			local hst : HalfStroke * [DiagCor (righty - lefty) (rightx - leftx) 0 0]
			local hse : HalfStroke * [Math.min 0.97 ([AdviceStroke 3] / Stroke)]
			local leftx2 : _leftx + ([HSwToV hst] + [Math.max (-SideJut) sbCor]) * [if (rightx > _leftx) 1 (-1)]
			include : dispiro
				corner leftx2 lefty [widths.heading hst hst [if (lefty < righty) Upward Downward]]
				corner rightx righty [widths.center : 2 * hse]

		: else : begin
			local height : Math.abs (lefty - righty)
			local slabClearance : if fSlab [AdviceStroke2 2 3 height] 0
			local turnyleft : mix lefty righty [if fSlab [Math.max turn (slabClearance / height)] turn]
			local cyleft : mix turnyleft righty tension
			local straightxleft : mix leftx rightx pStraight
			local straightyleft : mix cyleft righty pStraight
			include : dispiro
				widths.center
				flat leftx lefty [heading [if (lefty < righty) Upward Downward]]
				curl leftx turnyleft [heading [if (lefty < righty) Upward Downward]]
				quadControls 0 ((cyleft - turnyleft) / (straightyleft - turnyleft)) 24
				flat straightxleft straightyleft
				curl rightx righty

	glyph-block-export XStrand
	define [XStrand stb slab _leftx lefty _rightx righty turn pStraight tension] : glyph-proc
		local middlex : mix _leftx _rightx 0.5
		local middley : mix lefty righty 0.5

		include : HalfXStrand stb slab _leftx lefty middlex middley turn pStraight tension
		include : HalfXStrand stb slab _rightx righty middlex middley turn pStraight tension

	glyph-block-export XCursiveHalfShape
	define [XCursiveHalfShape] : with-params [top bottom left right [swEnd : AdviceStroke 2.75] [swMid : AdviceStroke 3] [kThin 0.55] [setMark false]] : glyph-proc
		local ada : ArchDepthAOf (ArchDepth * 0.8) (Width / 2)
		local adb : ArchDepthBOf (ArchDepth * 0.8) (Width / 2)

		define xCenterRight : left + [HSwToV swMid] / 2
		define xCenterLeft  : left - [HSwToV swMid] / 2
		define xTurn : mix (right - [HSwToV swEnd]) xCenterRight 0.5
		define hook1Depth : Hook + Stroke * 0.125
		define hook1StraightDepth : Math.min
			hook1Depth - swEnd * 1.125
			Math.max 1 : hook1Depth / 5 - swEnd / 4

		define fineMid : swMid * kThin
		define rIn : Math.max (0.4 * (right - left) - [HSwToV : 0.7 * Stroke]) [AdviceStroke 16]
		define flatHookDepth : 1.4 * (right - left) - swEnd - 1.5 * rIn

		define upperHalf : include : dispiro
			flat (xCenterRight - [HSwToV fineMid]) ([mix bottom top 0.5] + O) [widths.rhs.heading fineMid Upward]
			curl (xCenterRight - [HSwToV fineMid]) (top - ada)
			arcvh
			ShoulderMidKnotRhs xTurn (top - O) fineMid swEnd (+1) (-1)
			archv
			flat (right - OX) (top - hook1Depth + hook1StraightDepth) [heading Downward]
			curl (right - OX) (top - hook1Depth) [heading Downward]

		define lowerHalf : include : dispiro
			flat (xCenterRight - [HSwToV : 0.5 * fineMid]) ([mix bottom top 0.5] - O) [widths.center fineMid]
			curl (xCenterRight - [HSwToV : 0.5 * fineMid]) (bottom + [Math.min adb (swMid + rIn)])
			arcvh 16
			DiagonalTailF 1 [DivFrame 1] (xCenterRight - [HSwToV : 0.5 * Stroke] + TanSlope * rIn) bottom rIn 50 flatHookDepth Stroke

		if setMark : begin
			define lowerHalfLastKnot lowerHalf.rhsKnots.(lowerHalf.rhsKnots.length - 1)
			set-base-anchor 'cyrlDescenderAttach' lowerHalfLastKnot.x lowerHalfLastKnot.y

	define [XChanceryStrand sign leftX leftY rightX rightY sw] : begin
		local blendK1X : StrokeWidthBlend 0.58 0.65
		local blendK1Y   0.2
		local blendK2X   0.78
		local blendK2Y : StrokeWidthBlend 0.5 0.4

		local pStraightX : StrokeWidthBlend 0.3 0.35
		local pStraightY : StrokeWidthBlend 0.2 0.25

		local fine : [AdviceStroke 3] / Stroke * sw

		return : dispiro
			straight.right.start leftX  (leftY - sign * sw / 2) [widths.center sw]
			alsoThruThem {{blendK1X blendK1Y} {blendK2X blendK2Y}}
			flat [mix leftX rightX pStraightX] [mix leftY rightY pStraightY] [widths.center : mix sw fine 0.5]
			corner [mix leftX rightX 0.5] [mix leftY rightY 0.5] [widths.center fine]
			curl [mix leftX rightX (1 - pStraightX)] [mix leftY rightY (1 - pStraightY)] [widths.center : mix sw fine 0.5]
			alsoThruThem {{(1 - blendK2X) (1 - blendK2Y)} {(1 - blendK1X) (1 - blendK1Y)}}
			straight.right.end   rightX (rightY + sign * sw / 2) [widths.center sw]

	define Shape : namespace
		define [XBase fStraight fSlab top bottom turn tension] : composite-proc
			XStrand fStraight fSlab SB bottom RightSB top turn 0.4 tension
			XStrand fStraight fSlab SB top RightSB bottom turn 0.4 tension

		export : define [StraightBase fSlab top bottom turn tension]
			XBase true  fSlab top bottom turn tension
		export : define [CurlyBase    fSlab top bottom turn tension]
			XBase false fSlab top bottom turn tension

		export : define [CursiveBase fSerifs top bottom turn tension] : glyph-proc
			include : XCursiveHalfShape top bottom Middle RightSB
			include : FlipAround Middle [mix bottom top 0.5]
			include : XCursiveHalfShape top bottom Middle RightSB (setMark -- true)

		export : define [SemiChanceryStr fSlab top bottom turn tension] : union
			XChanceryStrand (+1) SB top RightSB bottom Stroke
			XStrand true fSlab SB bottom RightSB top turn 0.4 tension
		export : define [SemiChanceryCur fSlab top bottom turn tension] : union
			XChanceryStrand (+1) SB top RightSB bottom Stroke
			XStrand false fSlab SB bottom RightSB top turn 0.4 tension
		export : define [ChanceryBase fSlab top bottom turn tension] : union
			XChanceryStrand (+1) SB top RightSB bottom Stroke
			XChanceryStrand (-1) SB bottom RightSB top Stroke

		# Serifs
		export : define [FullSerifs top bot] : let [sf : SerifFrame.fromDf [DivFrame 1] top bot]
			composite-proc sf.lt.full sf.rt.full sf.lb.full sf.rb.full
		export : define [MotionSerifs top bot] : glyph-proc
			include : tagged 'serifLT' : HSerif.lt SB top SideJut
		export : define [MotionSerifsBilateral top bot] : glyph-proc
			include : tagged 'serifLT' : HSerif.lt SB top SideJut
			include : tagged 'serifRB' : HSerif.rb RightSB bot SideJut

	define Config : object
		straightSerifless              { Shape.StraightBase       null                        false }
		curlySerifless                 { Shape.CurlyBase          null                        false }
		cursive                        { Shape.CursiveBase        null                        false }
		semiChanceryStraight           { Shape.SemiChanceryStr    null                        false }
		semiChanceryCurly              { Shape.SemiChanceryCur    null                        false }
		chancery                       { Shape.ChanceryBase       null                        false }
		straightSerifed                { Shape.StraightBase       Shape.FullSerifs            true  }
		curlySerifed                   { Shape.CurlyBase          Shape.FullSerifs            true  }
		straightMotionSerifed          { Shape.StraightBase       Shape.MotionSerifs          false }
		curlyMotionSerifed             { Shape.CurlyBase          Shape.MotionSerifs          false }
		straightBilateralMotionSerifed { Shape.StraightBase       Shape.MotionSerifsBilateral false }
		curlyBilateralMotionSerifed    { Shape.CurlyBase          Shape.MotionSerifsBilateral false }

	foreach { suffix { baseShape serifShape fMaskBase} } [Object.entries Config] : do
		define [letterShape top bottom turn tension] : glyph-proc
			local base : baseShape fMaskBase top bottom turn tension
			include : WithSerifOverflowMask fMaskBase top bottom SB RightSB base
			if serifShape : include : serifShape top bottom

		create-glyph "X.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : letterShape CAP 0 0.1 0.28

		create-glyph "x.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : letterShape XH 0 0.1 0.20

		create-glyph "latn/chi.\(suffix)" : glyph-proc
			include : MarkSet.p
			include : letterShape XH Descender 0.1 0.20

		create-glyph "latn/Chi.\(suffix)" : glyph-proc
			include : MarkSet.capDesc
			include : letterShape CAP Descender 0.1 0.20

	select-variant 'X' 'X'
	link-reduced-variant 'X/sansSerif' 'X' MathSansSerif
	alias 'grek/Chi' 0x3A7 'X'
	alias-reduced-variant 'grek/Chi/sansSerif' 'grek/Chi' 'X/sansSerif' MathSansSerif
	alias 'cyrl/Ha' 0x425 'X'

	select-variant 'x' 'x'
	link-reduced-variant 'x/sansSerif' 'x' MathSansSerif
	select-variant 'cyrl/ha' 0x445 (shapeFrom -- 'x')

	select-variant 'grek/chi' 0x3C7 (shapeFrom -- 'latn/chi')
	link-reduced-variant 'grek/chi/sansSerif' 'grek/chi' MathSansSerif (shapeFrom -- 'latn/chi')
	select-variant 'latn/chi' 0xAB53 (follow -- 'x')
	select-variant 'latn/Chi' 0xA7B3 (follow -- 'X')


	define [AddDescender Ctor] : function [src sel] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		local attachAnchor currentGlyph.baseAnchors.cyrlDescenderAttach
		if attachAnchor
		: then : begin
			local attach : currentGlyph.gizmo.unapply attachAnchor
			include : Ctor.r attach.x 0 (yAttach -- attach.y)
		: else : begin
			local sw : Ctor.Sw Stroke
			include : Ctor.r
				x -- RightSB + SideJut + sw * TanSlope
				y -- 0
				xLink -- RightSB - [HSwToV HalfStroke]

	derive-glyphs 'cyrl/HaDescender' 0x4B2 'cyrl/Ha' [AddDescender CyrDescender]
	derive-glyphs 'cyrl/haDescender' 0x4B3 'cyrl/ha' [AddDescender CyrDescender]
	derive-glyphs 'cyrl/HaHook'      0x4FC 'cyrl/Ha' [AddDescender PalatalHook]
	derive-glyphs 'cyrl/haHook'      0x4FD 'cyrl/ha' [AddDescender PalatalHook]
	alias 'xPalatalHook' 0x1D8D 'cyrl/haHook'

	define [CyrlHaBarShape top] : HOverlayBar [mix SB RightSB 0.08] [mix SB RightSB 0.92] (top / 2)
	derive-composites 'cyrl/HaBar' 0x4FE 'cyrl/Ha' [CyrlHaBarShape CAP]
	derive-composites 'cyrl/haBar' 0x4FF 'cyrl/ha' [CyrlHaBarShape XH]

	glyph-block-import Letter-Blackboard : BBS BBD
	define [BBXShape l r top] : let [kDiag : DiagCorDs top (r - l) BBD] : union
		intersection
			Rect top 0 (-Width) (Width * 2)
			union
				ExtLineCenter 1 BBS l top (r - kDiag * BBD) 0
				ExtLineCenter 1 BBS (l + kDiag * BBD) top r 0
		HBar.t    l (l + kDiag * BBD) top BBS
		HBar.b r (r - kDiag * BBD) 0 BBS
		intersection
			Rect top 0 (-Width) (Width * 2)
			difference
				ExtLineCenter 1 BBS l 0 r top
				spiro-outline
					corner l top
					corner (l + kDiag * BBD) top
					corner r 0
					corner (r - kDiag * BBD) 0

	create-glyph 'mathbb/X' 0x1D54F : composite-proc [MarkSet.capital] [BBXShape SB RightSB CAP]
	create-glyph 'mathbb/x' 0x1D569 : composite-proc [MarkSet.e]       [BBXShape SB RightSB XH]
