$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Lower-A : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Shared-Metrics : markHalfStroke
	glyph-block-import Letter-Shared : CreateAccentedComposition CreateOgonekComposition
	glyph-block-import Letter-Shared-Shapes : RightwardTailedBar InvRightwardTailedBar
	glyph-block-import Letter-Shared-Shapes : DToothlessRise DMBlend RetroflexHook

	define DoubleStorey : namespace
		define ADoubleStoreyStroke : AdviceStroke2 2 3 XH
		define ADoubleStoreySmoothA : ArchDepthAOf (ArchDepth * [StrokeWidthBlend 0.9 0.81 ADoubleStoreyStroke]) Width
		define ADoubleStoreySmoothB : ArchDepthBOf (ArchDepth * [StrokeWidthBlend 0.9 0.81 ADoubleStoreyStroke]) Width

		define [ADoubleStoreyHookAndBarT sink y0 stroke] : glyph-proc
			local isMask : sink == spiro-outline
			include : sink
				widths.lhs stroke
				[if isMask corner flat] RightSB y0 [heading Upward]
				curl RightSB (XH - ADoubleStoreySmoothB)
				hookend (XH - O)
				g4 SB (XH - AHook)
				if [not isMask] {} {[corner SB y0]}

		export : define [HookAndBar y0 _stroke] : ADoubleStoreyHookAndBarT dispiro y0
			fallback _stroke ADoubleStoreyStroke
		export : define [HookAndBarMask y0 _stroke] : ADoubleStoreyHookAndBarT spiro-outline y0
			fallback _stroke ADoubleStoreyStroke

		define [ADoubleStoreyArcT sink kind rise stroke] : glyph-proc
			local isMask : sink == spiro-outline
			local bartop (XH * OverlayPos * 1.02 + stroke * 0.425)
			local bowlArcY1 : YSmoothMidL 0 bartop SmallArchDepthA SmallArchDepthB
			local bowlArcY2 : YSmoothMidR 0 bartop SmallArchDepthA SmallArchDepthB
			local lowSlope  : shoulderMidSlope ShoulderFine nothing (-1)
			local leftSlopeS : 0.1 * (Width / HalfUPM)
			local leftSlope  : leftSlopeS - TanSlope
			local lowMiddle : mix (SB + OX) (RightSB - stroke / 2 * HVContrast) [linreg 72 0.51 126 0.58 stroke]
			local barSmooth : mix SB RightSB 0.55
			include : sink
				widths.lhs stroke
				[if isMask corner flat] (RightSB + O) bartop [heading Leftward]
				curl barSmooth bartop
				archv
				g4 (SB + OX) (bowlArcY1 - Stroke * HVContrast * leftSlopeS) [heading {.x HVContrast .y leftSlope}]
				arcvh
				match kind
					0 : list
						g4   (lowMiddle + (-lowSlope) * stroke + CorrectionOMidX * stroke * 0.5) O [heading {.y 1 .x lowSlope}]
						archv 16
						straight.up.end   (RightSB - stroke * HVContrast + ShoulderFine * HVContrast) (SmallArchDepthB * 0.9) [widths.lhs ShoulderFine]
						if [not isMask] {} {[ corner (RightSB - stroke * HVContrast + ShoulderFine * HVContrast) bartop ]}
					1 : list
						g4  (Middle + CorrectionOMidX * stroke) O
						g4  RightSB rise
					2 : list
						g4  (Middle + CorrectionOMidX * stroke) O
						archv
						flat RightSB bowlArcY2
						curl RightSB ([Math.max bowlArcY2 rise] + stroke * TanSlope + 1) [heading Upward]

		export : define [Arc kind rise _sw] : ADoubleStoreyArcT dispiro kind rise
			fallback _sw ADoubleStoreyStroke
		export : define [ArcMask kind rise _sw] : ADoubleStoreyArcT spiro-outline kind rise
			fallback _sw ADoubleStoreyStroke

		export : define [Serifless] : union [HookAndBar 0] [Arc 0]
		export : define [Serifed] : union [Serifless] [RightwardBottomSerif RightSB 0 SideJut]
		export : define [Tailed] : union
			HookAndBar (XH - ADoubleStoreySmoothB + O)
			Arc        0
			RightwardTailedBar RightSB 0 (XH - ADoubleStoreySmoothB) (sw -- ADoubleStoreyStroke)
		export : define [ToothlessCorner] : union
			HookAndBar DToothlessRise
			Arc 1 DToothlessRise
		export : define [ToothlessRounded] : union
			HookAndBar ADoubleStoreySmoothA
			Arc 2 ADoubleStoreySmoothA

	define DoubleStoreyConfig : object
		doubleStoreySerifless        { DoubleStorey.Serifless         (RightSB )          }
		doubleStoreySerifed          { DoubleStorey.Serifed           (RightSB + SideJut) }
		doubleStoreyTailed           { DoubleStorey.Tailed            (RightSB + SideJut) }
		doubleStoreyToothlessCorner  { DoubleStorey.ToothlessCorner   nothing             }
		doubleStoreyToothlessRounded { DoubleStorey.ToothlessRounded  nothing             }

	foreach { suffix { body xTrailing } } [Object.entries DoubleStoreyConfig] : do
		create-glyph "a.\(suffix)" : glyph-proc
			include : MarkSet.e
			if xTrailing : set-base-anchor 'trailing' xTrailing 0
			include : body

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/a' 0x1D552 : glyph-proc
		include : MarkSet.e
		include : DoubleStorey.HookAndBar 0 BBS
		include : intersection
			DoubleStorey.HookAndBarMask 0
			VBarRight (RightSB - BBD) 0 XH BBS
		include : difference
			union
				DoubleStorey.Arc 0 0 BBS
				intersection
					DoubleStorey.ArcMask 0 0 BBS
					VBarLeft (SB + OX + BBD) 0 XH BBS
			Rect XH 0 (RightSB - BBD) Width
		include : HBarBottom (RightSB - BBD) RightSB 0 BBS

	define SingleStorey : namespace
		export : define [FullBarBody height bar mask] : glyph-proc
			include : OBarRightShape height
			include : bar height mask
		export : define [EarlessCornerBody height bar mask] : glyph-proc
			include : OBarLeftToothlessShape (rise -- DToothlessRise) (mBlend -- DMBlend)
			include : FlipAround Middle (XH / 2)
			include : bar (height - DToothlessRise) mask
		export : define [EarlessRoundedBody height bar mask] : glyph-proc
			include : OBarLeftRoundedShape (yTerminal -- (XH - SmallArchDepthA))
			include : FlipAround Middle (XH / 2)
			include : bar (height - SmallArchDepthB) mask

		export : define [SeriflessBar height mask] : glyph-proc
			set-base-anchor 'trailing' RightSB 0
			include : difference
				VBarRight RightSB 0 height
				mask height
		export : define [SerifedBar height mask] : glyph-proc
			include : SeriflessBar height mask
			include : tagged 'serifRB' : RightwardBottomSerif RightSB 0 SideJut
		export : define [TailedBar height mask] : glyph-proc
			set-base-anchor 'trailing' (RightSB + SideJut) 0
			include : difference
				RightwardTailedBar RightSB 0 height
				mask height

		set SeriflessBar.inv SeriflessBar
		set SerifedBar.inv : function [height mask] : glyph-proc
			include : SeriflessBar height mask
			include : tagged 'serifRT' : RightwardTopSerif RightSB height SideJut
		set TailedBar.inv : function [height mask] : glyph-proc
			set-base-anchor 'trailing' (RightSB + SideJut) 0
			include : difference
				InvRightwardTailedBar RightSB 0 height
				mask height


		export : define [ScriptCut y] : spiro-outline
			corner RightSB y
			corner (RightSB - Stroke * HVContrast) y
			corner (RightSB - Stroke * HVContrast) (y - Stroke / 2)
		export : define [InvScriptCut y] : spiro-outline
			corner RightSB 0
			corner (RightSB - Stroke * HVContrast) 0
			corner (RightSB - Stroke * HVContrast) (0 + Stroke / 2)

	define SingleStoreyConfig : object
		singleStoreySerifless               { SingleStorey.FullBarBody         SingleStorey.SeriflessBar }
		singleStoreySerifed                 { SingleStorey.FullBarBody         SingleStorey.SerifedBar   }
		singleStoreyTailed                  { SingleStorey.FullBarBody         SingleStorey.TailedBar    }
		singleStoreyEarlessCornerSerifless  { SingleStorey.EarlessCornerBody   SingleStorey.SeriflessBar }
		singleStoreyEarlessCornerSerifed    { SingleStorey.EarlessCornerBody   SingleStorey.SerifedBar   }
		singleStoreyEarlessCornerTailed     { SingleStorey.EarlessCornerBody   SingleStorey.TailedBar    }
		singleStoreyEarlessRoundedSerifless { SingleStorey.EarlessRoundedBody  SingleStorey.SeriflessBar }
		singleStoreyEarlessRoundedSerifed   { SingleStorey.EarlessRoundedBody  SingleStorey.SerifedBar   }
		singleStoreyEarlessRoundedTailed    { SingleStorey.EarlessRoundedBody  SingleStorey.TailedBar    }

	foreach { suffix { body bar } } [Object.entries SingleStoreyConfig] : do
		create-glyph "a.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : body XH bar no-shape
		create-glyph "largescripta.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : body CAP bar SingleStorey.ScriptCut
		create-glyph "scripta.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : body XH bar SingleStorey.ScriptCut
		create-glyph "invscripta.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : body XH bar.inv SingleStorey.InvScriptCut

	select-variant 'a' 'a'
	link-reduced-variant 'a/sansSerif' 'a' MathSansSerif
	link-reduced-variant 'a/rtailBase' 'a'
	link-reduced-variant 'a/turnABase' 'a'
	alias 'cyrl/a' 0x430 'a'

	turned 'turna' 0x250 'a/turnABase' Middle (XH / 2)

	derive-composites 'artail' 0x1D8F 'a/rtailBase'
		RetroflexHook.rSideJut RightSB 0 (yOverflow -- Stroke)

	select-variant 'scripta' 0x0251
	select-variant 'largescripta' 0x2C6D (follow -- 'scripta')
	select-variant 'invscripta' 0xAB64 (follow -- 'scripta')
	turned 'turnlargescripta' 0x2C70 'largescripta' Middle (CAP / 2)
	turned 'turnscripta' 0x252 'scripta' Middle (XH / 2)
	derive-composites 'alphaRetroflexHook' 0x1D90 'scripta.singleStoreySerifless'
		RetroflexHook.rSideJut RightSB 0 (yOverflow -- Stroke)


	CreateAccentedComposition 'aDieresis' 0xE4 'a' 'dieresisAbove'
	CreateAccentedComposition 'aSbRsbUnderlineBelow' null 'a' 'sbRsbUnderlineBelow'
	CreateAccentedComposition 'aRightHalfRingTR' 0x1E9A 'a' 'rightHalfCircleTR'

	# Ognoek shapes
	CreateOgonekComposition 'aOgonek' 0x105 'a'
