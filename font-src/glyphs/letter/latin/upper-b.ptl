$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Upper-B : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Metrics : BowlXDepth
	glyph-block-import Letter-Shared-Shapes : ShoulderMidKnotRhs
	glyph-block-import Letter-Blackboard : BBS BBD

	define BArcMix           0.93
	define BBarPos           0.52
	define AsymmetricBBarPos 0.60
	define [BShapeArcsT] : params [sink top stroke offset barPos topArcShift topArcInnerShift] : glyph-proc
		local bowl : top * barPos + stroke * (1 - barPos)
		local barleft SB
		local mockBowlDepth : BowlXDepth top (bowl - stroke) barleft RightSB stroke
		local curvleft : RightSB - SB * 0.5 - mockBowlDepth + topArcInnerShift
		local curvleftTop : Math.min curvleft (RightSB - SB * 0.5 - OX - stroke * 1.375 + topArcInnerShift)
		local xTopArcRight : [mix SB RightSB BArcMix] - OX * 2 + topArcShift
		local fine : stroke * CThin

		local ada : ArchDepthAOf (ArchDepth * 0.9) Width
		local adb : ArchDepthBOf (ArchDepth * 0.9) Width
		local adaTop : ArchDepthAOf (ArchDepth * 0.9 - (curvleft - curvleftTop)) Width
		local adbTop : ArchDepthBOf (ArchDepth * 0.9 - (curvleft - curvleftTop)) Width

		include : sink
			widths.rhs stroke
			flat (barleft - O) (top - offset) [heading Rightward]
			curl (curvleftTop - CorrectionOMidX * stroke) (top - offset)
			archv
			g4 (xTopArcRight - offset) [YSmoothMidR top (bowl - stroke) adaTop adbTop]
			arcvh
			flat (curvleftTop + CorrectionOMidX * stroke) (bowl - fine + offset) [widths.rhs fine]
			curl (barleft - O) (bowl - fine + offset) [heading Leftward]

		include : sink
			widths.rhs fine
			flat (barleft - O) (bowl - stroke + fine - offset) [heading Rightward]
			curl (curvleft - CorrectionOMidX * stroke) (bowl - stroke + fine - offset)
			archv
			g4 (RightSB - OX * 2 - offset) [YSmoothMidR bowl 0 ada adb] [widths.rhs stroke]
			arcvh
			flat (curvleft + CorrectionOMidX * stroke) offset
			curl (barleft - O) offset [heading Leftward]


	define [BShape] : params [top [stroke : AdviceStroke2 2 3 top] [barPos BBarPos] [topArcShift 0] [topArcInnerShift 0] [serifTop false] [serifBot false]] : glyph-proc
		include : BShapeArcsT dispiro top
			offset -- 0
			stroke -- stroke
			barPos -- barPos
			topArcShift -- topArcShift
			topArcInnerShift -- topArcInnerShift
		include : VBarLeft SB 0 top stroke
		if serifTop : include : tagged 'serifLT' : LeftwardTopSerif SB top SideJut
		if serifBot : include : tagged 'serifLB' : LeftwardBottomSerif SB 0 SideJut

	define [BShapeMask] : params [top [stroke : AdviceStroke2 2 3 top] [barPos BBarPos] [topArcShift 0] [topArcInnerShift 0]] : glyph-proc
		include : BShapeArcsT spiro-outline top
			offset -- 1
			stroke -- stroke
			barPos -- barPos
			topArcShift -- topArcShift
			topArcInnerShift -- topArcInnerShift

	define [InterruptShape bp top sw st sb] : begin
		local bowl : top * bp + sw * (1 - bp)
		local gap : Math.max ((RightSB - SB - 2 * sw * HVContrast) * 0.15) [AdviceStroke 10]
		return : VBarLeft (SB + sw * HVContrast) (bowl - 1 * sw + O) (bowl + 0 * sw - O) gap

	define [StdBShape top sw st sb] : BShape top (stroke -- sw) (serifTop -- st) (serifBot -- sb)
	define [StdBShapeInterrupted top sw st sb] : difference [StdBShape top sw st sb] [InterruptShape BBarPos top sw st sb]
	define [StdBShapeMask top sw] : BShapeMask top (stroke -- sw)

	define [AsymmetricBShape top sw st sb] : BShape top
		stroke -- [fallback sw : AdviceStroke2 2 3 top]
		barPos -- AsymmetricBBarPos
		topArcShift -- -(RightSB - SB) * 0.05
		topArcInnerShift -- -(RightSB - SB) * 0.1
		serifTop -- st
		serifBot -- sb
	define [AsymmetricBShapeInterrupted top sw st sb] : difference [AsymmetricBShape top sw st sb] [InterruptShape 0.6 top sw st sb]
	define [AsymmetricBShapeMask top sw] : BShapeMask top
		stroke -- [fallback sw : AdviceStroke2 2 3 top]
		barPos -- AsymmetricBBarPos
		topArcShift -- -(RightSB - SB) * 0.05
		topArcInnerShift -- -(RightSB - SB) * 0.1

	define [BOverlayBar top bp] : begin
		local stroke : AdviceStroke2 2 3 top
		return : HOverlayBar
			mix SB 0 0.7
			mix SB RightSB 0.5
			mix 0 (top * bp + stroke / 2) 0.5
			Math.min ((top - Stroke * 3) / 4) OverlayStroke

	define [BahtBar sw] : VBar [mix SB RightSB 0.475] (CAP - Descender / 2) (Descender / 2) sw
	define [BitcoinBar sw] : begin
		local gap : Math.max [AdviceStroke 4] ((RightSB - SB) / 6)
		return : union
			VBar (Middle - (gap + sw * HVContrast) / 2) (CAP - Descender / 2) (Descender / 2) sw
			VBar (Middle + (gap + sw * HVContrast) / 2) (CAP - Descender / 2) (Descender / 2) sw

	define BConfig : object
		standardSerifless                          { StdBShape                   StdBShapeMask        false false BBarPos           }
		standardBilateralSerifed                   { StdBShape                   StdBShapeMask        true true   BBarPos           }
		standardUnilateralSerifed                  { StdBShape                   StdBShapeMask        true false  BBarPos           }
		moreAsymmetricSerifless                    { AsymmetricBShape            AsymmetricBShapeMask false false AsymmetricBBarPos }
		moreAsymmetricBilateralSerifed             { AsymmetricBShape            AsymmetricBShapeMask true true   AsymmetricBBarPos }
		moreAsymmetricUnilateralSerifed            { AsymmetricBShape            AsymmetricBShapeMask true false  AsymmetricBBarPos }
		standardInterruptedSerifless               { StdBShapeInterrupted        StdBShapeMask        false false BBarPos           }
		standardInterruptedBilateralSerifed        { StdBShapeInterrupted        StdBShapeMask        true true   BBarPos           }
		standardInterruptedUnilateralSerifed       { StdBShapeInterrupted        StdBShapeMask        true false  BBarPos           }
		moreAsymmetricInterruptedSerifless         { AsymmetricBShapeInterrupted AsymmetricBShapeMask false false AsymmetricBBarPos }
		moreAsymmetricInterruptedBilateralSerifed  { AsymmetricBShapeInterrupted AsymmetricBShapeMask true true   AsymmetricBBarPos }
		moreAsymmetricInterruptedUnilateralSerifed { AsymmetricBShapeInterrupted AsymmetricBShapeMask true false  AsymmetricBBarPos }

	foreach { suffix { body mask ts bs bp } } [Object.entries BConfig] : do
		local currencySw : AdviceStroke2 3.5 3 CAP

		create-glyph "B.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : body CAP [AdviceStroke2 2 3 CAP] ts bs

		create-glyph "BBar.\(suffix)" : glyph-proc
			include [refer-glyph "B.\(suffix)"] AS_BASE ALSO_METRICS
			include : BOverlayBar CAP bp

		create-glyph "currency/baht.\(suffix)" : union
			body CAP currencySw ts bs
			intersection [BahtBar : AdviceStroke 5] [mask CAP currencySw]
			difference   [BahtBar   Stroke]         [mask CAP currencySw]

		create-glyph "currency/bitcoin.\(suffix)" : union
			body CAP currencySw ts bs
			difference [BitcoinBar : AdviceStroke 5] [mask CAP currencySw]

		create-glyph "smcpB.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : body XH [AdviceStroke2 2 3 XH] ts bs

		create-glyph "smcpBBar.\(suffix)" : glyph-proc
			include [refer-glyph "smcpB.\(suffix)"] AS_BASE ALSO_METRICS
			include : BOverlayBar XH bp


	select-variant 'B' 'B'
	link-reduced-variant 'B/sansSerif' 'B' MathSansSerif
	select-variant 'currency/baht' 0xE3F (follow -- 'B')
	select-variant 'currency/bitcoin' 0x20BF (follow -- 'B')
	select-variant 'BBar' 0x243 (follow -- 'B')
	select-variant 'smcpBBar' 0x1D03 (follow -- 'B')
	alias 'grek/Beta' 0x392 'B'
	alias-reduced-variant 'grek/Beta/sansSerif' 'grek/Beta' 'B/sansSerif' MathSansSerif
	alias 'cyrl/Ve' 0x412 'B'

	select-variant 'smcpB' 0x299
	alias 'cyrl/ve.upright' null 'smcpB'

	create-glyph 'mathbb/B' 0x1D539 : glyph-proc
		include : MarkSet.capital
		include : union
			BShape CAP (stroke -- BBS) (serifs -- false)
			intersection
				BShapeMask CAP (stroke -- BBS)
				union
					VBarRight (RightSB - BBD - OX * 2) 0 (CAP * BBarPos) BBS
					VBarRight ([mix SB RightSB BArcMix] - BBD - OX * 2) (CAP * BBarPos) CAP BBS
					VBarLeft (SB + BBD) 0 CAP BBS

	derive-glyphs 'Bhookleft' 0x181 'B' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		eject-contour "serifLT"
		include : LeftHook SB CAP

	define [ItalicCyrveShape top] : glyph-proc
		local stroke : AdviceStroke2 2 3 top
		local mid : mix RightSB SB 0.65
		local midy : top * HBarPos
		local adb : top - [mix (midy + stroke / 2) (top - O - stroke) (ArchDepthA / (ArchDepthA + ArchDepthB))] + TanSlope * HVContrast * stroke
		local ada : [mix (stroke + O) (midy - stroke / 2) (ArchDepthA / (ArchDepthA + ArchDepthB))] - TanSlope * HVContrast * stroke
		local fine : stroke * CThin
		include : dispiro
			widths.lhs fine
			flat mid (midy - (fine - stroke / 2)) [heading Rightward]
			curl Middle (midy - (fine - stroke / 2)) [heading Rightward]
			archv
			g4   (RightSB - (OX - O)) (top - adb) [widths.lhs stroke]
			arcvh
			g4   (Middle + stroke * 0.06 - CorrectionOMidS) (top - O)
			archv
			flat (SB + O) (top - SmallArchDepthA)
			curl (SB + O) SmallArchDepthB
			arcvh
			g4   (Middle + stroke * 0.06 + CorrectionOMidS) O
			archv
			g4   (RightSB - (OX - O) - O * 2) (ada)
			arcvh
			flat Middle (midy + (fine - stroke / 2)) [widths.heading fine 0 Leftward]
			curl mid (midy + (fine - stroke / 2)) [widths.heading fine 0 Leftward]

	define [ClosedEpsilonShape top] : glyph-proc
		local stroke : AdviceStroke2 2 3 top
		local mid : mix SB RightSB 0.65
		local midy : top * HBarPos
		local ada : top - [mix (midy + stroke / 2) (top - O - stroke) (ArchDepthB / (ArchDepthA + ArchDepthB))] - TanSlope * HVContrast * stroke
		local adb : [mix (stroke + O) (midy - stroke / 2) (ArchDepthB / (ArchDepthA + ArchDepthB))] + TanSlope * HVContrast * stroke
		local fine : stroke * CThin
		include : dispiro
			widths.rhs fine
			flat mid (midy - (fine - stroke / 2)) [heading Leftward]
			curl Middle (midy - (fine - stroke / 2)) [heading Leftward]
			archv
			g4   (SB + (OX - O)) (top - ada) [widths.rhs stroke]
			arcvh
			g4   (Middle - stroke * 0.06 - CorrectionOMidS) (top - O)
			archv
			flat (RightSB - O) (top - SmallArchDepthB)
			curl (RightSB - O) SmallArchDepthA
			arcvh
			g4   (Middle - stroke * 0.06 + CorrectionOMidS) O
			archv
			g4   (SB + (OX - O) + O * 2) (adb)
			arcvh
			flat Middle (midy + (fine - stroke / 2)) [widths.heading 0 fine Rightward]
			curl mid (midy + (fine - stroke / 2)) [widths.heading 0 fine Rightward]

	create-glyph 'closeturnepsilon' 0x25E : glyph-proc
		include : MarkSet.e
		include : ItalicCyrveShape XH

	create-glyph 'grek/betaSymbol' 0x3D0 : glyph-proc
		include : MarkSet.e
		include : ItalicCyrveShape Ascender

	alias 'cyrl/ve.BGR' null 'grek/betaSymbol'
	alias 'cyrl/ve.italic' null 'closeturnepsilon'

	create-glyph 'closeepsilon' 0x29A : glyph-proc
		include : MarkSet.e
		include : ClosedEpsilonShape XH

	create-glyph 'grek/beta' 0x3B2 : glyph-proc
		include : MarkSet.if
		define pBar 0.55
		define fine : Stroke * CThin
		define yMiddle : [mix 0 Ascender pBar] - Stroke * 0.7 # Bottom edge
		define ada : ArchDepthAOf (ArchDepth * 0.75) Width
		define adb : ArchDepthBOf (ArchDepth * 0.75) Width
		define xMidLeft : mix (SB + Stroke * HVContrast) (RightSB - Stroke * HVContrast) 0.3
		define xMidArc  : Math.max [mix xMidLeft RightSB 0.1] [mix SB RightSB 0.5]
		include : dispiro
			widths.rhs
			flat SB Descender [heading Upward]
			curl SB (Ascender - SmallArchDepthA)
			arcvh
			g4   ([mix SB (RightSB - OX + O * 3) 0.5] - CorrectionOMidS) (Ascender - O)
			archv
			g4   (RightSB - OX + O * 3) [YSmoothMidR yMiddle Ascender ada adb]
			arcvh
			flat xMidArc  (yMiddle + Stroke - fine) [widths.rhs.heading fine Leftward]
			curl xMidLeft (yMiddle + Stroke - fine) [heading Leftward]
		include : dispiro
			widths.rhs fine
			flat xMidLeft (yMiddle + fine) [heading Rightward]
			curl xMidArc  (yMiddle + fine) [heading Rightward]
			archv
			g4   (RightSB - OX)  [YSmoothMidR 0 (yMiddle + Stroke) ada adb] [widths.rhs]
			arcvh
			ShoulderMidKnotRhs Middle O ShoulderFine Stroke 1 1
			archv
			g4.up.end (SB + HVContrast * (Stroke - ShoulderFine)) adb [widths.rhs ShoulderFine]
			# flat (RightSB - ymiddle / 2 - HalfStroke) 0
			# curl (SB + HalfStroke) 0 [heading Leftward]