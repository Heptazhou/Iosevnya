$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [RightDependentLink RightDependentTrigger CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-S : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Blackboard : BBS BBD
	glyph-block-import Letter-Shared : CreateAccentedComposition CreateRightDependentComposite
	glyph-block-import Letter-Shared-Shapes : DToothlessRise FlatHookDepth ArcStartSerifWidth
	glyph-block-import Letter-Shared-Shapes : SerifedArcStart_RtlLhs SerifedArcEnd_RtlRhs
	glyph-block-import Letter-Shared-Shapes : SerifedArcStart_LtrRhs SerifedArcEnd_LtrLhs
	glyph-block-import Letter-Shared-Shapes : ArcStartSerifR ArcEndSerifL
	glyph-block-import Letter-Shared-Shapes : ArcStartSerifL ArcEndSerifR
	glyph-block-import Letter-Shared-Shapes : ArcStartInwardSerifR ArcEndInwardSerifL
	glyph-block-import Letter-Shared-Shapes : ArcStartInwardSerifL ArcEndInwardSerifR

	define SLAB-NONE      0
	define SLAB-CLASSICAL 1
	define SLAB-INWARD    2

	define SOBot  OX

	define [SNeck] : params [[stroke Stroke]] : begin
		define tensionCoeff : mix [StrokeWidthBlend 1 0.375 stroke] 1 : clamp 0 1 : Math.pow (Width / (UPM * 0.55)) 0.5
		define dist : Math.min 0.25 (0.1 * [Math.max 1 (Width / HalfUPM)])
		define tension : tensionCoeff * (0.5 - 0.4 * dist)
		return : alsoThruThem {{(0.5 - dist) tension} {(0.5 + dist) (1 - tension)}} [widths.center stroke]

	define [SStrokeDollarInterruptGap deltaX top bot gap stroke refSwEss] : begin
		local ess : refSwEss * gap / Stroke
		define archDepth : adviceSSmooth (top - bot) (-1) stroke

		return : dispiro
			g4.down.mid (deltaX + SB - Width) (top - archDepth) [widths.lhs gap]
			alsoThru.g2 0.5 0.5 [widths.center ess]
			g4.down.mid (deltaX + RightSB - Width - SOBot) (bot + archDepth) [widths.rhs gap]

	define [SStrokeImpl top bot st sb stroke refSwEss] : begin
		local ess : refSwEss * stroke / Stroke
		define archDepth : adviceSSmooth (top - bot) (-1) stroke

		return : dispiro
			match st
				[Just SLAB-CLASSICAL] : SerifedArcStart_RtlLhs RightSB Middle top stroke Hook
				[Just SLAB-INWARD] : list
					g4 RightSB (top - DToothlessRise) [widths.lhs stroke]
					g4 (Middle - CorrectionOMidX * stroke) (top - O)
					archv
				__ : list
					g4 RightSB (top - Hook) [widths.lhs stroke]
					hookstart (top - O) (sw -- stroke) (swItalicAdj -- Stroke)

			g4   SB (top - archDepth)
			alsoThru.g2 0.5 0.5 [widths.center ess]
			g4   (RightSB - SOBot) (bot + archDepth) [widths 0 stroke]

			match sb
				[Just SLAB-CLASSICAL] : SerifedArcEnd_RtlRhs SB Middle bot stroke Hook
				[Just SLAB-INWARD] : list
					arcvh
					g4 (Middle + CorrectionOMidX * stroke) (bot + O)
					g4 SB (bot + DToothlessRise)
				__ : list
					hookend (bot + O) (sw -- stroke) (swItalicAdj -- Stroke)
					g4   (SB + SOBot) (bot + Hook)

	define [RevSStroke st sb stroke ess] : begin
		local archDepth : adviceSSmooth CAP 0.5 stroke
		return : dispiro
			match st
				[Just SLAB-CLASSICAL] : SerifedArcStart_LtrRhs SB Middle CAP stroke Hook
				[Just SLAB-INWARD] : list
					g4 SB (CAP - DToothlessRise) [widths.rhs stroke]
					g4 (Middle - CorrectionOMidX * stroke) (CAP - O)
					archv
				__ : list
					g4   SB (CAP - Hook) [widths.rhs stroke]
					hookstart (CAP - O) (sw -- stroke) (swItalicAdj -- Stroke)
			g4   RightSB (CAP - archDepth)
			alsoThru.g2 0.5 0.5 [widths.center ess]
			g4   (SB + SOBot) archDepth [widths stroke 0]
			match sb
				[Just SLAB-CLASSICAL] : SerifedArcEnd_LtrLhs RightSB Middle 0 stroke Hook
				[Just SLAB-INWARD] : list
					arcvh
					g4 (Middle + CorrectionOMidX * stroke) O
					g4 RightSB DToothlessRise
				__ : list
					hookend O (sw -- stroke) (swItalicAdj -- Stroke)
					g4   (RightSB + OX - SOBot) Hook

	define [SmallSStrokeImpl st sb stroke refSwEss] : begin
		define ess : refSwEss * stroke / Stroke
		define archDepth : adviceSSmooth XH (-1) stroke

		return : dispiro
			match st
				[Just SLAB-CLASSICAL] : SerifedArcStart_RtlLhs RightSB Middle XH stroke SHook
				[Just SLAB-INWARD] : list
					g4 RightSB (XH - DToothlessRise) [widths.lhs stroke]
					g4 (Middle - CorrectionOMidX * stroke) (XH - O)
					archv
				__ : list
						g4   (RightSB + OX) (XH - SHook) [widths.lhs stroke]
						hookstart (XH - O) (sw -- stroke) (swItalicAdj -- Stroke)

			g4   (SB - OX) (XH - archDepth)
			SNeck (stroke -- ess)
			g4   (RightSB + OX - SOBot) (archDepth) [widths 0 stroke]

			match sb
				[Just SLAB-CLASSICAL] : SerifedArcEnd_RtlRhs SB Middle 0 stroke SHook
				[Just SLAB-INWARD] : list
					arcvh
					g4 (Middle + CorrectionOMidX * stroke) O
					g4 SB DToothlessRise
				__ : list
					hookend O (sw -- stroke) (swItalicAdj -- Stroke)
					g4   (SB - OX + SOBot) SHook

	define [SStrokeAlt] : params [top hook swStart swEnd oXLeftTop offsetLT offsetRB offsetC] : begin
		define stroke : Math.max swStart swEnd
		define fine   : Math.min swStart swEnd
		define soStart : stroke - swStart
		define soEnd   : stroke - swEnd
		define archDepth : adviceSSmooth top (-1) stroke
		return : dispiro
			widths.lhs fine
			g4   (RightSB + OX / 4 - HVContrast * soStart) (top - hook)
			hookstart (top - O - soStart) (sw -- fine) (swItalicAdj -- Stroke) (noAdjTerminalY -- true)
			g4   (SB + oXLeftTop + offsetLT.x) (top - archDepth + offsetLT.y)
			g2
				offsetC.x + [mix (SB + oXLeftTop + offsetLT.x) (RightSB - SOBot - offsetRB.x) 0.5]
				offsetC.y + [mix (top - archDepth)                (archDepth)                       0.5]
				widths.center stroke
			g4   (RightSB - SOBot - offsetRB.x) (archDepth + offsetRB.y) [widths.rhs fine]
			hookend (O + soEnd) (sw -- fine) (swItalicAdj -- Stroke) (noAdjTerminalY -- true)
			g4   (SB + SOBot + HVContrast * soEnd) (hook) [widths.rhs fine]

	define [SmallSStrokePhoneticRight st top] : begin
		define stroke : AdviceStroke2 2 3 top
		define ess : AdviceStroke2 2.2 3.2 top
		define archDepth : adviceSSmooth top (-1) stroke
		return : dispiro
			match st
				[Just SLAB-CLASSICAL] : SerifedArcStart_RtlLhs RightSB Middle top stroke Hook
				[Just SLAB-INWARD] : list
					g4 RightSB (top - DToothlessRise) [widths.lhs stroke]
					g4 (Middle - CorrectionOMidX * stroke) (top - O)
					archv
				__ : list
					g4 RightSB (top - Hook) [widths.lhs stroke]
					hookstart (top - O) (sw -- stroke) (swItalicAdj -- Stroke)
			g4   SB (top - archDepth)
			SNeck (stroke -- ess)
			g4   (RightSB - SOBot) (archDepth) [widths 0 stroke]
			arcvh
			flat (Middle - CorrectionOMidS) 0 [widths 0 Stroke]
			curl SB 0

	define [RevSmallSStroke st sb stroke ess] : begin
		define archDepth : adviceSSmooth XH 0.75 stroke
		return : dispiro
			match st
				[Just SLAB-CLASSICAL] : SerifedArcStart_LtrRhs SB Middle XH stroke SHook
				[Just SLAB-INWARD] : list
					g4 SB (XH - DToothlessRise) [widths.rhs stroke]
					g4 (Middle - CorrectionOMidX * stroke) (XH - O)
					archv
				__ : list
					g4   (SB - OX) (XH - SHook) [widths.rhs stroke]
					hookstart (XH - O) (sw -- stroke) (swItalicAdj -- Stroke)
			g4   (RightSB + OX) (XH - archDepth)
			SNeck (stroke -- ess)
			g4   (SB - OX + SOBot) (archDepth) [widths stroke 0]
			match sb
				[Just SLAB-CLASSICAL] : SerifedArcEnd_LtrLhs RightSB Middle 0 stroke SHook
				[Just SLAB-INWARD] : list
					arcvh
					g4 (Middle + CorrectionOMidX * stroke) O
					g4 RightSB DToothlessRise
				__ : list
					hookend O (sw -- stroke) (swItalicAdj -- Stroke)
					g4   (RightSB + OX - SOBot) SHook

	glyph-block-export SAutoSlabStart
	define [SAutoSlabStart st top sw hook] : match st
		[Just SLAB-CLASSICAL] : ArcStartSerifR RightSB top sw hook
		[Just SLAB-INWARD] : ArcStartInwardSerifR RightSB top sw hook
		__ : glyph-proc

	glyph-block-export SAutoSlabEnd
	define [SAutoSlabEnd st bot sw hook] : match st
		[Just SLAB-CLASSICAL] : ArcEndSerifL SB bot  sw hook
		[Just SLAB-INWARD] : ArcEndInwardSerifL SB bot  sw hook
		__ : glyph-proc

	define [RevSAutoSlabStart st top sw hook] : match st
		[Just SLAB-CLASSICAL] : ArcStartSerifL SB top sw hook
		[Just SLAB-INWARD] : ArcStartInwardSerifL SB top sw hook
		__ : glyph-proc

	define [RevSAutoSlabEnd st bot sw hook] : match st
		[Just SLAB-CLASSICAL] : ArcEndSerifR RightSB bot  sw hook
		[Just SLAB-INWARD] : ArcEndInwardSerifR RightSB bot  sw hook
		__ : glyph-proc

	define CyrlGeMarks : object
		e       : MarkSet.OfZone { .top (XH + AccentStackOffset / 2) .bot 0 }

	define SConfig : object
		serifless               { SLAB-NONE      SLAB-NONE      }
		unilateralSerifed       { SLAB-CLASSICAL SLAB-NONE      }
		bilateralSerifed        { SLAB-CLASSICAL SLAB-CLASSICAL }
		unilateralInwardSerifed { SLAB-INWARD    SLAB-NONE      }
		bilateralInwardSerifed  { SLAB-INWARD    SLAB-INWARD    }

	foreach { suffix { doTS doBS } } [Object.entries SConfig] : do
		create-glyph "S.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : SStrokeImpl CAP 0 doTS doBS [AdviceStroke2 2 3 CAP] EssUpper
			include : SAutoSlabStart doTS CAP Stroke Hook
			include : SAutoSlabEnd   doBS 0   Stroke Hook

		create-glyph "smcpS.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : SStrokeImpl XH 0 doTS doBS [AdviceStroke2 2 3 XH] EssUpper
			include : SAutoSlabStart doTS XH Stroke Hook
			include : SAutoSlabEnd   doBS 0   Stroke Hook

		create-glyph "DollarKernelStd.\(suffix)" : glyph-proc
			define top : CAP * 0.95
			define bot : CAP * 0.05
			include : MarkSet.capital
			set-base-anchor 'cvDecompose' 0 0
			include : SStrokeImpl top bot doTS doBS [AdviceStroke2 2 3 (top - bot)] EssUpper
			include : SAutoSlabStart doTS top Stroke Hook
			include : SAutoSlabEnd   doBS bot Stroke Hook
			RightDependentLink.set currentGlyph "cap" "DollarKernelCap.\(suffix)"

		create-glyph "DollarKernelCap.\(suffix)" : glyph-proc
			define top : CAP * 0.88
			define bot : CAP * 0.12
			include : MarkSet.capital
			set-base-anchor 'cvDecompose' 0 0
			include : SStrokeImpl top bot doTS doBS [AdviceStroke2 2 3 (top - bot)] EssUpper
			include : SAutoSlabStart doTS top Stroke Hook
			include : SAutoSlabEnd   doBS bot Stroke Hook

		create-glyph "s.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : SmallSStrokeImpl doTS doBS [AdviceStroke2 2 3 XH] EssLower
			include : SAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook
			include : SAutoSlabEnd   doBS 0  [AdviceStroke2 2 3 XH] Hook

		create-glyph "s/phoneticRight.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : SmallSStrokePhoneticRight doTS XH
			include : SAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook

		create-glyph "revS.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : RevSStroke        doTS doBS Stroke EssUpper
			include : RevSAutoSlabStart doTS CAP  Stroke Hook
			include : RevSAutoSlabEnd   doBS 0    Stroke Hook

		create-glyph "revs.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : RevSmallSStroke   doTS doBS [AdviceStroke2 2 3 XH] EssLower
			include : RevSAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook
			include : RevSAutoSlabEnd   doBS 0  [AdviceStroke2 2 3 XH] Hook

		create-glyph "cyrl/ge.italic.\(suffix)" : glyph-proc
			include : CyrlGeMarks.e
			include : RevSmallSStroke SLAB-CLASSICAL doBS [AdviceStroke2 2 3 XH] EssLower
			include : ArcStartSerifL SB XH [AdviceStroke2 2 3 XH] Hook AccentStackOffset
			include : RevSAutoSlabEnd doBS 0  [AdviceStroke2 2 3 XH] Hook

		create-glyph "cyrl/gheDescender.italic.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : RevSmallSStroke doTS SLAB-CLASSICAL [AdviceStroke2 2 3 XH] EssLower
			include : RevSAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook
			include : ArcEndSerifR RightSB 0 [AdviceStroke2 2 3 XH] Hook AccentStackOffset

		create-glyph "cyrl/gheDHook.italic.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : RevSmallSStroke doTS SLAB-CLASSICAL [AdviceStroke2 2 3 XH] EssLower
			include : RevSAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook
			local hd : FlatHookDepth [DivFrame 1]
			local hookSw : ArcStartSerifWidth : AdviceStroke2 2 3 XH
			include : dispiro
				widths.rhs hookSw
				flat RightSB (Hook - O * 2) [heading Downward]
				curl RightSB (hd.y - Hook - 0.25 * hookSw) [heading Downward]
				arcvh
				flat (RightSB - hd.x + 0.25 * hookSw * HVContrast) (0 - Hook)
				curl (RightSB - HookX - 0.5 * hookSw * HVContrast) (0 - Hook)

		if [not doBS] : create-glyph "SSwash.\(suffix)" : glyph-proc
			include : MarkSet.if

			include : SAutoSlabStart doTS CAP Stroke Hook
			local stroke : include : SStrokeImpl CAP 0 doTS doBS [AdviceStroke2 2 3 CAP] EssUpper
			local start : currentGlyph.gizmo.unapply stroke.lhsKnots.(stroke.lhsKnots.length - 1)

			local sw : AdviceStroke2 2 3 CAP
			include : dispiro
				widths.lhs [AdviceStroke 4.5]
				g4 start.x start.y
				alsoThru 0.15 0.6 important
				flat (RightSB - 1) Descender [widths sw 0]
				curl RightSB Descender

		if [not doBS] : create-glyph "sSwash.\(suffix)" : glyph-proc
			include : MarkSet.p

			include : SAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook
			local stroke : include : SmallSStrokeImpl doTS doBS [AdviceStroke2 2 3 XH] EssLower
			local start : currentGlyph.gizmo.unapply stroke.lhsKnots.(stroke.lhsKnots.length - 1)

			local sw : AdviceStroke2 2 3 XH
			include : dispiro
				widths.lhs [AdviceStroke 4.5]
				g4 start.x start.y
				alsoThru 0.15 0.6 important
				flat (RightSB - 1) Descender [widths sw 0]
				curl RightSB Descender


		if [not doBS] : create-glyph "sRTail.\(suffix)" : glyph-proc
			include : MarkSet.p

			include : SAutoSlabStart doTS XH [AdviceStroke2 2 3 XH] Hook
			local stroke : include : SmallSStrokeImpl doTS doBS [AdviceStroke2 2 3 XH] EssLower
			local start : currentGlyph.gizmo.unapply stroke.lhsKnots.(stroke.lhsKnots.length - 1)

			include : new-glyph : glyph-proc
				local sw : AdviceStroke2 2 3 XH
				include : refer-glyph "rtailBR"
				include : ApparentTranslate (start.x + sw * HVContrast) 0

			include : VBarLeft start.x 0 start.y

	select-variant 'S' 'S'
	link-reduced-variant 'S/sansSerif' 'S' MathSansSerif
	select-variant 's' 's'
	link-reduced-variant 's/sansSerif' 's' MathSansSerif
	select-variant 'smcpS' 0xA731 (follow -- 'S')
	select-variant 'revS' 0x1A7 (follow -- 'S')
	select-variant 'revs' 0x1A8 (follow -- 's')

	select-variant 'DollarKernelStd' (follow -- 'S')
	select-variant 'DollarKernelCap' (follow -- 'S')
	if [query-glyph 'DollarKernelStd'] : begin
		RightDependentLink.set [query-glyph 'DollarKernelStd'] "cap" 'DollarKernelCap'

	select-variant 'SSwash' 0x2C7E
	select-variant 'sSwash' 0x23F
	select-variant 'sRTail' 0x282 (follow -- 'sSwash')

	alias 'cyrl/Dze' 0x405 'S'
	alias 'cyrl/dze' 0x455 's'

	alias 'cyrl/ghe.italic' null 'revs'
	select-variant 'cyrl/ge.italic' null
	select-variant 'cyrl/gheDescender.italic' null (follow -- 'sSwash')
	select-variant 'cyrl/gheDHook.italic' null (follow -- 'sSwash')

	select-variant 's/phoneticRight'

	CreateAccentedComposition 'sTildeOver' 0x1D74 's' 'tildeOverWide'

	create-glyph 'mathbb/S' 0x1D54A : glyph-proc
		include : MarkSet.capital
		define theta : Math.PI / 4
		foreach sign [items-of { 1 (-1) }] : begin
			include : SStrokeAlt
				top -- CAP
				hook -- Hook
				swStart -- BBS * [if (sign > 0) CThin 1]
				swEnd   -- BBS * [if (sign < 0) CThin 1]
				oXLeftTop -- O
				ess -- BBD
				offsetC -- {
					.x (0.5 * sign * BBD * [Math.sin theta])
					.y (0.5 * sign * BBD * [Math.cos theta])
				}
				offsetLT -- {
					.x [if (sign > 0) (BBD / 2) 0]
					.y ([if (sign > 0) 0.25 0.375] * sign * BBD * [Math.cos theta])
				}
				offsetRB -- {
					.x [if (sign < 0) (BBD / 2) 0]
					.y ([if (sign < 0) 0.25 0.375] * sign * BBD * [Math.cos theta])
				}

	create-glyph 'mathbb/s' 0x1D564 : glyph-proc
		include : MarkSet.e
		define theta : Math.PI / 5
		foreach sign [items-of { 1 (-1) }] : begin
			include : SStrokeAlt
				top -- XH
				hook -- SHook
				swStart -- BBS * [if (sign > 0) CThin 1]
				swEnd   -- BBS * [if (sign < 0) CThin 1]
				oXLeftTop -- (OX / 8)
				ess -- BBD
				offsetC -- {
					.x (0.5 * sign * BBD * [Math.sin theta])
					.y (0.5 * sign * BBD * [Math.cos theta])
				}
				offsetLT -- {
					.x [if (sign > 0) (BBD / 2) 0]
					.y ([if (sign > 0) 0.25 0.375] * sign * BBD * [Math.cos theta])
				}
				offsetRB -- {
					.x [if (sign < 0) (BBD / 2) 0]
					.y ([if (sign < 0) 0.25 0.375] * sign * BBD * [Math.cos theta])
				}

	derive-composites 'cyrl/ghayn.italic' null 'revs'
		FlatSlashShape Middle (XH / 2) (OverlayStroke / 2) (-0.2) 0.75

	derive-composites 'cyrl/gheStrokeHook.italic' null 'cyrl/gheDHook.italic'
		FlatSlashShape Middle (XH / 2) (OverlayStroke / 2) (-0.2) 0.75

	define DollarConfig : object
		open           { 0.95 0.05 (Descender / 2) 0 0 }
		through        { 0.95 0.05 (Descender / 2) 1 0 }
		interrupted    { 0.95 0.05 (Descender / 2) 2 0 }
		openCap        { 0.88 0.12              0  0 1 }
		throughCap     { 0.88 0.12              0  1 1 }
		interruptedCap { 0.88 0.12              0  2 1 }

	foreach { suffix { kTop kBot overflow fillType fShort } } [Object.entries DollarConfig] : do
		create-glyph "dollar/bar.\(suffix)" : glyph-proc
			set-width 0
			set-mark-anchor 'cvDecompose' 0 0
			define top : CAP * kTop
			define bot : CAP * kBot
			define w : AdviceStroke 3
			define fine : AdviceStroke [StrokeWidthBlend 3 5.5]

			include : dispiro
				widths.center w
				flat Middle (top - HalfStroke)
				curl Middle (CAP - overflow) [heading Upward]
			include : dispiro
				widths.center w
				flat Middle overflow [heading Upward]
				curl Middle (bot + HalfStroke)
			if (fillType === 1) : include : VBar Middle (bot + HalfStroke) (top - HalfStroke) fine
			if (fillType === 2) : begin
				local cofine : AdviceStroke 4
				local gap : (w / Stroke * EssUpper) + [Math.max ((top - bot) / 6) [AdviceStroke2 3 3 (top - bot)]]
				local yMid : mix bot top 0.5
				local yTermLeft : mix yMid (top - [adviceSSmooth (top - bot) (-1) w]) 0.5
				local yTermRight : mix yMid (bot + [adviceSSmooth (top - bot) (-1) w]) 0.5
				include : difference
					union
						dispiro
							flat Middle (top - HalfStroke) [widths.center.heading cofine Downward]
							curl Middle [mix bot top 0.5]  [widths.center.heading fine Downward]
						dispiro
							flat Middle (bot + HalfStroke) [widths.center.heading cofine Upward]
							curl Middle [mix bot top 0.5]  [widths.center.heading fine Upward]

					dispiro [corner 0 yTermLeft : widths.center gap] [corner Width yTermRight]

			if fShort : RightDependentTrigger.set currentGlyph 'cap'

	select-variant 'dollar/bar' (follow -- 'dollar')

	CreateRightDependentComposite 'dollar' '$' 'DollarKernelStd' 'dollar/bar'
