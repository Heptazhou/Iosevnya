$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [Dotless CvDecompose MathSansSerif] from"../../../support/gr.mjs"

glyph-module

glyph-block Letter-Latin-Upper-L : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Shared-Metrics : markMiddle
	glyph-block-import Mark-Above : aboveMarkMid
	glyph-block-import Letter-Blackboard : BBS BBD
	glyph-block-import Letter-Shared-Shapes : BeltOverlay LetterBarOverlay

	define LBarLeftX : SB * 1.5
	define [LShape top sgr swv] : glyph-proc
		include : VBarLeft LBarLeftX 0 top swv
		include : HBarBottom (LBarLeftX - O) (RightSB - OX) 0
		if (sgr > 1) : begin
			include : LeftwardBottomSerif (LBarLeftX + 0.5 * HVContrast * swv) 0 Jut
			include : LeftwardTopSerif    (LBarLeftX + 0.5 * HVContrast * swv) top Jut
			include : RightwardTopSerif   (LBarLeftX + 0.5 * HVContrast * swv) top MidJutSide
		if (sgr > 0) : include : UpwardRightSerif (RightSB - OX) 0 VJut

	define LConfig : object
		serifless     { 0 }
		motionSerifed { 1 }
		serifed       { 2 }

	foreach { suffix { serifGrade } } [Object.entries LConfig] : do
		create-glyph "L.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : LShape CAP serifGrade Stroke
			set-base-anchor 'cvDecompose' ([mix SB RightSB 0.65] + 0.25 * Stroke * HVContrast) [mix Stroke CAP 0.5]

		create-glyph "smcpL.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : LShape XH serifGrade Stroke

		create-glyph "LLWelsh.\(suffix)" : glyph-proc
			include : MarkSet.capital

			local sw : AdviceStroke 4
			local gap : Math.max (Width / 8) [AdviceStroke 8]

			include : LShape CAP serifGrade sw
			include : intersection
				MaskLeft RightSB
				MaskAbove sw
				WithTransform [ApparentTranslate (sw * HVContrast + gap) 0]
					LShape CAP serifGrade sw

	select-variant 'L' 'L'
	link-reduced-variant 'L/sansSerif' 'L' MathSansSerif
	select-variant 'smcpL' 0x29F (follow -- 'L')
	select-variant 'LLWelsh' 0x1EFA (follow -- 'L')

	turned 'turnL' 0xA780 'L' Middle (CAP / 2)
	turned 'turnSansSerifL' 0x2142 'L.serifless' Middle (CAP / 2)

	create-glyph 'mathbb/L' 0x1D543 : glyph-proc
		include : MarkSet.capital
		include : VBarLeft LBarLeftX 0 CAP BBS
		include : HBarBottom (LBarLeftX - O) (RightSB - OX) 0 BBS
		include : VBarLeft (LBarLeftX + BBD) 0 CAP BBS
		include : HBarTop LBarLeftX (LBarLeftX + BBD) CAP BBS

	derive-multi-part-glyphs 'Lcaron' 0x13D { 'L' 'commaAbove' } : lambda [srcs gr] : glyph-proc
		local { base mark } srcs
		include : WithTransform [Translate (Width + (RightSB - SB) * 0.375) 0]
			refer-glyph mark
		include [refer-glyph base] AS_BASE ALSO_METRICS

	define [LSlashOverlay top] : begin
		local fine : 0.5 * OverlayStroke
		local middle : mix Stroke top 0.5
		return : dispiro
			flat [mix 0 SB 0.5] (middle - LongJut * 0.4) [widths fine fine]
			curl (1.6 * LongJut + [mix 0 SB 0.5]) (middle + LongJut * 0.4)

	derive-glyphs 'LSlash' 0x141 'L' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : LSlashOverlay CAP

	derive-glyphs 'smcpLSlash' 0x1D0C 'smcpL' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : LSlashOverlay XH

	derive-glyphs 'LTildeOver' 0x2C62 'L' : lambda [src gr] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : new-glyph : glyph-proc
			include : refer-glyph "tildeAboveOverlay"
			include : ApparentTranslate (SB * 1.5 + Stroke * HVContrast / 2 - markMiddle) (CAP * 0.525 - aboveMarkMid)

	create-glyph 'LBarOverlay' : LetterBarOverlay.l.in LBarLeftX 0 CAP
	create-glyph 'LBeltOverlay' : BeltOverlay CAP (LBarLeftX + 0.5 * HVContrast * Stroke)
	create-glyph 'smcpLBeltOverlay' : BeltOverlay XH (LBarLeftX + 0.5 * HVContrast * Stroke)
	derive-composites 'LBar' 0x23D 'L' 'LBarOverlay'
	derive-composites 'LBelt' 0xA7AD 'L' 'LBeltOverlay'
	derive-composites 'smcpLBelt' 0x1DF04 'smcpL' 'smcpLBeltOverlay'
