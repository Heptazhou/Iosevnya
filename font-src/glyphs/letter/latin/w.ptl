$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [Dotless CvDecompose MathSansSerif] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-W : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : DiagonalTailInnerRadius SerifFrame
	glyph-block-import Letter-Latin-Upper-M : MShape

	define FORM-CURLY      0
	define FORM-STRAIGHT   1
	define FORM-FLAT-TOP   2
	define FORM-DOUBLE-V   3
	define FORM-ASYMMETRIC 4
	define FORM-CYRL-OMEGA 5

	define SERIFS-NONE       0
	define SERIFS-AUTO       1
	define SERIFS-MOTION     2
	define SERIFS-DOUBLE-V   3
	define SERIFS-ASYMMETRIC 4
	define SERIFS-CURSIVE    5

	define CwFineOuter            5.0
	define CwFineInner            6.0
	define CwFineOuterStraight    5.5
	define CwFineInnerStraight    5.5
	define CwFineInnerDoubleV     4.25
	define CwOuterStrokeCurly     2.5
	define CwOuterStrokeStraight1 2.5
	define CwOuterStrokeStraight2 3.0
	define CwDoubleV              3.625
	define CwCyrlOmega            3.00
	define CwWCoCurly             5.0
	define CwWCoStraight          3.5
	define CwWCoDoubleV           3.5
	define PXBot1Curly            0.25
	define PXBot1Straight         0.235

	define [WDim df top bodyType] : begin
		local strokeOuter : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwOuterStrokeCurly     [Math.sqrt df.div]
			[Just FORM-STRAIGHT]   : AdviceStroke CwOuterStrokeStraight1 [Math.sqrt df.div]
			[Just FORM-FLAT-TOP]   : AdviceStroke CwOuterStrokeStraight2 [Math.sqrt df.div]
			[Just FORM-DOUBLE-V]   : AdviceStroke CwDoubleV [Math.sqrt df.div]
			[Just FORM-ASYMMETRIC] : AdviceStroke CwDoubleV [Math.sqrt df.div]
			[Just FORM-CYRL-OMEGA] : AdviceStroke CwCyrlOmega [Math.sqrt df.div]
		local fineOuter : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwFineOuter df.div
			[Just FORM-STRAIGHT]   : AdviceStroke CwFineOuterStraight [Math.sqrt df.div]
			[Just FORM-FLAT-TOP]   : AdviceStroke CwFineOuterStraight [Math.sqrt df.div]
			[Just FORM-DOUBLE-V]   : AdviceStroke CwDoubleV [Math.sqrt df.div]
			[Just FORM-ASYMMETRIC] : AdviceStroke CwDoubleV [Math.sqrt df.div]
			[Just FORM-CYRL-OMEGA] : AdviceStroke CwCyrlOmega [Math.sqrt df.div]
		local fineInner : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwFineInner          df.div
			[Just FORM-STRAIGHT]   : AdviceStroke CwFineInnerStraight [Math.sqrt df.div]
			[Just FORM-FLAT-TOP]   : AdviceStroke CwFineInnerStraight [Math.sqrt df.div]
			[Just FORM-DOUBLE-V]   : AdviceStroke CwFineInnerDoubleV  [Math.sqrt df.div]
			[Just FORM-ASYMMETRIC] : AdviceStroke CwDoubleV  [Math.sqrt df.div]
			[Just FORM-CYRL-OMEGA] : AdviceStroke CwCyrlOmega  [Math.sqrt df.div]
		local fineHeight : (fineOuter + fineInner) / 2

		local wCo : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwWCoCurly    df.div
			[Just FORM-STRAIGHT]   : AdviceStroke CwWCoStraight df.div
			[Just FORM-FLAT-TOP]   : AdviceStroke CwWCoStraight df.div
			[Just FORM-DOUBLE-V]   : AdviceStroke CwWCoDoubleV df.div
			[Just FORM-ASYMMETRIC] : AdviceStroke CwWCoDoubleV df.div
			[Just FORM-CYRL-OMEGA] : AdviceStroke CwWCoDoubleV df.div
		local kWCoShrink CThin
		local pxBot1 : match bodyType
			[Just FORM-CURLY]        0.25
			[Just FORM-STRAIGHT]     0.235
			[Just FORM-FLAT-TOP]     0.235
			[Just FORM-DOUBLE-V]     0.315
			[Just FORM-ASYMMETRIC]   0.3
			[Just FORM-CYRL-OMEGA]   0.275

		local botMixOffset : 0.5 * HVContrast * wCo
		local xBot1 : [if bodyType O 0] + [mix (df.leftSB + botMixOffset) (df.rightSB - botMixOffset) pxBot1]
		local xBot2 : df.width - xBot1
		local topWithoutSerif : if SLAB (top - Stroke) top
		local wMidHeight : match bodyType
			[Just FORM-CURLY]      : top * 0.6
			[Just FORM-STRAIGHT]   : topWithoutSerif * 0.72
			[Just FORM-FLAT-TOP]     topWithoutSerif
			[Just FORM-DOUBLE-V]     top
			[Just FORM-ASYMMETRIC]   top
			[Just FORM-CYRL-OMEGA]   top

		local xRight1 : match bodyType
			([Just FORM-DOUBLE-V] || [Just FORM-ASYMMETRIC] || [Just FORM-CYRL-OMEGA])
				mix (df.leftSB + botMixOffset) (df.rightSB - botMixOffset) (2 * pxBot1)
			__
				if (bodyType < FORM-DOUBLE-V) df.middle
		local xLeft2  : df.width - xRight1

		local corWCo : DiagCorDs wMidHeight (xRight1 - xBot1) wCo
		local wCoCr : corWCo * wCo

		local corFOuter : DiagCorDs top (xBot1 - df.leftSB) fineOuter
		local fineOuterCr : Math.min (kWCoShrink * wCoCr) : corFOuter * fineOuter
		local strokeOuterCr : corFOuter * strokeOuter

		local corFInner : DiagCorDs wMidHeight (xRight1 - xBot1) fineInner
		local fineInnerCr : Math.min wCoCr : corFInner * fineInner
		local fineInnerCrTop : match bodyType
			[Just FORM-DOUBLE-V]     fineInnerCr
			[Just FORM-ASYMMETRIC]   fineInnerCr
			[Just FORM-CYRL-OMEGA]   fineInnerCr
			__                     : kWCoShrink * wCoCr

		local curlyStraightSegLength : match bodyType
			[Just FORM-CURLY]  0.25
			__                 0.05

		return : object xBot1 xBot2 strokeOuter strokeOuterCr fineOuter fineOuterCr fineInner fineInnerCr fineInnerCrTop fineHeight wMidHeight xRight1 xLeft2 wCoCr curlyStraightSegLength

	### W and w
	define [WShapeImpl df top bodyType slabType] : glyph-proc
		local dim : WDim df top bodyType

		if (bodyType !== FORM-CURLY) : begin
			include : tagged 'strokeDown1' : dispiro
				widths.lhs dim.strokeOuterCr
				flat (df.leftSB + O * 2) top [heading Downward]
				g4   (dim.xBot1 - 0.5 * HVContrast * dim.wCoCr) 0 [widths.lhs.heading dim.fineOuterCr Downward]
		: else : begin
			include : tagged 'strokeDown1' : dispiro
				widths.lhs dim.strokeOuter
				flat df.leftSB top [heading Downward]
				curl df.leftSB (top * (1 - dim.curlyStraightSegLength)) [heading Downward]
				quadControls 0 0.3 6 unimportant
				g4   (dim.xBot1 - 0.5 * HVContrast * dim.wCoCr) 0 [widths.lhs.heading dim.fineOuterCr Downward]

		local kTopShift : match bodyType
			[Just FORM-DOUBLE-V]     0
			[Just FORM-ASYMMETRIC]   0
			[Just FORM-CYRL-OMEGA]   0
			__                       1
		local k1 0.5
		local k2 : 1 - k1
		local shiftT  : kTopShift * HVContrast * (0.5 * dim.wCoCr - 0.5 * dim.fineInnerCrTop)
		local shiftB  :             HVContrast * (0.5 * dim.wCoCr - 0.5 * dim.fineOuterCr   )

		include : tagged 'strokeUp1' : difference
			dispiro
				flat (dim.xRight1 - shiftT) dim.wMidHeight [widths.center.heading dim.fineInnerCrTop Downward]
				curl (dim.xBot1 + shiftB)   0              [widths.center.heading dim.fineOuterCr    Downward]
			if (bodyType !== FORM-ASYMMETRIC && bodyType !== FORM-CYRL-OMEGA) [glyph-proc]
				spiro-outline
					corner dim.xLeft2 dim.wMidHeight
					corner dim.xBot2  0
					corner df.width  0
					corner df.width  dim.wMidHeight

		include : tagged 'strokeDown2' : dispiro
			flat (dim.xLeft2 + shiftT) dim.wMidHeight [widths.center.heading dim.fineInnerCrTop Downward]
			curl (dim.xBot2 - shiftB)   0             [widths.center.heading dim.fineOuterCr    Downward]

		if (bodyType !== FORM-CURLY && bodyType !== FORM-CYRL-OMEGA) : begin
			include : tagged 'strokeUp2' : dispiro
				widths.rhs dim.strokeOuterCr
				flat (df.rightSB - O * 2) top [heading Downward]
				g4   (dim.xBot2 + 0.5 * HVContrast * dim.wCoCr) 0 [widths.rhs.heading dim.fineOuterCr Downward]
		: else : begin
			include : tagged 'strokeUp2' : dispiro
				widths.rhs dim.strokeOuter
				flat df.rightSB top [heading Downward]
				curl df.rightSB (top * (1 - dim.curlyStraightSegLength)) [heading Downward]
				quadControls 0 0.3 6 unimportant
				g4   (dim.xBot2 + 0.5 * HVContrast * dim.wCoCr) 0 [widths.rhs.heading dim.fineOuterCr Downward]

		local oSlabPos : if bodyType (O * 2) 0

		local sf : SerifFrame top 0 df.leftSB df.rightSB
		local sfm : SerifFrame top 0 (df.leftSB + oSlabPos) (df.rightSB - oSlabPos)
		include : match slabType
			[Just SERIFS-NONE]   : glyph-proc
			[Just SERIFS-AUTO]   : NeedSlab SLAB : composite-proc sf.lt.full sf.rt.full
			[Just SERIFS-MOTION] : begin sfm.lt.outer
			[Just SERIFS-CURSIVE] : NeedSlab SLAB sfm.lt.outer
			[Just SERIFS-DOUBLE-V] : NeedSlab SLAB : composite-proc sfm.lt.outer sfm.rt.outer
			[Just SERIFS-ASYMMETRIC] : NeedSlab SLAB : composite-proc sfm.lt.outer sfm.rt.full

	define [WHooktopShape df top bodyType serifsType] : glyph-proc
		include : WShapeImpl df top bodyType serifsType

		local dim : WDim df top bodyType

		# Eject unnecessary contours
		eject-contour 'strokeUp2'
		eject-contour 'serifRT'

		include : dispiro
			widths.rhs dim.strokeOuter
			straight.down.start df.rightSB (top - Hook) [heading Downward]
			quadControls 0 0.3 6 unimportant
			g4 (dim.xBot2 + 0.5 * HVContrast * dim.wCoCr) 0 [widths.rhs.heading dim.fineOuterCr Downward]

		include : VerticalHook (df.rightSB - 0.5 * dim.strokeOuter * HVContrast) (top - Hook) (HookX * 0.65) (-Hook + 0.5 * dim.strokeOuter) dim.strokeOuter


	define [WVertSides df top bodyType slabType] : glyph-proc
		include : new-glyph : glyph-proc
			include : MShape top df (form -- 2) (slabType -- 0)
			include : FlipAround (df.width / 2) (top / 2)

		local sf : SerifFrame top 0 df.leftSB df.rightSB
		include : match slabType
			[Just SERIFS-AUTO]   : NeedSlab SLAB : composite-proc sf.lt.full sf.rt.full
			[Just SERIFS-MOTION] : begin sf.lt.outer
			___                  : glyph-proc

	define [WVSHookTopShape df top bodyType serifsType] : glyph-proc
		include : WVertSides df top bodyType serifsType

		# Eject unnecessary contours
		eject-contour 'strokeLeftBar'
		eject-contour 'serifRT'

		include : dispiro
			widths.rhs
			flat df.rightSB (top - Hook) [heading Downward]
			curl df.rightSB [Math.min (0.8 * top) (top - Hook - 0.1)] [heading Downward]
			straight.down.end df.rightSB 0 [widths.rhs.heading [AdviceStroke 4 df.div] Downward]

		include : VerticalHook (df.rightSB - HalfStroke * HVContrast) (top - Hook) (HookX * 0.65) (-Hook + HalfStroke)


	define [WCursiveImplImpl fHookTop df top bodyType slabType] : glyph-proc
		define fine : AdviceStroke 3.25 df.div
		define mfine : fine * CThin
		define x0 : mix df.leftSB df.rightSB 0.1
		define y0 : top - O
		define y1 : mix 0 top 0.8
		define x1 : df.leftSB + 0 * OX
		define y3 : mix fine top 0.375
		define y4 : mix y3 top 0.5
		define rInY : 1 * [DiagonalTailInnerRadius]

		include : dispiro
			widths.lhs fine
			flat x1 top [heading Downward]
			curl x1 (fine + rInY) [heading Downward]
			arcvh 16
			g4 [Math.min ([mix (x1 + fine * HVContrast) (df.middle - fine / 2 * HVContrast) 0.5] - (fine - mfine) * HVContrast) (x1 + fine * HVContrast + rInY)] O [heading {.x (TanSlope + (0.5 * (fine - mfine) / fine)) .y 1}]
			archv 16
			flat (df.middle + (mfine - fine / 2) * HVContrast) y3 [widths.heading mfine 0 Upward]
			curl (df.middle + (mfine - fine / 2) * HVContrast) y4 [heading Upward]

		if fHookTop
		: then : begin
			include : VerticalHook (df.rightSB - 0.5 * fine * HVContrast) (top - Hook) (HookX * 0.65) (-Hook + 0.5 * fine) fine
			include : dispiro
				widths.rhs fine
				flat (df.width - x1) (top - Hook) [heading Downward]
				curl (df.width - x1) y3           [heading Downward]
				arcvh 16
				g4 ([mix (df.width - x1) (df.middle - fine / 2 * HVContrast) 0.5] + fine * CorrectionOMidX) O
				archv 16
				flat (df.middle - (mfine - fine / 2) * HVContrast) y3 [widths.heading 0 mfine Upward]
				curl (df.middle - (mfine - fine / 2) * HVContrast) y4 [heading Upward]
		: else : begin
			include : dispiro
				widths.rhs fine
				g4 (df.width - x0) y0
				g4 (df.width - x1 - OX) (top / 2)
				arcvh 16
				g4 ([mix (df.width - x1) (df.middle - fine / 2 * HVContrast) 0.5] + fine * CorrectionOMidX) O
				archv 16
				flat (df.middle - (mfine - fine / 2) * HVContrast) y3 [widths.heading 0 mfine Upward]
				curl (df.middle - (mfine - fine / 2) * HVContrast) y4 [heading Upward]

		local sf : SerifFrame top 0 x1 df.rightSB
		include : match slabType
			[Just SERIFS-CURSIVE] : NeedSlab SLAB sf.lt.outer
			[Just SERIFS-MOTION]  : begin sf.lt.outer
			___                   : glyph-proc

	define [WCursiveImpl df top bodyType serifsType] : WCursiveImplImpl false df top bodyType serifsType
	define [WHookTopCursive df top bodyType serifsType]  : WCursiveImplImpl true  df top bodyType serifsType

	define WConfig : object
		cyrlSmallOmega                     { WShapeImpl   WHooktopShape   FORM-CYRL-OMEGA   SERIFS-NONE       }
		straightAsymmetric                 { WShapeImpl   WHooktopShape   FORM-ASYMMETRIC   SERIFS-ASYMMETRIC }
		straightDoubleV                    { WShapeImpl   WHooktopShape   FORM-DOUBLE-V     SERIFS-DOUBLE-V   }
		straightFlatTop                    { WShapeImpl   WHooktopShape   FORM-FLAT-TOP     SERIFS-AUTO       }
		straight                           { WShapeImpl   WHooktopShape   FORM-STRAIGHT     SERIFS-AUTO       }
		straightVerticalSides              { WVertSides   WVSHookTopShape FORM-STRAIGHT     SERIFS-AUTO       }
		curly                              { WShapeImpl   WHooktopShape   FORM-CURLY        SERIFS-AUTO       }
		cursive                            { WCursiveImpl WHookTopCursive FORM-CURLY        SERIFS-CURSIVE    }
		straightAsymmetricMotionSerifed    { WShapeImpl   WHooktopShape   FORM-ASYMMETRIC   SERIFS-MOTION     }
		straightDoubleVMotionSerifed       { WShapeImpl   WHooktopShape   FORM-DOUBLE-V     SERIFS-MOTION     }
		straightFlatTopMotionSerifed       { WShapeImpl   WHooktopShape   FORM-FLAT-TOP     SERIFS-MOTION     }
		straightVerticalSidesMotionSerifed { WVertSides   WVSHookTopShape FORM-STRAIGHT     SERIFS-MOTION     }
		straightMotionSerifed              { WShapeImpl   WHooktopShape   FORM-STRAIGHT     SERIFS-MOTION     }
		curlyMotionSerifed                 { WShapeImpl   WHooktopShape   FORM-CURLY        SERIFS-MOTION     }
		cursiveMotionSerifed               { WCursiveImpl WHookTopCursive FORM-CURLY        SERIFS-MOTION     }

	foreach { suffix { implT hookTopImplT bodyType slabType } } [Object.entries WConfig] : do
		create-glyph "W.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital
			include : implT df CAP bodyType slabType

		create-glyph "w.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e
			include : implT df XH bodyType slabType

		create-glyph "ww.\(suffix)": glyph-proc
			local df : DivFrame 1 3
			local gap : CAP * 0.05
			set-width df.width
			include : df.markSet.capital
			include : implT df (CAP / 2 - gap / 2) bodyType slabType
			include : ApparentTranslate 0 (CAP / 2 + gap)
			include : implT df (CAP / 2 - gap / 2) bodyType slabType

		if hookTopImplT : create-glyph "WHookTop.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.capital
			include : hookTopImplT df CAP bodyType slabType

		if hookTopImplT : create-glyph "wHookTop.\(suffix)" : glyph-proc
			local df : DivFrame para.diversityM 3
			set-width df.width
			include : df.markSet.e
			include : hookTopImplT df XH bodyType slabType

	select-variant 'W' 'W'
	link-reduced-variant 'W/sansSerif' 'W' MathSansSerif
	select-variant 'WHookTop' 0x2C72
	select-variant 'w' 'w'
	link-reduced-variant 'w/sansSerif' 'w' MathSansSerif
	select-variant 'smcpW' 0x1D21 (shapeFrom -- 'w') (follow -- 'W')
	select-variant 'ww' 0x2AC (follow -- 'w')
	select-variant 'wHookTop' 0x2C73
	alias 'cyrl/We' 0x51C 'W'
	alias 'cyrl/we' 0x51D 'w'
	turned 'turnw' 0x28D 'w' (Middle * para.diversityM) (XH / 2)

	alias 'cyrl/omega' 0x461 'w.cyrlSmallOmega'

	glyph-block-import Letter-Blackboard : BBS BBD
	glyph-block-import Letter-Latin-V : BBVShape BBVOuterMaskShape

	define [BBWShape top] : begin
		local offset : BBD * 2
		local ksW : [AdviceStroke2 8 2 top] / BBS
		local kdW : Math.min ksW (3 / 4)
		return : union
			difference
				BBVShape SB (RightSB - offset) kdW ksW top
				BBVOuterMaskShape (SB + offset) RightSB kdW ksW top
			BBVShape (SB + offset) RightSB kdW ksW top

	create-glyph 'mathbb/W' 0x1D54E : composite-proc [MarkSet.capital] [BBWShape CAP]
	create-glyph 'mathbb/w' 0x1D568 : composite-proc [MarkSet.e]       [BBWShape XH]