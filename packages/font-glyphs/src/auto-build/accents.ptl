###### Automatic builds
$$include '../meta/macros.ptl'

import [Dotless AnyDerivingCv DotlessOrNot getGrTree CvDecompose LeaningMark LeaningMarkSpacer] from "@iosevka/glyph/relation"
import [fallback ArrayUtil MatchUtil constant] from "@iosevka/util"
import as UnicodeKnowledge from "../meta/unicode-knowledge.mjs"

extern Map
extern Set

glyph-module

glyph-block AutoBuild-Accents : begin
	glyph-block-import Common-Derivatives : query-glyph refer-glyph

	define [suggestName _name] : begin
		local name _name
		if [query-glyph name] : begin
			local j 2
			while [query-glyph (name + j)] : inc j
			set name (name + j)
		return name

	define [suggestMappedName map key name] : begin
		if map.(key) : return map.(key)
		local amended : suggestName name
		set map.(key) amended
		return amended

	# Here, we build a simplified substitution builder that does the mark substitutions
	define [substParts parts ignore backtrack input loookAhead production] : begin
		local igl 0
		while (igl < parts.length) : begin
			local m : substMatch parts igl ignore backtrack input loookAhead
			if [not m]
			: then : inc igl
			: else : begin
				local inputGlyphs : ArrayUtil.mapIndexToItems parts m
				local producedGlyphs : production.apply null inputGlyphs
				foreach i [range (m.length - 1) downtill 0] : begin
					parts.splice m.(i) 1
				ArrayUtil.insertSliceAt parts m.0 producedGlyphs
				set igl : m.(m.length - 1) + 1 + producedGlyphs.length - m.length

		return parts

	define [substMatch parts igl ignore backtrack input lookAhead] : begin
		if (igl >= parts.length) : return null
		if [ignore parts.(igl)] : return null
		if [not : input.0 parts.(igl)] : return null

		local m { igl }

		# Check input
		local iglInput : igl + 1
		foreach iInput [range 1 input.length] : begin
			while (iglInput < parts.length && [ignore parts.(iglInput)]) : inc iglInput
			if (iglInput >= parts.length) : return null
			if [not : input.(iInput) parts.(iglInput)] : return null
			m.push iglInput
			inc iglInput

		# Check lookahead
		local iglLookAhead iglInput
		foreach iLookAhead [range 0 lookAhead.length] : begin
			while (iglLookAhead < parts.length && [ignore parts.(iglLookAhead)]) : inc iglLookAhead
			if (iglLookAhead >= parts.length) : return null
			if [not : lookAhead.(iLookAhead) parts.(iglLookAhead)] : return null
			inc iglLookAhead

		# Check backtrack
		local iglBacktrack : igl - 1
		foreach iBacktrack [range (backtrack.length - 1) downtill 0] : begin
			while (iglBacktrack >= 0 && [ignore parts.(iglBacktrack)]) : dec iglBacktrack
			if (iglBacktrack < 0) : return null
			if [not : backtrack.(iBacktrack) parts.(iglBacktrack)] : return null
			dec iglBacktrack

		return m

	define [dotless g] : begin
		local gDotless : query-glyph : Dotless.get g
		if [not gDotless] : return null
		return {gDotless}

	define [isMark k] : function [g] : begin
		return : g && g.markAnchors && g.markAnchors.(k)
	define [isMarkExcluding k] : function [g] : begin
		return : g && g.markAnchors && [Object.keys g.markAnchors].length && !g.markAnchors.(k)
	define [hasBaseAnchor k] : function [g] : begin
		return : g && g.baseAnchors && g.baseAnchors.(k)
	define [isLeaningMark k] : function [g] : begin
		return : g && g.markAnchors && g.markAnchors.(k) && [LeaningMark.get g]
	define [leaningMarkSplit g] : begin
		local spacer : query-glyph : LeaningMarkSpacer.get g
		local alternative : query-glyph : LeaningMark.get g
		if (spacer && alternative) : return { spacer alternative }
		return { g }

	define [markSubst uk] : begin
		local mapping : new Map
		foreach { k v } [Object.entries uk] : begin
			local gFrom : query-glyph k
			local gTo : query-glyph v
			mapping.set gFrom gTo

		define [matcher g] : mapping.has g
		define [ignore g] : g && g.markAnchors && [Object.keys g.markAnchors].length && ![matcher g]
		define [production g] : list ([mapping.get g] || g)

		return : object matcher ignore production

	define [markSplit uk] : begin
		local mapping : new Map
		foreach { k v } [Object.entries uk] : begin
			local gFrom : query-glyph k
			local gsTo : v.map query-glyph
			mapping.set gFrom gsTo

		define [matcher g] : mapping.has g
		define [ignore g] : g && g.markAnchors && [Object.keys g.markAnchors].length && ![matcher g]
		define [production g] : begin
			console.log g [mapping.get g]
			return : [mapping.get g] || { g }

		return : object matcher ignore production

	define [markCombine uk] : begin
		local first : new Set
		local second : new Set
		local mapping : new Map

		foreach { k1 m } [Object.entries uk] : begin
			foreach { k2 v } [Object.entries m] : begin
				local g1 : query-glyph k1
				local g2 : query-glyph k2
				local g3 : query-glyph v
				if (g1 && g2 && g3) : begin
					first.add g1
					second.add g2

					local mm : mapping.get g1
					if [not mm] : begin
						set mm : new Map
						mapping.set g1 mm
					mm.set g2 g3

		define [matchFirst g] : first.has g
		define [matchSecond g] : second.has g
		define [production g1 g2] : begin
			local mm : mapping.get g1
			if [not mm] : return { g1 g2 }
			local g3 : mm.get g2
			if [not g3] : return { g1 g2 }
			return { g3 }

		return : object matchFirst matchSecond production

	define iotaLF : markSubst UnicodeKnowledge.iotaBelowToLfTf
	define ogonek : markSplit UnicodeKnowledge.ogonekBelowToTRTf
	define upperTonos : markSubst UnicodeKnowledge.upperGrekMarkToTonosTf

	define markComposition : markCombine UnicodeKnowledge.markCompositionTf

	define [subParts parts] : begin
		### Keep the semantics here synchronized with `ccmp` feature

		# Handle dotless form
		substParts parts [isMarkExcluding 'above'] {} {dotless} {[isMark 'above']} dotless

		# Handle iota subscript
		substParts parts iotaLF.ignore {[hasBaseAnchor 'lf']} {iotaLF.matcher} {} iotaLF.production

		# Handle ogonek
		substParts parts ogonek.ignore {[hasBaseAnchor 'trailing']} {ogonek.matcher} {} ogonek.production

		# Handle leaning marks
		substParts parts [isMarkExcluding 'above'] {[MatchUtil.either [hasBaseAnchor 'leaningAbove'] [isMark 'leaningAbove']]} {[isLeaningMark 'above']} {} leaningMarkSplit
		substParts parts [isMarkExcluding 'below'] {[MatchUtil.either [hasBaseAnchor 'leaningBelow'] [isMark 'leaningBelow']]} {[isLeaningMark 'below']} {} leaningMarkSplit

		# Handle mark combinations (Greek)
		substParts parts MatchUtil.never {} { markComposition.matchFirst markComposition.matchSecond } {} markComposition.production

		# Handle upper Greek Tonos marks
		substParts parts MatchUtil.never {[hasBaseAnchor 'grekUpperTonos']} {upperTonos.matcher} {} upperTonos.production

	define [pad _s n] : begin
		local s _s
		while (s.length < n) : s = '0' + s
		return s

	local foundDecompositions {.}

	local goalCodes : range 0x0000 0x1FFFF
	foreach code goalCodes : if [not : glyphStore.queryByUnicode code] : do
		local parts    { }
		local allFound true

		local customDecomp   UnicodeKnowledge.decompOverrides.(code)

		local str : String.fromCodePoint code
		local nfd          : str.normalize 'NFD'

		if customDecomp
		: then : begin
			foreach partName customDecomp : begin
				local part : glyphStore.queryByName partName
				if [not part]
				: then : set allFound false
				: else : parts.push part

		: else : if (str !== nfd) : begin
			local nfdChars : Array.from nfd
			foreach partChar [items-of nfdChars] : begin
				local part : glyphStore.queryByUnicode [partChar.codePointAt 0]
				if [not part]
				: then : set allFound false
				: else : parts.push part

		if (allFound && parts.length) : begin
			local glyphName : 'u' + [code.toString 16 :.padStart 4 '0']
			subParts parts
			set foundDecompositions.(glyphName) { glyphName code parts }

	local s_goalName  nothing
	local s_code      nothing
	local s_parts     nothing

	define [recursivelyDecompose g sink] : begin
		local decomposition : CvDecompose.get g
		if decomposition : foreach gnPart [items-of decomposition] : begin
			local g : query-glyph gnPart
			if g : recursivelyDecompose g sink
		: else : begin
			sink.push : glyphStore.queryNameOf g

	define construction : glyph-proc
		include s_parts.0 AS_BASE ALSO_METRICS
		local nonTrivial : AnyDerivingCv.hasNonDerivingVariants s_parts.0
		if nonTrivial : console.log s_parts.0
		foreach part [items-of : s_parts.slice 1] : if part : begin
			include part
			if (part.markAnchors && part.markAnchors.bottomRight) : begin
				eject-contour 'serifRB'
				set nonTrivial true
		if ([not nonTrivial] && [AnyDerivingCv.query s_parts.0]) : begin
			local decomposeParts { }
			foreach part [items-of s_parts] : recursivelyDecompose part decomposeParts
			CvDecompose.set currentGlyph decomposeParts

	define [RootGlyphProc goalName code parts] : begin
		set s_goalName goalName
		set s_code   code
		set s_parts  parts
		return : create-glyph goalName code construction

	define [NeedBuildMesh glyphName part0Name] : begin
		define g : query-glyph glyphName
		define part0 : query-glyph part0Name
		if [not g] : return false
		if [not part0] : return false
		if [not : CvDecompose.get g] : return true
		if [DotlessOrNot.query part0] : return true
		return false

	foreach [_id : items-of : Object.keys foundDecompositions] : do
		local { glyphName code parts } foundDecompositions.(_id)
		local saved : RootGlyphProc glyphName code parts
		if saved : begin
			define part0Name : glyphStore.queryNameOf parts.0
			if (parts.0 != [query-glyph part0Name]) : throw : new Error "Unreachable"

		if [NeedBuildMesh glyphName part0Name] : begin
			local dstTree {}
			local targetNameMap  {.}
			set targetNameMap.(part0Name) glyphName
			local tree : getGrTree part0Name { DotlessOrNot AnyDerivingCv } query-glyph
			foreach [{gr origBase relBase} : items-of tree] : begin
				local origGN targetNameMap.(origBase)
				if [not origGN] : throw : new Error 'Unreachable'
				local relGN  : suggestMappedName targetNameMap relBase [gr.amendName origGN]
				local parts1 : parts.slice 0
				set parts1.0 : query-glyph relBase
				if [not : query-glyph relGN] : RootGlyphProc relGN null parts1
				if [query-glyph origGN] : gr.set [query-glyph origGN] relGN
