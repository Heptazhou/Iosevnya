[simple.center-ops]
ligGroup =  'center-ops'
samples = [":=", ":-", ":+", "<*", "<*>", "*>", "+:", "-:", "=:", "<***>", ":>"]
desc = 'Vertically align some of the operators (like `*`) to the center position it is before or after a "center" operator (like `+`)'

[simple.arrow]
ligGroup =  "arrow"
samples = ["<--", "<---", "<<-", "<-", "->", "->>", "-->", "--->", "<->", "<-->", "<--->", "<---->", "<==", "<===", "<<=", "=>", "=>>", "==>", "===>", "<=>", "<==>", "<===>", "<====>", "<~~", "<~", "~>", "~~>", "-------->"]
desc = 'Enable ligation set that forms arrows'

[simple.arrow2]
ligGroup =  "arrow2"
samples = ["-<<", "-<", "-<-", "->-", ">-", ">>-", "=<<", "=<", "=<=", "=>=", "<=<", ">=>", "-<<", "-<", "-<-", "->-", ">-", ">>-", "=<<", ">>=", "=<", "=<=", "=>="]
desc = 'Enable ligation for more arrows, like `>>=`'

[simple.trig]
ligGroup =  "trig"
samples = ["<|", "<|>", "|>"]
desc = 'Enable ligation for `<|`, `|>` , `<||`, and other bar-and-angle-bracket symbols'

[simple.eqeqeq]
ligGroup =  "eqeqeq"
samples = ["==="]
sampleRank = 2
desc = 'Enable special ligation for `===` with triple lines'

[simple.eqeq]
ligGroup =  "eqeq"
samples = ["==", "==="]
desc = 'Enable ligation for `==` and `===`'

[simple.ineq]
ligGroup =  "ineq"
samples = ["<=", ">="]
desc = 'Enable ligation for `<=` and `>=`'

[simple.exeqeq]
ligGroup =  "exeqeq"
samples = ["!=="]
sampleRank = 3
desc = 'Enable special ligation for `!==` with triple lines'

[simple.exeqeq-dotted]
ligGroup =  "exeqeq-dotted"
samples = ["!=="]
sampleRank = 4
desc = 'Enable special ligation for `!==` with triple lines, and a dot at below for distinction'

[simple.eqexeq]
ligGroup =  "eqexeq"
samples = ["=!="]
desc = 'Enable special ligation for `=!=` with triple lines'

[simple.eqexeq-dotted]
ligGroup =  "eqexeq-dotted"
samples = ["=!="]
sampleRank = 2
desc = 'Enable special ligation for `=!=` with triple lines and a dot at below for distinction'

[simple.eqexeq-dl]
ligGroup =  "eqexeq-dl"
samples = ["=!="]
desc = 'Enable special ligation for `=!=` with double lines'

[simple.eqexeq-dl-dotted]
ligGroup =  "eqexeq-dl-dotted"
samples = ["=!="]
sampleRank = 2
desc = 'Enable special ligation for `=!=` with double lines, and a dot at below for distinction'

[simple.exeq]
ligGroup =  "exeq"
samples = ["!=", "!=="]
desc = 'Enable ligation for `!=` and `!==`'

[simple.exeq-dotted]
ligGroup =  "exeq-dotted"
samples = ["!=", "!=="]
rank = 2
desc = 'Enable ligation for `!=` and `!==` with a dot at below for distinction'

[simple.tildeeq]
ligGroup =  "tildeeq"
samples = ["~="]
desc = 'Enable ligation for `~=` as inequality'

[simple.eqslasheq]
ligGroup = "eqslasheq"
samples = ["=/="]
sampleRank = 2
desc = 'Enable special triple-line ligation for `=/=` as inequality'

[simple.slasheq]
ligGroup = "slasheq"
samples = ["/=", "=/="]
desc = 'Enable ligation for `/=` and `=/=` as inequality'

[simple.ltgt-ne]
ligGroup = "ltgt-ne"
samples = ["<>"]
sampleRank = 2
desc = 'Enable ligation for `<>` as inequality'

[simple.ltgt-diamond]
ligGroup = "ltgt-diamond"
samples = ["<>"]
desc = 'Enable ligation for `<>` as diamond'

[simple.brst]
ligGroup = "brst"
samples = ["(*", "*)", "(* comm *)"]
desc = 'Center asterisk in `(*` and `*)`'

[simple.plusplus]
ligGroup =  "plusplus"
samples = ["++", "+++"]
desc = 'Enable ligation for `++` and further plus-chaining'

[simple.kern-dotty]
ligGroup =  "kern-dotty"
samples = ["::", ":::"]
desc = 'Move connecting dotty punctuations closer, like for `::`, `:::` and `...`'

[simple.kern-bars]
ligGroup =  "kern-bars"
samples = ["||", "|||"]
desc = 'Move consecutive bars closer, like for `||`, `|||` and `//`'

[simple.logic]
ligGroup =  "logic"
samples = ["/\\", "\\/", "|-", "-|"]
desc = 'Enable ligation for `/\` and `\/`'

[simple.llgg]
ligGroup =  "llgg"
samples = ["<<", ">>", "<<<", ">>>"]
desc = 'Enable ligation for `<<`, `>>` and other angle-bracket chaining'

[simple.llggeq]
ligGroup =  "llggeq"
samples = ["<<=", ">>="]
sampleRank = 2
desc = 'Enable ligation for `<<=`, `>>=` as shift operator'

[simple.dot-as-operator]
ligGroup =  "dot-oper"
samples = ["<.", "<.>", ".>"]
desc = 'Treat dot (`.`) as operator and perform chained centering'

[simple.bar-triggers-op-centering]
ligGroup =  "bar-triggers-op-centering"
samples = [":|", ":|:", "|:"]
desc = 'Bars (`/`, `|`, `\`) will trigger operator centering'

[simple.lteq-as-arrow]
ligGroup =  "arrowZALE"
samples = ["<="]
sampleRank = 2
desc = 'Treat `<=` as arrow'

[simple.gteq-as-co-arrow]
ligGroup =  "arrowZAGE"
samples = [">="]
sampleRank = 2
desc = 'Treat `>=` as co-arrow'

[simple.html-comment]
ligGroup =  "html-comment"
samples = ["<!--", "<!---"]
desc = 'Enable ligation for `<!--` and `<!---`'

[simple.colon-greater-as-colon-arrow]
ligGroup = "colon-greater"
samples = [":>"]
sampleRank = 2
desc = 'Transform `:>` into `:` and a narrow arrow'

[simple.brace-bar]
ligGroup = 'brace-bar'
samples = ["{|", "|}"]
desc = 'Enable ligation for `{|` and `|}`'

[simple.brack-bar]
ligGroup = 'brack-bar'
samples = ["[|", "|]"]
desc = 'Enable ligation for `[|` and `|]`'

[simple.connected-underscore]
ligGroup = 'connected-underscore'
samples = ["__", "___"]
desc = 'Make contiguous underscores (like `__`) connected'

[simple.connected-number-sign]
ligGroup = 'connected-number-sign'
samples = ["##", "###"]
desc = 'Make contiguous number signs (like `##`) connected'

[simple.connected-tilde-as-wave]
ligGroup = 'connected-tilde-as-wave'
samples = ["~~", "~~~"]
desc = 'Make contiguous ASCII tildes (like `~~`) connected as a wave line'

[simple.connected-hyphen-as-solid-line]
ligGroup = 'connected-hyphen-as-solid-line'
samples = ["--", "---"]
desc = 'Make contiguous hyphen-minuses (like `--`) connected as a straight solid line'

[simple.connected-hyphen-as-semi-dashed-line]
ligGroup = 'connected-hyphen-as-semi-dashed-line'
samples = ["--", "---"]
sampleRank = 2
desc = 'Make contiguous hyphen-minuses (like `--`) connected as a straight semi-dashed line, identifying each hyphen component'

###################################################################################################

# This feature is on by default by many software
[composite.default-calt]
tag     = 'calt'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'llgg', 'llggeq', 'eqeq', 'exeq', 'ineq', 'plusplus', 'kern-dotty', 'kern-bars']
brief   = 'Default'
desc    = 'Default setting in text editors'
readmeDesc = 'Inherit default ligation set'

[composite.dlig]
tag     = 'dlig'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'arrow2', 'llgg', 'eqeq', 'exeq', 'ineq', 'ltgt-diamond', 'plusplus', 'kern-dotty', 'kern-bars', 'dot-as-operator', 'logic', 'brst', 'brace-bar', 'brack-bar', 'connected-underscore', 'connected-number-sign', 'connected-tilde-as-wave', 'connected-hyphen-as-semi-dashed-line']
brief   = 'Discretionary'
desc    = 'Discretionary ligatures'

[composite.clike]
tag     = 'CLIK'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'llgg', 'llggeq', 'eqeqeq', 'eqeq', 'exeqeq', 'exeq', 'ineq', 'plusplus', 'kern-dotty', 'kern-bars']
desc    = 'C-Like'

[composite.javascript]
tag     = 'JSPT'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'llgg', 'llggeq', 'eqeqeq', 'eqeq', 'exeqeq', 'exeq', 'ineq', 'plusplus', 'kern-dotty', 'kern-bars']
desc    = 'JavaScript'

[composite.php]
tag     = 'PHPX'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'llgg', 'llggeq', 'eqeqeq', 'eqeq', 'exeqeq', 'exeq', 'ineq', 'plusplus', 'kern-dotty', 'kern-bars']
desc    = 'PHP'

[composite.ml]
tag     = 'MLXX'
buildup = ['center-ops', 'arrow', 'trig', 'eqeq', 'ltgt-ne', 'ineq', 'brst', 'plusplus', 'logic', 'kern-dotty', 'kern-bars']
desc    = 'ML'

[composite.fsharp]
tag     = 'FSHP'
buildup = ['center-ops', 'arrow', 'trig', 'eqeq', 'ltgt-ne', 'ineq', 'brst', 'plusplus', 'logic', 'kern-dotty', 'kern-bars']
desc    = 'F#'

[composite.fstar]
tag     = 'FSTA'
buildup = ['center-ops', 'arrow', 'trig', 'eqeq', 'ltgt-ne', 'eqeqeq', 'eqexeq', 'ineq', 'brst', 'plusplus', 'logic', 'kern-dotty', 'kern-bars']
desc    = 'F*'

[composite.haskell]
tag     = 'HSKL'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'slasheq', 'ineq', 'ltgt-diamond', 'plusplus', 'dot-as-operator', 'kern-dotty', 'kern-bars', 'logic']
desc    = 'Haskell'

[composite.idris]
tag     = 'IDRS'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'slasheq', 'ineq', 'ltgt-diamond', 'plusplus', 'dot-as-operator', 'kern-dotty', 'kern-bars', 'logic']
desc    = 'Idris'

[composite.elm]
tag     = 'ELMX'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'slasheq', 'ineq', 'ltgt-diamond', 'plusplus', 'dot-as-operator', 'kern-dotty', 'kern-bars', 'logic']
desc    = 'Elm'

[composite.purescript]
tag     = 'PURS'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'slasheq', 'ineq', 'ltgt-diamond', 'plusplus', 'dot-as-operator', 'kern-dotty', 'kern-bars', 'logic']
desc    = 'PureScript'

[composite.swift]
tag     = 'SWFT'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'exeq', 'ineq', 'ltgt-diamond', 'plusplus', 'kern-dotty', 'kern-bars']
desc    = 'Swift'

[composite.dafny]
tag     = 'DFNY'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'exeq', 'ineq', 'ltgt-diamond', 'plusplus', 'bar-triggers-op-centering', 'kern-dotty', 'kern-bars']
desc    = 'Dafny'

[composite.coq]
tag     = 'COQX'
buildup = ['center-ops', 'arrow', 'arrow2', 'trig', 'llgg', 'eqeq', 'ltgt-ne', 'ineq', 'plusplus', 'dot-as-operator', 'logic', 'brst', 'kern-dotty', 'kern-bars']
desc    = 'Coq'

[composite.matlab]
tag     = 'MTLB'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'llgg', 'eqeq', 'tildeeq', 'ineq', 'plusplus', 'kern-dotty', 'kern-bars']
desc    = 'Matlab'

[composite.verilog]
tag     = 'VRLG'
buildup = ['center-ops', 'arrow', 'html-comment', 'trig', 'llgg', 'llggeq', 'eqeqeq', 'eqeq', 'exeqeq', 'exeq', 'plusplus', 'brst', 'kern-dotty', 'kern-bars']
desc    = 'Verilog'

[composite.wolfram]
tag     = 'WFLM'
buildup = ['center-ops', 'arrow', 'trig', 'ltgt-diamond', 'eqeq', 'exeq', 'eqexeq-dl', 'ineq', 'brst', 'plusplus', 'logic', 'colon-greater-as-colon-arrow', 'kern-dotty', 'kern-bars']
brief   = 'Wolfram'
desc    = 'Wolfram Language (Mathematica)'
